var documenterSearchIndex = {"docs":
[{"location":"examples/ExampleA01_RationalMassMatrix/#A01-:-Rational-Mass-Matrix","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"","category":"section"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"(source code)","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"This example demonstrates the usage of rational numbers to calculate e.g. exact mass matrices on reference domains (if exact quadrature rules in Rational number format are available).","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"module ExampleA01_RationalMassMatrix\n\nusing GradientRobustMultiPhysics\n\n# everything is wrapped in a main function\nfunction main()\n\n    # reference domain as extendable grid\n    xgrid = reference_domain(Triangle2D, Rational{Int64})\n\n    # define P1-Courant finite element space\n    FES = FESpace{H1P1{1}}(xgrid)\n\n    # define mass matrix bilinear form\n    MAMA_BLF = SymmetricBilinearForm(Rational{Int64},ON_CELLS,[FES,FES],[Identity,Identity])\n\n    # assemble mass matrix and divide by area\n    MAMA = FEMatrix{Rational{Int64}}(\"mass matrix\",FES)\n    assemble!(MAMA[1],MAMA_BLF)\n    MAMA = MAMA.entries ./ xgrid[CellVolumes][1]\n\n    # print matrix\n    @show MAMA\nend\n\nend","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"Default output:","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"julia> ExampleA01_RationalMassMatrix.main()\nMAMA = Rational{Int64}[1//6 1//12 1//12; 1//12 1//6 1//12; 1//12 1//12 1//6]","category":"page"},{"location":"examples/Example223_NaturalConvection2D/#:-Natural-Convection-2D","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"","category":"section"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"(source code)","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"This example solves the natural convection (or Boussinesque) problem on a triangular domain Omega = mathrmconvlbrace (00)(10)(01) rbrace. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a stemperature T such that","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"beginaligned\n- Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = Ra mathbfe_2 T\nmathrmdiv(u)  = 0\n- Delta mathbfT + mathbfu cdot nabla mathbfT  = 0\nendaligned","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"with some parameter Ra. The velocity has zero Dirichlet boundary conditions, while the temperature is zero along the y-axis, trigonometric along the x-axis and do-nothing at the diagonal boundary of the triangular domain.","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"Instead of using a Newton scheme, we solve a simpler fixpoint iteration plus Anderson acceleration. Also, note that a divergence-free reconstruction operator is used for the velocity, which also helps with the convergence and accuracy of the lowest-order method for this test problem.","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"module Example223_NaturalConvection2D\n\nusing GradientRobustMultiPhysics\n\n# boundary data for temperature on bottom\nT_bottom = DataFunction((T,x) -> (T[1] = 2*(1-cos(2*pi*x[1]))), [1,2]; dependencies = \"X\", quadorder = 4)\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, Ra = 1e6, viscosity = 1, nrefinements = 6)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = reference_domain(Triangle2D)\n    xgrid = uniform_refine(xgrid, nrefinements)\n\n    # types for discretisation by Bernardi--Raugel pressure-robust (BDM1 reconstruction) + P1-FEM for temperature\n    FETypes = [H1BR{2}, H1P0{1}, H1P1{1}];\n    RIdentity = ReconstructionIdentity{HDIVBDM1{2}}\n\n    # load Stokes prototype and add a unknown for the temperature\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false, store = true)\n    add_unknown!(Problem; unknown_name = \"T\", equation_name = \"temperature equation\")\n    Problem.name = \"natural convection problem\"\n\n    # add convection term for velocity\n    add_operator!(Problem, [1,1], ConvectionOperator(1, RIdentity, 2, 2; testfunction_operator = RIdentity, auto_newton = false))\n\n    # add boundary data for velocity (unknown 1) and temperature (unknown 3)\n    add_boundarydata!(Problem, 1, [1,2,3], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 3, [1], BestapproxDirichletBoundary; data = T_bottom)\n    add_boundarydata!(Problem, 3, [3], HomogeneousDirichletBoundary)\n\n    # add Laplacian to temperature equation\n    add_operator!(Problem,[3,3], LaplaceOperator(1.0; store = true, name = \"∇(T)⋅∇(V)\"))\n\n    # add coupling terms for velocity and temperature (convection + gravity)\n    add_operator!(Problem,[3,3], ConvectionOperator(1, RIdentity, 2, 1; auto_newton = false, name = \"(R(u)⋅∇(T)) V\"))\n    add_operator!(Problem,[1,3], AbstractBilinearForm([RIdentity, Identity], fdot_action(Float64,DataFunction([0,-1.0])); factor = Ra, name = \"-Ra v⋅g T\", store = true))\n\n    # show final problem description\n    @show Problem\n\n    # construct FESpaces and Solution veector\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid)]\n    Solution = FEVector{Float64}([\"v_h\", \"p_h\", \"T_h\"],FES)\n\n    # solve (fixedpoint iteration by solving consecutively equations [3] and [1,2] + Anderson acceleration)\n    solve!(Solution, Problem; subiterations = [[3],[1,2]], maxiterations = 100, target_residual = 1e-8, anderson_iterations = 5, anderson_metric = \"l2\", anderson_unknowns = [1,3], anderson_damping = 0.95, show_solver_config = true)\n\n    # compute Nusselt number along bottom boundary\n    NuIntegrator = ItemIntegrator(Float64,ON_BFACES,[Jump(Gradient)], fdot_action(Float64,DataFunction([0,-1.0])); regions = [1])\n    println(\"\\tNu = $(evaluate(NuIntegrator,[Solution[3]]))\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[3]], [Identity, Identity]; Plotter = Plotter)\nend\n\nend","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"Default output:","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"julia> Example223_NaturalConvection2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = natural convection problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n    [3]   | T / temperature equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(a) ⋅ ∇) u ⋅ R(v) (APT = TrilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,3]   | -Ra v⋅g T (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | none\n    [3,2]   | none\n    [3,3]   | ∇(T)⋅∇(V) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(u)⋅∇(T)) V (APT = TrilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : BestapproxDirichletBoundary -> [1]\n                         HomogeneousDirichletBoundary -> [3]\n                          \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = false\n  anderson_iterations = 5\n  subiterations = [[3], [1, 2]]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1, 3]\n  show_statistics = false\n  anderson_metric = l2\n  skip_update = [1, 1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0\n  time = 0\n  show_solver_config = true\n  anderson_damping = 0.95\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 1.0e-8\n  maxiterations = 100\n  AssemblyTriggers = \n         LHS_AT[1] :  A  I  T \n         LHS_AT[2] :  N  N  N \n         LHS_AT[3] :  N  N  A \n         RHS_AT[1] :  N \n         RHS_AT[2] :  N \n         RHS_AT[3] :  N \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2] [1, 3]; [2, 1] [2] [2, 3]; [3, 1] [3, 2] [3, 1]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 6.988663e-11 | 9.063645e+01\n\t      2   | 9.551617e-11 | 7.488134e+00\n\t      3   | 6.989564e-11 | 6.022488e-01\n\t      4   | 7.058951e-11 | 4.960060e-01\n\t      5   | 7.392546e-11 | 1.250719e-01\n\t      6   | 7.466694e-11 | 7.680621e-01\n\t      7   | 7.643274e-11 | 7.043239e-01\n\t      8   | 7.449730e-11 | 9.364728e+00\n\t      9   | 6.782990e-11 | 1.205297e+01\n\t     10   | 8.681826e-11 | 1.435981e+01\n\t     11   | 9.718980e-11 | 5.871295e+00\n\t     12   | 9.101090e-11 | 2.401963e+00\n\t     13   | 9.053196e-11 | 2.770361e+00\n\t     14   | 9.368104e-11 | 4.056945e+00\n\t     15   | 6.634606e-11 | 2.038940e+00\n\t     16   | 6.744205e-11 | 1.668131e+00\n\t     17   | 8.024788e-11 | 3.157813e-01\n\t     18   | 7.475106e-11 | 2.898775e-01\n\t     19   | 7.300467e-11 | 5.488417e-01\n\t     20   | 7.276846e-11 | 2.264459e-01\n\t     21   | 7.078085e-11 | 1.282042e-01\n\t     22   | 7.401708e-11 | 8.975790e-02\n\t     23   | 7.084914e-11 | 6.103222e-02\n\t     24   | 7.432084e-11 | 3.920953e-02\n\t     25   | 7.341020e-11 | 2.192602e-02\n\t     26   | 6.942767e-11 | 1.611986e-02\n\t     27   | 7.203853e-11 | 8.210658e-03\n\t     28   | 7.251780e-11 | 6.087826e-03\n\t     29   | 7.270139e-11 | 2.278378e-03\n\t     30   | 7.214845e-11 | 1.832466e-03\n\t     31   | 7.455460e-11 | 5.785445e-04\n\t     32   | 7.027972e-11 | 2.213736e-04\n\t     33   | 7.735573e-11 | 1.645343e-04\n\t     34   | 7.267762e-11 | 4.255229e-05\n\t     35   | 7.792381e-11 | 4.165039e-05\n\t     36   | 7.727515e-11 | 1.833512e-05\n\t     37   | 7.780805e-11 | 8.190263e-06\n\t     38   | 7.652640e-11 | 5.154906e-06\n\t     39   | 7.265447e-11 | 1.895523e-06\n\t     40   | 7.652005e-11 | 1.912427e-06\n\t     41   | 7.443129e-11 | 4.921489e-07\n\t     42   | 6.984482e-11 | 3.690981e-07\n\t     43   | 7.287340e-11 | 4.227189e-07\n\t     44   | 7.330583e-11 | 8.429613e-08\n\t     45   | 7.290633e-11 | 4.647877e-08\n\t     46   | 7.428146e-11 | 4.431605e-08\n\t     47   | 7.473824e-11 | 1.804113e-08\n\t     48   | 7.377402e-11 | 1.101000e-08\n\t     49   | 7.560755e-11 | 7.748437e-09\n\n\tNu = 22.638373261273316","category":"page"},{"location":"examples/Example223_NaturalConvection2D/","page":"223 : Natural Convection 2D","title":"223 : Natural Convection 2D","text":"(Image: )","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/#A06-:-Local-Equilibrated-Fluxes-2D","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"","category":"section"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"(source code)","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This example computes a local equilibration error estimator for the H^1 error of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"eta^2(sigma_h) =  sigma_h - nabla u_h ^2_L^2(T)","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"where sigma_h discretisates the exact sigma in the dual mixed problem","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"sigma - nabla u = 0\nquad textand quad\nmathrmdiv(sigma) + f = 0","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"by some local equilibration strategy, see reference below for details.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This examples demonstrates the use of low-level structures to assemble individual problems and a strategy solve several small problems in parallel.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"reference: Reference\n''A posteriori error estimates for efficiency and error control in numerical simulations'' Lecture Notes by M. Vohralik >Link<","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"module ExampleA06_LocalEquilibratedFluxes2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n# ... and its gradient\nfunction exact_function_gradient!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    # du/dy = du/dr * sin(phi) + (1/r) * du/dphi * cos(phi)\n    result[2] = sin(2*result[1]/3) * sin(result[1]) + cos(2*result[1]/3) * cos(result[1])\n    result[2] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\n    # du/dx = du/dr * cos(phi) - (1/r) * du/dphi * sin(phi)\n    result[1] = sin(2*result[1]/3) * cos(result[1]) - cos(2*result[1]/3) * sin(result[1])\n    result[1] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nlevels = 15, theta = 1//2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite elements for primal and dual problem (= for equilibrated fluxes)\n    # (local equilibration for Pk needs at least BDMk)\n    FEType = H1P1{1}\n    FETypeDual = HDIVBDM1{2}\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u\", dependencies = \"X\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_function_gradient!, [2,2]; name = \"∇(u)\", dependencies = \"X\", quadorder = 4)\n\n    # setup Poisson problem\n    Problem = PoissonProblem()\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # define error estimator : || sigma_h - nabla u_h ||^2_{L^2(T)}\n    # this can be realised via a kernel function\n    function eqestimator_kernel(result, input)\n        # input = [Identity(sigma_h), Divergence(sigma_h), Gradient(u_h)]\n        result[1] = (input[1] - input[4])^2 + (input[2] - input[5])^2\n        result[2] = input[3]^2\n        return nothing\n    end\n    estimator_action = Action(Float64,ActionKernel(eqestimator_kernel, [2,5]; name = \"estimator kernel\", dependencies = \"\", quadorder = 3))\n    EQIntegrator = ItemIntegrator(Float64,ON_CELLS,[Identity, Divergence, Gradient],estimator_action)\n\n    # setup exact error evaluations\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2ErrorEvaluatorDual = L2ErrorIntegrator(Float64, user_function_gradient, Identity)\n\n    # refinement loop (only uniform for now)\n    NDofs = zeros(Int, nlevels)\n    NDofsDual = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 4)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n        solve!(Solution, Problem)\n        NDofs[level] = length(Solution[1])\n\n        # evaluate eqilibration error estimator adn append it to Solution vector (for plotting etc.)\n        DualSolution = get_local_equilibration_estimator(xgrid, Solution, FETypeDual)\n        NDofsDual[level] = length(DualSolution.entries)\n        FES_eta = FESpace{H1P0{1}}(xgrid)\n        append!(Solution, \"σ_h\",FES_eta)\n        error4cell = zeros(Float64,2,num_sources(xgrid[CellNodes]))\n        evaluate!(error4cell, EQIntegrator, [DualSolution[1], DualSolution[1], Solution[1]])\n        for j = 1 : num_sources(xgrid[CellNodes])\n            Solution[2][j] = error4cell[1,j] + error4cell[2,j]\n        end\n\n        if verbosity > 0\n            println(\"\\n  SOLVE LEVEL $level\")\n            println(\"    ndofs = $(NDofs[level])\")\n            println(\"    ndofsDual = $(NDofsDual[level])\")\n        end\n\n        # calculate L2 error, H1 error, estimator, dual L2 error and write to results\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,[Solution[1]]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,[Solution[1]]))\n        Results[level,3] = sqrt(sum(Solution[2][:]))\n        Results[level,4] = sqrt(evaluate(L2ErrorEvaluatorDual,[DualSolution[1]]))\n        if verbosity > 0\n            println(\"  ESTIMATE\")\n            println(\"    estim H1 error = $(Results[level,3])\")\n            println(\"    exact H1 error = $(Results[level,2])\")\n            println(\"     dual L2 error = $(Results[level,4])\")\n        end\n\n        if level == nlevels\n            break;\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, Solution[2], theta)\n            xgrid = RGB_refine(xgrid, facemarker)\n        end\n    end\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1]], [Identity]; add_grid_plot = true, Plotter = Plotter)\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\", \"|| ∇u - σ_h ||\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\", \"|| ∇u - σ_h ||\"])\nend\n\n\n# this function computes the local equilibrated fluxes\n# by solving local problems on (disjunct group of) node patches\nfunction get_local_equilibration_estimator(xgrid, Solution, FETypeDual; verbosity::Int = 1)\n    # needed grid stuff\n    xCellNodes::Array{Int32,2} = xgrid[CellNodes]\n    xCellFaces::Array{Int32,2} = xgrid[CellFaces]\n    xFaceNodes::Array{Int32,2} = xgrid[FaceNodes]\n    xCellVolumes::Array{Float64,1} = xgrid[CellVolumes]\n    xNodeCells = atranspose(xCellNodes)\n    nnodes::Int = num_sources(xNodeCells)\n    nfaces::Int = num_sources(xFaceNodes)\n\n    # get node patch groups that can be solved in parallel\n    group4node = xgrid[NodePatchGroups]\n\n    # init equilibration space (and Lagrange multiplier space)\n    FEType = eltype(Solution[1].FES)\n    FESDual = FESpace{FETypeDual}(xgrid)\n    xItemDofs::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = FESDual[CellDofs]\n    xFaceDofs::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = FESDual[FaceDofs]\n    xItemDofs_uh::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = Solution[1].FES[CellDofs]\n    DualSolution = FEVector{Float64}(\"σ_h\",FESDual)\n\n    # partition of unity and their gradients\n    POUFEType = H1P1{1}\n    POUFES = FESpace{POUFEType}(xgrid)\n    POUqf = QuadratureRule{Float64,Triangle2D}(0)\n\n    # quadrature formulas\n    qf = QuadratureRule{Float64,Triangle2D}(2*get_polynomialorder(FETypeDual, Triangle2D))\n    weights::Array{Float64,1} = qf.w\n\n    # some constants\n    dofs_on_face::Int = max_num_targets_per_source(xFaceDofs)\n    div_penalty::Float64 = 1e5\n    bnd_penalty::Float64 = 1e30\n    maxcells::Int = max_num_targets_per_source(xNodeCells)\n    maxdofs::Int = max_num_targets_per_source(xItemDofs)\n    maxdofs_uh::Int = max_num_targets_per_source(xItemDofs_uh)\n\n    # redistribute groups for more equilibrated thread load (first groups are larger)\n    maxgroups = maximum(group4node)\n    groups = Array{Int,1}(1 : maxgroups)\n    for j::Int = 1 : floor(maxgroups/2)\n        a = groups[j]\n        groups[j] = groups[2*j]\n        groups[2*j] = a\n    end\n    X = Array{Array{Float64,1},1}(undef,maxgroups)\n\n    Threads.@threads for group in groups\n        grouptime = @elapsed begin\n        @info \"  Starting equilibrating patch group $group on thread $(Threads.threadid())... \"\n        # temporary variables\n        localnode::Int = 0\n        graduh = zeros(Float64,2)\n        gradphi = zeros(Float64,2)\n        coeffs_uh = zeros(Float64, maxdofs_uh)\n        eval_i = zeros(Float64,2)\n        eval_j = zeros(Float64,2)\n        eval_phi = zeros(Float64,1)\n        cell::Int = 0\n        dofi::Int = 0\n        dofj::Int = 0\n        weight::Float64 = 0\n        temp::Float64 = 0\n        temp2::Float64 = 0\n        temp3::Float64 = 0\n        Alocal = zeros(Float64,maxdofs,maxdofs)\n        blocal = zeros(Float64,maxdofs)\n\n        # init FEBasiEvaluators\n        FEBasis_gradphi = FEBasisEvaluator{Float64,POUFEType,Triangle2D,Gradient,ON_CELLS}(POUFES, POUqf)\n        FEBasis_xref = FEBasisEvaluator{Float64,POUFEType,Triangle2D,Identity,ON_CELLS}(POUFES, qf)\n        FEBasis_graduh = FEBasisEvaluator{Float64,FEType,Triangle2D,Gradient,ON_CELLS}(Solution[1].FES, qf)\n        FEBasis_div = FEBasisEvaluator{Float64,FETypeDual,Triangle2D,Divergence,ON_CELLS}(FESDual, qf)\n        FEBasis_id = FEBasisEvaluator{Float64,FETypeDual,Triangle2D,Identity,ON_CELLS}(FESDual, qf)\n\n        # init system\n        A = ExtendableSparseMatrix{Float64,Int}(FESDual.ndofs,FESDual.ndofs)\n        b = zeros(Float64,FESDual.ndofs)\n        X[group] = zeros(Float64,FESDual.ndofs)\n        x = zeros(Float64,FESDual.ndofs)\n\n        # find dofs at boundary of node patches\n        is_boundarydof = zeros(Bool,FESDual.ndofs)\n        boundary_face::Bool = false\n        for face = 1 : nfaces\n            boundary_face = true\n            for k = 1 : 2\n                if group4node[xFaceNodes[k,face]] == group\n                    boundary_face = false\n                    break\n                end\n            end\n            if (boundary_face)\n                for j = 1 : dofs_on_face\n                    is_boundarydof[xFaceDofs[j,face]] = true\n                end\n            end\n        end\n\n        for node = 1 : nnodes\n        if group4node[node] == group\n            for c = 1 : num_targets(xNodeCells,node)\n                cell = xNodeCells[c,node]\n\n                # find local node number of global node z\n                # and evaluate (constatn) gradient of nodal basis function phi_z\n                localnode = 1\n                while xCellNodes[localnode,cell] != node\n                    localnode += 1\n                end\n                GradientRobustMultiPhysics.update!(FEBasis_gradphi,cell)\n                eval!(gradphi, FEBasis_gradphi, localnode, 1)\n\n                # read coefficients for discrete flux\n                for j=1:maxdofs_uh\n                    coeffs_uh[j] = Solution[1].entries[xItemDofs_uh[j,cell]]\n                end\n\n                # update other FE evaluators\n                GradientRobustMultiPhysics.update!(FEBasis_graduh,cell)\n                GradientRobustMultiPhysics.update!(FEBasis_div,cell)\n                GradientRobustMultiPhysics.update!(FEBasis_id,cell)\n\n                # assembly on this cell\n                for i in eachindex(weights)\n                    weight = weights[i] * xCellVolumes[cell]\n\n                    # evaluate grad(u_h) and nodal basis function at quadrature point\n                    fill!(graduh,0)\n                    eval!(graduh, FEBasis_graduh, coeffs_uh, i)\n                    eval!(eval_phi, FEBasis_xref, localnode, i)\n\n                    # compute residual -f*phi_z + grad(u_h) * grad(phi_z) at quadrature point i ( f = 0 in this example !!! )\n                    temp = div_penalty * sqrt(xCellVolumes[cell]) * ( graduh[1] * gradphi[1] + graduh[2] * gradphi[2] ) * weight\n                    temp2 = div_penalty * sqrt(xCellVolumes[cell]) *weight\n                    for dof_i = 1 : maxdofs\n                        eval!(eval_i, FEBasis_id, dof_i, i)\n                        eval_i .*= weight\n                        # right-hand side for best-approximation (grad(u_h)*phi)\n                        blocal[dof_i] += (graduh[1]*eval_i[1] + graduh[2]*eval_i[2]) * eval_phi[1]\n                        # mass matrix Hdiv\n                        for dof_j = 1 : maxdofs\n                            eval!(eval_j, FEBasis_id, dof_j, i)\n                            Alocal[dof_i,dof_j] += (eval_i[1]*eval_j[1] + eval_i[2]*eval_j[2])\n                        end\n                        # div-div matrix Hdiv * penalty (quick and dirty to avoid Lagrange multiplier)\n                        eval!(eval_i, FEBasis_div, dof_i, i)\n                        blocal[dof_i] += temp * eval_i[1]\n                        temp3 = temp2 * eval_i[1]\n                        for dof_j = 1 : maxdofs\n                            eval!(eval_j, FEBasis_div, dof_j, i)\n                            Alocal[dof_i,dof_j] += temp3*eval_j[1]\n                        end\n                    end\n                end\n\n                # write into global A and b\n                for dof_i = 1 : maxdofs\n                    dofi = xItemDofs[dof_i,cell]\n                    b[dofi] += blocal[dof_i]\n                    for dof_j = 1 : maxdofs\n                        dofj = xItemDofs[dof_j,cell]\n                        _addnz(A,dofi,dofj,Alocal[dof_i,dof_j],1)\n                    end\n                end\n\n                # reset local A and b\n                fill!(Alocal,0)\n                fill!(blocal,0)\n            end\n        end\n        end\n\n        # penalize dofs at boundary of node patches\n        for j = 1 : FESDual.ndofs\n            if is_boundarydof[j]\n                A[j,j] = bnd_penalty\n                b[j] = 0\n            end\n        end\n\n        # solve local problem\n        X[group] .= A\\b\n    end\n\n    @info \"Finished equilibration patch group $group on thread $(Threads.threadid()) in $(grouptime)s \"\n    end\n\n    # write local solutions to global vector\n    for group = 1 : maxgroups\n        DualSolution[1].entries .+= X[group]\n    end\n\n    return DualSolution\nend\n\nend","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"Default output:","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"julia> ExampleA06_LocalEquilibratedFluxes2D.main()\n\n    ndofs   |    || u - u_h ||     order  |  || ∇(u - u_h) ||    order  |          η           order  |   || ∇u - σ_h ||     order  |\n============|=============================|=============================|=============================|=============================|\n         8  |     6.89098e-02      0.000  |     4.47366e-01      0.000  |     5.92585e-01      0.000  |     3.83288e-01      0.000  |\n        14  |     6.99625e-02      -0.054  |     3.29787e-01      1.090  |     4.09066e-01      1.325  |     2.36024e-01      1.733  |\n        21  |     2.87095e-02      4.394  |     2.37741e-01      1.614  |     2.82876e-01      1.819  |     1.55763e-01      2.050  |\n        28  |     1.70533e-02      3.621  |     1.91257e-01      1.513  |     2.17328e-01      1.833  |     1.13001e-01      2.231  |\n        53  |     1.01500e-02      1.626  |     1.45762e-01      0.851  |     1.65209e-01      0.859  |     7.85425e-02      1.140  |\n        72  |     7.50888e-03      1.967  |     1.20090e-01      1.265  |     1.33334e-01      1.399  |     5.76490e-02      2.019  |\n       107  |     5.07525e-03      1.978  |     9.39968e-02      1.237  |     1.02525e-01      1.326  |     4.09588e-02      1.726  |\n       170  |     2.90357e-03      2.412  |     7.31067e-02      1.086  |     7.88109e-02      1.136  |     2.96416e-02      1.397  |\n       276  |     1.78285e-03      2.013  |     5.58791e-02      1.109  |     5.99802e-02      1.127  |     2.17336e-02      1.281  |\n       474  |     9.68357e-04      2.257  |     4.21546e-02      1.042  |     4.49963e-02      1.063  |     1.57444e-02      1.192  |\n       831  |     5.61728e-04      1.940  |     3.17919e-02      1.005  |     3.38431e-02      1.015  |     1.16280e-02      1.080  |\n      1449  |     3.21579e-04      2.006  |     2.38132e-02      1.039  |     2.52979e-02      1.047  |     8.53990e-03      1.110  |\n      2572  |     1.69915e-04      2.224  |     1.79144e-02      0.992  |     1.89986e-02      0.998  |     6.33427e-03      1.041  |\n      4413  |     1.05219e-04      1.775  |     1.35609e-02      1.031  |     1.43703e-02      1.034  |     4.74815e-03      1.068  |\n      7688  |     5.77602e-05      2.161  |     1.02798e-02      0.998  |     1.08851e-02      1.001  |     3.57847e-03      1.019  |","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"(Image: ) (Image: )","category":"page"},{"location":"pdeoperators/#PDE-Operators","page":"PDE Operators","title":"PDE Operators","text":"","category":"section"},{"location":"pdeoperators/#Purpose","page":"PDE Operators","title":"Purpose","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"The PDE consists of PDEOperators characterising some feature of the model (like friction, convection, exterior forces etc.), they describe the continuous weak form of the PDE. ","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"GradientRobustMultiPhysics.PDEOperator","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.PDEOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.PDEOperator","text":"mutable struct PDEOperator{T<:Real, APT<:AssemblyPatternType, AT<:AbstractAssemblyType} <: AbstractPDEOperator\n\ncommon structures for all finite element operators that are assembled with GradientRobustMultiPhysics; better look at the AssemblyPatternType and the constructors\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"The following table lists all available operators and physics-motivated constructors for them. Click on them or scroll down to find out more details.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Main constructors Special constructors Mathematically\nAbstractBilinearForm  (mathrmA(mathrmFO_1(u))mathrmFO_2(v)) or (mathrmFO_1(u)mathrmA(mathrmFO_2(v)))\n LaplaceOperator (kappa nabla unabla v)\n ReactionOperator (alpha u v)\n LagrangeMultiplier (mathrmFO_1(u) v) (automatically assembles 2nd transposed block)\n ConvectionOperator (beta cdot nabla u v) (beta is function)\n HookStiffnessOperator2D (mathbbC epsilon(u)epsilon(v)) (also 1D or 3D variants exist)\nAbstractTrilinearForm  (mathrmA(mathrmFO_1(a)mathrmFO_2(u))mathrmFO_3(v))\n ConvectionOperator ((a cdot nabla) u v) (a is registered unknown)\n ConvectionRotationFormOperator ((a times nabla) uv) (a is registered unknown, only 2D for now)\nGenerateNonlinearForm  (mathrmNA(mathrmFO_1(u)mathrmFO_N-1(u))mathrmFO_N(v))\nRhsOperator  (f cdot mathrmFO(v)) or mathrmA(mathrmFO(v))","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Legend: mathrmFO  are placeholders for Function Operators, and mathrmA stands for a (linear) Action (that only expects the operator value of the finite element function as an input) and mathrmNA stands for a (nonlinear) Action (see GenerateNonlinearForm for details).","category":"page"},{"location":"pdeoperators/#Assembly-Type","page":"PDE Operators","title":"Assembly Type","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Many PDE operators need a specification of that decides to which parts of the mesh the PDEOperator is associated (e.g. cells, faces, bfaces, edges), this is prescribed via the AssemblyType. The following assembly types are available. Additional to define where PDEOperators live and assemble, they can be also used as an argument for interpolation!.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"AssemblyType Description\nAT_NODES interpolate at vertices of the mesh (only for H1-conforming FEM)\nON_CELLS assemble/interpolate over the cells of the mesh\nON_FACES assemble/interpolate over all faces of the mesh\nON_IFACES assemble/interpolate over the interior faces of the mesh\nON_BFACES assemble/interpolate over the boundary faces of the mesh\nON_EDGES (*) assemble/interpolate over all edges of the mesh (in 3D)\nON_BEDGES (*) assemble/interpolate over the boundary edges of the mesh (in 3D)","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"note: Note\n(*) = only reasonable in 3D and still experimental, might have some issues","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"assemblytypes.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.AT_NODES","page":"PDE Operators","title":"GradientRobustMultiPhysics.AT_NODES","text":"abstract type AT_NODES <: AbstractAssemblyType\n\ncauses interpolation at vertices of the grid (only for H1-conforming interpolations)\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_BEDGES","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_BEDGES","text":"abstract type ON_BEDGES <: AbstractAssemblyType\n\ncauses assembly/interpolation on boundary edges of the grid (only in 3D)\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_BFACES","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_BFACES","text":"abstract type ON_BFACES <: AbstractAssemblyType\n\ncauses assembly/interpolation on boundary faces of the grid\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_CELLS","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_CELLS","text":"abstract type ON_CELLS <: AbstractAssemblyType\n\ncauses assembly/interpolation on cells of the grid\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_EDGES","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_EDGES","text":"abstract type ON_EDGES <: AbstractAssemblyType\n\ncauses assembly/interpolation on edges of the grid (only in 3D)\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_FACES","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_FACES","text":"abstract type ON_FACES <: AbstractAssemblyType\n\ncauses assembly/interpolation on faces of the grid\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ON_IFACES","page":"PDE Operators","title":"GradientRobustMultiPhysics.ON_IFACES","text":"abstract type ON_IFACES <: ON_FACES\n\ncauses assembly/interpolation on interior faces of the grid\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#Special-Linear-Operators","page":"PDE Operators","title":"Special Linear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Below you find the special constructors of available common linear, bilinear and trilinear forms.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"LaplaceOperator\nReactionOperator\nConvectionOperator\nConvectionRotationFormOperator\nHookStiffnessOperator1D\nHookStiffnessOperator2D\nHookStiffnessOperator3D\nRhsOperator","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.LaplaceOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.LaplaceOperator","text":"LaplaceOperator() -> GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}\nLaplaceOperator(diffusion; name, AT, gradient_operator, regions, store) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}}\n\n\nconstructor for a bilinearform that describes a(u,v) = (kappa * nabla u, nabla v) where kappa is some constant diffusion coefficient\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ReactionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ReactionOperator","text":"ReactionOperator() -> GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}\nReactionOperator(coefficient) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, APT, ON_CELLS} where APT<:AssemblyPatternType}\nReactionOperator(coefficient, ncomponents; name, AT, identity_operator, regions, store) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, APT, ON_CELLS} where APT<:AssemblyPatternType}\n\n\nconstructor for a bilinearform that describes a(u,v) = (A(u),v) or (u,A(v)) with some user-specified action A\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ConvectionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ConvectionOperator","text":"function ConvectionOperator(\n    a_from::Int, \n    beta_operator::Type{<:AbstractFunctionOperator},\n    xdim::Int,\n    ncomponents::Int;\n    name = \"auto\",\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    fixed_argument::Int = 1,\n    factor = 1,\n    ansatzfunction_operator::Type{<:AbstractFunctionOperator} = Gradient,\n    testfunction_operator::Type{<:AbstractFunctionOperator} = Identity,\n    regions::Array{Int,1} = [0],\n    auto_newton::Bool = false,\n    quadorder = 0)\n\nconstructs a trilinearform for a convection term of the form c(a,u,v) = (betaoperator(a)*grad(u),v) where afrom is the id of some unknown of the PDEDescription. xdim is the space dimension (= number of components of betaoperato(a)) and ncomponents is the number of components of u. With fixedargument = 2 a and u can switch their places, i.e.  c(u,a,v) = (betaoperator(u)*grad(a),v), With autonewton = true a Newton scheme for a(u,v) = (u*grad(u),v) is automatically derived (and fixed_argument is ignored).\n\n\n\n\n\nConvectionOperator(beta::UserData{AbstractDataFunction, FType, NFType, ndim} where {FType<:Function, NFType<:Function, ndim}, ncomponents::Int64; name, store, AT, ansatzfunction_operator, testfunction_operator, transposed_assembly, regions) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (beta*grad(u),v) with some user-specified DataFunction beta. The user also has to specify the number of components ncomponents()) the convection is applied to.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ConvectionRotationFormOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ConvectionRotationFormOperator","text":"ConvectionRotationFormOperator(beta::Int64, beta_operator::Type{var\"#s182\"} where var\"#s182\"<:??, xdim::Int64, ncomponents::Int64; name, AT, factor, ansatzfunction_operator, testfunction_operator, regions) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, TrilinearForm, ON_CELLS}}\n\n\nconstructor for a trilinearform that describes a(u,v) = (beta x curl(u),v) where beta is the id of some unknown vector field of the PDEDescription, u and v are also vector-fields and x is the cross product (so far this is only implemented in 2D)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator1D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator1D","text":"HookStiffnessOperator1D(mu; name, regions, gradient_operator, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (C grad(u), grad(v)) where C is the 1D stiffness tensor C grad(u) = mu grad(u)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator2D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator2D","text":"HookStiffnessOperator2D(mu, lambda; name, AT, regions, gradient_operator, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (C eps(u), eps(v)) where C is the 3D stiffness tensor for isotropic media in Voigt notation, i.e. C eps(u) = 2 mu eps(u) + lambda tr(eps(u)) for Lame parameters mu and lambda\n\nIn Voigt notation C is a 3 x 3 matrix\nC = [c11,c12,  0\n     c12,c11,  0\n       0,  0,c33]\n\nwhere c33 = shear_modulus, c12 = lambda and c11 = 2*c33 + c12\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator3D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator3D","text":"HookStiffnessOperator3D(mu, lambda; name, AT, regions, gradient_operator, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (C eps(u), eps(v)) where C is the 3D stiffness tensor for isotropic media in Voigt notation, i.e. C eps(u) = 2 mu eps(u) + lambda tr(eps(u)) for Lame parameters mu and lambda\n\nIn Voigt notation C is a 6 x 6 matrix\nC = [c11,c12,c12,  0,  0,  0\n     c12,c11,c12,  0,  0,  0\n     c12,c12,c11,  0,  0,  0\n       0,  0,  0,c44,  0,  0\n       0,  0,  0,  0,c44,  0\n       0,  0,  0,  0,  0,c44]   \n\nwhere c44 = shear_modulus, c12 = lambda and c11 = 2*c44 + c12\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.RhsOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.RhsOperator","text":"RhsOperator(operator::Type{var\"#s2493\"} where var\"#s2493\"<:??, action::AbstractAction; name, AT, regions, factor, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\n\n\ngenerates a linearform from an action\n\n\n\n\n\nRhsOperator(operator::Type{var\"#s2481\"} where var\"#s2481\"<:??, regions::Vector{Int64}, data::UserData{var\"#s2480\", FType, NFType, ndim} where {var\"#s2480\"<:AbstractDataFunction, FType<:Function, NFType<:Function, ndim}; name, AT, factor, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\n\n\ngenerates a linearform from a given UserData{<:DataFunction} (whose result dimension has to be 1)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Custom-Linear-Operators","page":"PDE Operators","title":"Custom Linear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"It is possible to define custom bilineraforms and trilinearforms by specifiyng Function Operators and (in case of bilinearform optionally) an Action.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"AbstractBilinearForm\nAbstractTrilinearForm","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.AbstractBilinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.AbstractBilinearForm","text":"function AbstractBilinearForm(\n    operators::Array{AbstractFunctionOperator,1},\n    action::AbstractAction = NoAction();\n    name = \"auto\",\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    apply_action_to = 1,\n    regions::Array{Int,1} = [0],\n    transposed_assembly::Bool = false,\n    store::Bool = false)\n\nabstract bilinearform constructor that assembles\n\nb(u,v) = intregions action(operator1(u)) * operator2(v) if applyaction_to = 1\nb(u,v) = intregions operator1(u) * action(operator2(v)) if applyaction_to = 2\n\nThe optional arguments AT and regions specifies on which grid item the operator lives/assembles, while store toggles the separate storage for the operator (which is advisable if it is not alone i an otherweise nonlinear block of a PDEDescription). \n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.AbstractTrilinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.AbstractTrilinearForm","text":"function AbstractTrilinearForm(\n    operators::Array{AbstractFunctionOperator,1},\n    a_from::Int,\n    a_to::Int,\n    action::AbstractAction;\n    name = \"auto\",\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    regions::Array{Int,1} = [0],\n    transposed_assembly::Bool = false)\n\nabstract trilinearform constructor that assembles\n\nc(a,u,v) = int_regions action(operator1(a),operator2(u)) * operator3(v)\n\nwhere u and are the ansatz and test function coressponding to the PDE coordinates and a is an additional unknown of the PDE. The argument a can be moved to the other positions with ato and gets it data from unknown afrom of the full PDEdescription.\n\nThe optional arguments AT and regions specifies on which grid item the operator lives/assembles,\n\nAlso note that this operator is always marked as nonlinear by the Solver configuration.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Examples","page":"PDE Operators","title":"Examples","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Below some examples for operators are given:","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"# Example 1 : div-div bilinearform with a factor λ (e.g. for divergence-penalisation)\noperator = AbstractBilinearForm([Divergence,Divergence]; name = \"λ (div(u),div(v))\", factor = λ)\n\n# Example 2 : Gradient jump stabilisation with an item-dependent action and a factor s (e.g. for convection stabilisation)\nxFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\nfunction stabilisation_kernel(result, input, item)\n    result .= input \n    result .*= xFaceVolumes[item]^2\nend\naction = Action(Float64,stabilisation_kernel, [2,2]; dependencies = \"I\", quadorder = 0 )\noperator = AbstractBilinearForm([Jump(Gradient), Jump(Gradient)], action; AT = ON_IFACES, name = \"s |F|^2 [∇(u)]⋅[∇(v)]\", factor = s)\n","category":"page"},{"location":"pdeoperators/#Lagrange-Multipliers","page":"PDE Operators","title":"Lagrange Multipliers","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"There is a special bilinearform intended to use for the assembly of Lagrange multipliers that automatically copies itself to the transposed block of the PDEdescription.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"LagrangeMultiplier","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.LagrangeMultiplier","page":"PDE Operators","title":"GradientRobustMultiPhysics.LagrangeMultiplier","text":"LagrangeMultiplier(operator::Type{var\"#s206\"} where var\"#s206\"<:??; name, AT, action, regions, store, factor) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (A(operator(u)), id(v)) and assembles a second transposed block at the block of the transposed PDE coordinates. It is intended to use to render one unknown of the PDE the Lagrange multiplier for another unknown by putting this operator on the coressponding subdiagonal block of the PDE description.\n\nExample: LagrangeMultiplier(Divergence) is used to render the pressure the LagrangeMultiplier for the velocity divergence constraint in the Stokes prototype.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Nonlinear-Operators","page":"PDE Operators","title":"Nonlinear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Nonlinear Operators can be setup in two ways. The manual way requires the user to define an action with a nonlinear action kernel (see Action Kernel) that specifies the linearisation of the nonlinearity. There is also an automatic way where the user specifies only a function (where the input can be used nonlinearly) which is then automatically differentiated to generate the linearised action kernel, see below for details.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"GenerateNonlinearForm","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.GenerateNonlinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.GenerateNonlinearForm","text":"function GenerateNonlinearForm(\n    name::String,\n    operator1::Array{DataType,1},\n    coeff_from::Array{Int,1},\n    operator2::Type{<:AbstractFunctionOperator},\n    action_kernel::Function,\n    argsizes::Array{Int,1},\n    dim::Int;\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    ADnewton::Bool = false,\n    action_kernel_rhs = nothing,\n    factor = 1,\n    regions = [0])\n\ngenerates an abstract nonlinearform operator G.  The array coeff_from stores the ids of the unknowns that should be used to evaluate the operators. The array argsizes is a vector with two entries where the first one is the length of the expected result vector and the second one is the length of the input vector.\n\nIf ADnewton == true, the specified actionkernel is automatically differentiated to assemble the Jacobian DG and setup a Newton iteration. The actionkernel has to be a function of the interface \n\nfunction name(result,input)\n\nwhere input is a vector of the operators of the solution and result is what then is multiplied with operator2 of the testfunction. Given some operator G(u), the Newton iteration reads DG u_next = DG u - G(u) which is added to the rest of the (linear) operators in the PDEDescription.\n\nIf ADnewton == false, the user is epected to prescribe a linearisation of the nonlinear operator. In this case the action_kernel has to satisfy the interface\n\nfunction name(result, input_current, input_ansatz)\n\nwhere inputcurrent is a vector of the operators of the solution and inputansatz is a vecor with the operators evaluated at one of the basis functions. If necessary, also a right-hand side action in the same format can be prescribed in actionkernelrhs.\n\nNote: this is a highly experimental feature at the moment and will possibly only work when all operators are associated with the same unknown.\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Other-Operators","page":"PDE Operators","title":"Other Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"There are some more operators that do not fit into the structures above. Also, in the future, the goal is to open up the operator level for exterior code to setup operators that are assembled elsewhere.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"FVConvectionDiffusionOperator\nDiagonalOperator\nCopyOperator","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.FVConvectionDiffusionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.FVConvectionDiffusionOperator","text":"FVConvectionDiffusionOperator(beta_from::Int64; diffusion) -> FVConvectionDiffusionOperator\n\n\nfinite-volume convection diffusion operator (for cell-wise P0 rho)\n\ndiv(diffusion * grad(rho) + beta rho)\n\nFor diffusion = 0, the upwind divergence: div_upw(beta*rho) is generated  For diffusion > 0, TODO\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.DiagonalOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.DiagonalOperator","text":"DiagonalOperator() -> DiagonalOperator\nDiagonalOperator(value::Real) -> DiagonalOperator\nDiagonalOperator(value::Real, onlynz::Bool; regions) -> DiagonalOperator\n\n\nputs value on the diagonal entries of the cell dofs within given regions\n\nif onlyz == true only values that are zero are changed\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.CopyOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.CopyOperator","text":"CopyOperator(copy_from, factor) -> CopyOperator\n\n\ncopies entries from TargetVector to rhs block\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdeprototypes/#PDE-Prototypes","page":"PDE Prototypes","title":"PDE Prototypes","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Below all available prototypes (i.e. pre-defined constructors for PDEDescription) are listed. They can be used as a point of deperature for more complex models. Also have a look in to the examples for more complex model problems.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"note: Note\nFor most prototypes boundary data and right-hand side data or other modifications to the weak form of the PDE have to be added after a proto-type constructor has been called, see the examples for further assistance.","category":"page"},{"location":"pdeprototypes/#Poisson-equation","page":"PDE Prototypes","title":"Poisson equation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Poisson equation seeks a function u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mu Delta u = f","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some diffusion coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mu nabla unabla v)  = (fv) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"PoissonProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.PoissonProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.PoissonProblem","text":"function PoissonProblem(diffusion = 1.0)\n\nCreates a PDEDescription for a Poisson problem with globally constant diffusion parameter.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"dual weak formulations are also possible but are not available as a prototype currently","category":"page"},{"location":"pdeprototypes/#Incompressible-Navier–Stokes-equations","page":"PDE Prototypes","title":"Incompressible Navier–Stokes equations","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier–Stokes equations in d dimensions seek a (vector-valued) velocity mathbfu and a pressure p such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some viscosity coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The weak formulation (for homogeneous Dirichlet boundary data) seeks (mathbfup) such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n(mu nabla mathbfunabla mathbfv) + ((u cdot nabla) mathbfu mathbfv) + (mathrmdiv mathbfv p)  = (mathbffmathbfv)  textfor all  mathbfvin H^1_0(Omega)^d\n(mathrmdiv mathbfu q)  = 0  textfor all  q in L^2_0(Omega)\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"IncompressibleNavierStokesProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","text":"function IncompressibleNavierStokesProblem(\n    dimension::Int = 2;\n    viscosity = 1.0,\n    nonlinear::Bool = false,\n    auto_newton::Bool = false,\n    nopressureconstraint::Bool = false,\n    pmean = 0)\n\nCreates a PDEDescription for the incompressible (Navier-)Stokes equations of the specified dimension and globally constant viscosity parameter. If nonlinear = true the nonlinear convection term is added to the PDEDescription. If also auto_newton = true, a Newton iteration is devised by automatic differentiation of the convection term.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"if nonlinear == false the nonlinear convection term is not added to the equation resulting in the plain Stokes equations.\nif nopressureconstraint == true removes the integral mean constraint on the pressure.","category":"page"},{"location":"pdeprototypes/#Navier-Lame-equations-(linear-elasticity)","page":"PDE Prototypes","title":"Navier-Lame equations (linear elasticity)","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier-Lame equations seek a displacement mathbfu such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mathrmdiv( mathbbC epsilon( mathbfu)) = mathbff","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where epsilon( mathbfu) is the symmetric part of the gradient, mathbbC is the stiffness tensor (according to Hooke's law) and mathbff some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"In 1D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = mu nabla u","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is the elasticity modulus. In 2D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu and lambda are the Lame coefficients.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mathbbC epsilon(mathbfu)epsilon(mathbfv)) = (mathbffmathbfv) quad textfor all  vin H^1_0(Omega)^d","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"LinearElasticityProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.LinearElasticityProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.LinearElasticityProblem","text":"function LinearElasticityProblem(\n    dimension::Int = 2;\n    elasticity_modulus = 1.0,\n    shear_modulus = 1.0,\n    lambda = 1.0)\n\nCreates a PDEDescription for the linear elasticity problem of the specified dimension.\n\nIf dimension == 1, only the elasticitymodulus is used as a parameter in the Hookian stiffness operator. If dimension == 2, shearmodulus and lambda are used as Lame parameters in the Hookian stiffness operator.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/#L2-Bestapproximation","page":"PDE Prototypes","title":"L2-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an L2-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(uv) = (u_textexactv) quad textfor all  vin L^2(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Of course, on the continuous level, it holds u = u_textexact, but if the weak formulation is assembled for a finite element space one obtains a discrete L2-bestapproximation for this space.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"L2BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.L2BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.L2BestapproximationProblem","text":"function L2BestapproximationProblem(\n    uexact::UserData{AbstractDataFunction};\n    bonus_quadorder::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an L2-Bestapproximation problem for the given exact function. Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/#H1-Bestapproximation","page":"PDE Prototypes","title":"H1-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an H1-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(nabla unabla v) = (nabla u_textexact nabla v) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"H1BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.H1BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.H1BestapproximationProblem","text":"function H1BestapproximationProblem(\n    exact_function_gradient::UserData{AbstractDataFunction},\n    exact_function_boundary::UserData{AbstractDataFunction};\n    bonus_quadorder::Int = 0,\n    bonus_quadorder_boundary::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an H1-Bestapproximation problem for the given exact function (only used on the boundary) and its exact gradient (used in the right-hand side). Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example202_LinearElasticity2D/#:-Linear-Elasticity","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"","category":"section"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"(source code)","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"This example computes the solution mathbfu of the linear elasticity problem","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"beginaligned\n-mathrmdiv (mathbbC epsilon(mathbfu))  = mathbff quad textin  Omega\nmathbbC epsilon(mathbfu) cdot mathbfn  = mathbfg quad textalong  Gamma_N\nendaligned","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"with exterior force mathbff, Neumann boundary force mathbfg, and the stiffness tensor","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"mathbbC epsilon(mathbfu) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"for isotropic media.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"The domain will be the Cook membrane and the displacement has homogeneous boundary conditions on the left side of the domain and Neumann boundary conditions (i.e. a constant force that pulls the domain upwards) on the right side.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"module Example202_LinearElasticity2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_cookmembrane.sg\")\n    xgrid = uniform_refine(xgrid,2)\n\n    # problem parameters\n    elasticity_modulus = 1000 # elasticity modulus\n    poisson_number = 1//3 # Poisson number\n    shear_modulus = (1/(1+poisson_number))*elasticity_modulus\n    lambda = (poisson_number/(1-2*poisson_number))*shear_modulus\n\n    # PDE description via prototype\n    Problem = LinearElasticityProblem(2; shear_modulus = shear_modulus, lambda = lambda)\n\n    # add boundary data\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [2], DataFunction([0,10]; name = \"g\"); AT = ON_BFACES))\n    add_boundarydata!(Problem, 1, [4], HomogeneousDirichletBoundary)\n\n    # show and solve PDE\n    @show Problem\n    FEType = H1P1{2} # P1-Courant FEM will be used\n    Solution = FEVector{Float64}(\"displacement\",FESpace{FEType}(xgrid))\n    solve!(Solution, Problem)\n\n    # plot stress on displaced mesh\n    displace_mesh!(xgrid, Solution[1]; magnify = 4)\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\nend\n\nend","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"Default output:","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"julia> Example202_LinearElasticity2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = linear elasticity problem\n\n     id   | unknown name / equation name\n    [1]   | u / displacement equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Cϵ(u):ϵ(v) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | g⋅id(v) (APT = LinearForm, AT = ON_BFACES, regions = [2])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [4]\n                          \n\nProblem = ","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"(Image: )","category":"page"},{"location":"examples/Example221_StokesIterated2D/#:-Stokes-iterated-penalty-method-2D","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"","category":"section"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"(source code)","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbf0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"with some viscosity parameter mu.","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"Here we solve the simple Hagen-Poiseuille flow on the two-dimensional unit square domain with the iterated penalty method for the Bernardi–Raugel finite element method. Given intermediate solutions  mathbfu_h and  p_h the next approximations are computed by the two equations","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"beginaligned\n(nabla mathbfu_h^next nabla mathbfv_h) + ((mathbfu_h^next cdot nabla) mathbfu_h^next mathbfv_h) + epsilon (mathrmdiv_h(mathbfu_h) mathrmdiv_h(mathbfv_h))  = (mathbffmathbfv_h) + (p_hmathrmdiv(mathbfv_h))\n textfor all  mathbfv_h in mathbfV_h\n(p^next_hq_h)  = (p_hq_h) - (mathrmdiv(mathbfu_H^next)q_h)  textfor all  q_h in Q_h\nendaligned","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This is done consecutively until the residual of both equations is small enough. The convection term is linearised by auto-differentiated Newton terms. The discrete divergence is computed via a RT0 reconstruction operator that preserves the disrete divergence. (another way would be to compute Binv(M)B' where M is the mass matrix of the pressure and B is the matrix for the div-pressure block).","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"module Example221_StokesIterated2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\nusing SparseArrays\nusing Printf\n\n# data for Hagen-Poiseuille flow\nfunction exact_pressure!(viscosity)\n    function closure(result,x::Array{<:Real,1})\n        result[1] = viscosity*(-2*x[1]+1.0)\n    end\nend\nfunction exact_velocity!(result,x::Array{<:Real,1})\n    result[1] = x[2]*(1.0-x[2]);\n    result[2] = 0.0;\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, nonlinear = false, div_penalty = 1e4, viscosity = 1.0)\n\n    # set verbosity level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),4)\n\n    # Bernardi--Raugel element\n    FETypes = [H1BR{2}, H1P0{1}]; PenaltyDivergence = ReconstructionDivergence{HDIVRT0{2}}\n\n    # FE spaces\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_velocity!, [2,2]; name = \"u\", dependencies = \"X\", quadorder = 2)\n    p = DataFunction(exact_pressure!(viscosity), [1,2]; name = \"p\", dependencies = \"X\", quadorder = 1)\n\n    # generate Stokes problem\n    Problem = PDEDescription(\"NSE (iterated penalty)\")\n    add_unknown!(Problem; equation_name = \"velocity update\", unknown_name = \"u\")\n    add_unknown!(Problem; equation_name = \"pressure update\", unknown_name = \"p\")\n    add_constraint!(Problem, FixedIntegralMean(2,0))\n\n    # add boundary data\n    add_boundarydata!(Problem, 1, [1,2,3,4], InterpolateDirichletBoundary; data = u)\n\n    # velocity update equation\n    add_operator!(Problem, [1,1], LaplaceOperator(viscosity; store = true))\n    add_operator!(Problem, [1,2], AbstractBilinearForm([Divergence, Identity]; name = \"(div(v),p)\", store = true, factor = -1))\n    add_operator!(Problem, [1,1], ConvectionOperator(1, Identity, 2, 2; auto_newton = true))\n\n    # add penalty for discrete divergence\n    add_operator!(Problem, [1,1], AbstractBilinearForm([PenaltyDivergence, PenaltyDivergence]; name = \"ϵ (div_h(u),div_h(v))\", store = true, factor = div_penalty))\n\n    # pressure update equation\n    PressureMAMA = AbstractBilinearForm([Identity, Identity]; name = \"(p,q)\", store = true)\n    add_operator!(Problem, [2,1], AbstractBilinearForm([Identity, Divergence]; name = \"(q,div(u))\", store = true, factor = div_penalty))\n    add_operator!(Problem, [2,2], PressureMAMA)\n    add_rhsdata!(Problem, 2, restrict_operator(PressureMAMA; fixed_arguments = [1], fixed_arguments_ids = [2]))\n\n    # show and solve problem\n    @show Problem\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],[FES[1],FES[2]])\n    solve!(Solution, Problem; subiterations = [[1],[2]], maxiterations = 20, show_solver_config = true)\n\n    # calculate L2 error\n    L2ErrorEvaluatorV = L2ErrorIntegrator(Float64, u, Identity)\n    L2ErrorEvaluatorP = L2ErrorIntegrator(Float64, p, Identity)\n    println(\"|| u - u_h || = $(sqrt(evaluate(L2ErrorEvaluatorV,Solution[1])))\")\n    println(\"|| p - p_h || = $(sqrt(evaluate(L2ErrorEvaluatorP,Solution[2])))\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[2]], [Identity, Identity]; Plotter = Plotter)\nend\nend","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"Default output:","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"julia> Example221_StokesIterated2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = NSE (iterated penalty)\n\n     id   | unknown name / equation name\n    [1]   | u / velocity update \n    [2]   | p / pressure update \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (id(u) ⋅ ∇) u ⋅ id(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n            | ϵ (div_h(u),div_h(v)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),p) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | (q,div(u)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,2]   | (p,q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (id(u) ⋅ ∇) u ⋅ id(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | (p,q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : InterpolateDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = false\n  anderson_iterations = 0\n  subiterations = [[1], [2]]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = false\n  anderson_metric = l2\n  skip_update = [1, 1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0\n  time = 0\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 1.0e-10\n  maxiterations = 20\n  AssemblyTriggers = \n         LHS_AT[1] :  A  T \n         LHS_AT[2] :  T  I \n         RHS_AT[1] :  A \n         RHS_AT[2] :  A \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2]; [2, 1] [2]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.045853e-11 | 1.145706e-01\n\t      2   | 2.067699e-11 | 4.876621e-05\n\t      3   | 2.019771e-11 | 2.635035e-08\n\t      4   | 2.076446e-11 | 4.311700e-11\n\n|| u - u_h || = 0.00015826122827419144\n|| p - p_h || = 0.020919592761189876","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"(Image: )","category":"page"},{"location":"meshing/#Meshing","page":"Meshing","title":"Meshing","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Meshes are stored as an ExtendableGrid, see ExtendableGrids.jl for details and constructors. Grid generators for simplex grids can be found e.g. in the external module SimplexGridFactory.jl","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Cells, faces and edges of the mesh are associated to AbstractElementGeometries (defined by ExtendableGrids.jl) that are used to dispatch functionality (local/global transformation, enumeration rules, set of basis functions, volume calculation, refinements etc.). See further below for a list of recognized element geometries.","category":"page"},{"location":"meshing/#Available-Global-Mesh-Manipulations","page":"Meshing","title":"Available Global Mesh Manipulations","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"meshrefinements.jl\", \"commongrids.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"meshing/#GradientRobustMultiPhysics.RGB_refine-Union{Tuple{K}, Tuple{T}, Tuple{ExtendableGrid{T, K}, Vector{Bool}}} where {T, K}","page":"Meshing","title":"GradientRobustMultiPhysics.RGB_refine","text":"RGB_refine(source_grid::ExtendableGrid{T, K}, facemarkers::Vector{Bool}) -> ExtendableGrid{_A, _B} where {_A, _B}\n\n\ngenerates a new ExtendableGrid by red-green-blue mesh refinement of triangular meshes, see e.g.\n\nCarstensen, C. –An Adaptive Mesh-Refining Algorithm Allowing for an H^1 Stable L^2 Projection onto Courant Finite Element Spaces– Constr Approx 20, 549–564 (2004). https://doi.org/10.1007/s00365-003-0550-5\n\nThe bool array facemarkers determines which faces should be bisected. Note, that a closuring is performed such that the first face in every triangle with a marked face is also refined.\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.barycentric_refine-Union{Tuple{ExtendableGrid{T, K}}, Tuple{K}, Tuple{T}} where {T, K}","page":"Meshing","title":"GradientRobustMultiPhysics.barycentric_refine","text":"generates a new ExtendableGrid by barycentric refinement of each cell in the source grid\n\nbarycentric refinement is available for these ElementGeometries\n\nQuadrilateral2D (first split into Triangle2D)\nTriangle2D\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.split_grid_into-Union{Tuple{K}, Tuple{T}, Tuple{ExtendableGrid{T, K}, Type{var\"#s63\"} where var\"#s63\"<:AbstractElementGeometry}} where {T, K}","page":"Meshing","title":"GradientRobustMultiPhysics.split_grid_into","text":"split_grid_into(source_grid::ExtendableGrid{T, K}, targetgeometry::Type{var\"#s63\"} where var\"#s63\"<:AbstractElementGeometry) -> ExtendableGrid{_A, _B} where {_A, _B}\n\n\ngenerates a new ExtendableGrid by splitting each cell into subcells of the specified targetgeometry\n\nsplit rules exist for\n\nQuadrilateral2D into Triangle2D\nHexahedron3D into Tetrahedron3D\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.uniform_refine-Union{Tuple{ExtendableGrid{T, K}}, Tuple{K}, Tuple{T}} where {T, K}","page":"Meshing","title":"GradientRobustMultiPhysics.uniform_refine","text":"generates a new ExtendableGrid by uniform refinement of each cell in the given grid\n\nuniform refinement rules are available for these AbstractElementGeometries:\n\nLine1D (bisection into two subsegments)\nTriangle2D (red refinement into four subtriangles)\nQuadrilateral2D (into four subquadrilaterals)\nTetrahedron (into eight subtetrahedrons)\nHexahedron (into eight subhexahedrons)\n\nif multiple geometries are in the mesh uniform refinement will only work if all refinement rules refine faces and edges (in 3D) equally (so no hanging nodes are created)\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.reference_domain","page":"Meshing","title":"GradientRobustMultiPhysics.reference_domain","text":"    reference_domain(EG::Type{<:AbstractElementGeometry}, T::Type{<:Real} = Float64; scale = [1,1,1], shift = [0,0,0]) -> ExtendableGrid{T,Int32}\n\nGenerates an ExtendableGrid{T,Int32} for the reference domain of the specified Element Geometry. With scale and shift the coordinates can be manipulated.\n\n\n\n\n\n","category":"function"},{"location":"meshing/#Recognized-Geometries-and-Reference-Domains","page":"Meshing","title":"Recognized Geometries and Reference Domains","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"The following list contains all recognized subtypes of ExtendableGrids.AbstractElementGeometries and their reference domains. Moreover, each geometry has a number of rules that define the geometries and the local enumeration of its nodes, faces and edges, see source code of shape_specs.jl for details","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Edge1D-:-AbstractElementGeometry1D","page":"Meshing","title":"Edge1D <: AbstractElementGeometry1D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[1]-----[2]               [1] = [0]\n                          [2] = [1]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Triangle2D","page":"Meshing","title":"Triangle2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[3]                 \n | \\   \n |   \\                    [1] = [0,0]\n |     \\                  [2] = [1,0]\n |       \\                [3] = [0,1]\n |         \\ \n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelogram2D-:-Quadrilateral2D","page":"Meshing","title":"Parallelogram2D <: Quadrilateral2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]--------[3]               \n |          |             [1] = [0,0]\n |          |             [2] = [1,0]\n |          |             [3] = [1,1]\n |          |             [4] = [0,1]\n[1]--------[2]\n\nNote: most finite elements only work as intended on Parallelogram2D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Tetrahedron3D","page":"Meshing","title":"Tetrahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]                 \n |\\\\   \n | \\ \\                    [1] = [0,0,0]\n |  \\  \\                  [2] = [1,0,0]\n |   \\   \\                [3] = [0,1,0]\n | _-[3]-_ \\              [4] = [0,0,1]\n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelepiped3D-:-Hexahedron3D","page":"Meshing","title":"Parallelepiped3D <: Hexahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"    [8]--------[7]        [1] = [0,0,0]\n   / |        / |         [2] = [1,0,0]\n[5]--------[6]  |         [3] = [1,1,0]\n |   |      |   |         [4] = [0,1,0]\n |   |      |   |         [5] = [0,0,1]\n |  [4]-----|--[3]        [6] = [1,0,1]\n | /        | /           [7] = [1,1,1]\n[1]--------[2]            [8] = [0,1,1]\n\nNote: most finite elements only work as intended on Parallelepiped3D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"export/#Data-Export","page":"Data Export","title":"Data Export","text":"","category":"section"},{"location":"export/","page":"Data Export","title":"Data Export","text":"Data export is possible into VTK (based on WriteVTK.jl) or CSV files.","category":"page"},{"location":"export/","page":"Data Export","title":"Data Export","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dataexport.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"export/#GradientRobustMultiPhysics.writeCSV!-Tuple{String, Vector{var\"#s2481\"} where var\"#s2481\"<:FEVectorBlock}","page":"Data Export","title":"GradientRobustMultiPhysics.writeCSV!","text":"writeCSV!(filename::String, Data::Vector{var\"#s2481\"} where var\"#s2481\"<:FEVectorBlock; operators, names, seperator)\n\n\nWrites the specified FEVectorBlocks into a CSV datafile with the given filename. First d colomuns are the grid coordinates, the remaining columns are filled with the evaluations of the operators where operator[j] is applied to Data[j].\n\n\n\n\n\n","category":"method"},{"location":"export/#GradientRobustMultiPhysics.writeVTK!-Tuple{String, Vector{var\"#s2483\"} where var\"#s2483\"<:FEVectorBlock}","page":"Data Export","title":"GradientRobustMultiPhysics.writeVTK!","text":"writeVTK!(filename::String, Data::Vector{var\"#s2483\"} where var\"#s2483\"<:FEVectorBlock; operators, names, vectorabs, add_regions, caplength)\n\n\nWrites the specified FEVector into a vtk datafile with the given filename. Each FEVectorBlock in the Data array is saved as separate VTKPointData. Vector-valued quantities also generate a data field that represents the absolute value of the vector field at each grid point (if vectorabs is true).\n\n\n\n\n\n","category":"method"},{"location":"examples/Example230_StokesHdivDG2D/#:-Stokes-Hdiv-DG-2D","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"","category":"section"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"(source code)","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"beginaligned\n- mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"with exterior force mathbff and some μ parameter mu and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"The problem will be solved by a dicontinuous Galerkin method with Hdiv-conforming ansatz space (e.g. BDM1). The normal components of the velocity are fixed by the boundary data, while the tangential boundary fluxes are handled by the DG discretisation of the Laplacian that involves several discontinuous terms on faces mathcalF, i.e.","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"beginaligned\na_h(u_hv_h) = mu Bigl( int nabla_h u_h  nabla_h v_h dx +  sum_F in mathcalF fraclambdah_F int_F u_h cdot v_h ds - int_F nabla_h u_h n_F cdot v_h ds\n - int_F u_h cdot nabla_h v_h n_F ds Bigr)\nendaligned","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"and similar terms on the right-hand side for the inhomogeneous Dirichlet data. The qunatity λ is the SIP parameter.","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"module Example230_StokesHdivDG2D\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# functions that define the exact solution and the data\n    function exact_pressure!(result,x::Array{<:Real,1},t::Real)\n        result[1] = cos(t)*(sin(x[1])*cos(x[2]) + (cos(1) -1)*sin(1))\n    end\n    function u!(result,x::Array{<:Real,1},t::Real)\n        result[1] = cos(t)*(sin(π*x[1]-0.7)*sin(π*x[2]+0.2))\n        result[2] = cos(t)*(cos(π*x[1]-0.7)*cos(π*x[2]+0.2))\n    end\n    function exact_velogradient!(result,x::Array{<:Real,1},t::Real)\n        result[1] = π*cos(t)*(cos(π*x[1]-0.7)*sin(π*x[2]+0.2))\n        result[2] = π*cos(t)*(sin(π*x[1]-0.7)*cos(π*x[2]+0.2))\n        result[3] = -π*cos(t)*(sin(π*x[1]-0.7)*cos(π*x[2]+0.2))\n        result[4] = -π*cos(t)*(cos(π*x[1]-0.7)*sin(π*x[2]+0.2))\n    end\n    function rhs(μ)\n        function closure!(result,x::Array{<:Real,1},t::Real)\n            # exact Laplacian\n            result[1] = 2*π*π*μ*cos(t)*(sin(π*x[1]-0.7)*sin(π*x[2]+0.2))\n            result[2] = 2*π*π*μ*cos(t)*(cos(π*x[1]-0.7)*cos(π*x[2]+0.2))\n            # exact pressure gradient\n            result[1] += cos(t)*cos(x[1])*cos(x[2])\n            result[2] -= cos(t)*sin(x[1])*sin(x[2])\n        end\n    end\n\n# everything is wrapped in a main function\nfunction main(;μ = 1e-3, nlevels = 5, Plotter = nothing, verbosity = 0, T = 1, λ = 4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # FEType (Hdiv-conforming)\n    FETypes = [HDIVBDM1{2}, H1P0{1}]\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D)\n    xBFaces::Array{Int,1} = xgrid[BFaces]\n    xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n    xFaceNormals::Array{Float64,2} = xgrid[FaceNormals]\n\n    # load exact flow data\n    u = DataFunction(u!, [2,2]; dependencies = \"XT\", name = \"u\", quadorder = 5)\n    p = DataFunction(exact_pressure!, [1,2]; dependencies = \"XT\", name = \"p\", quadorder = 4)\n    ∇u = DataFunction(exact_velogradient!, [4,2]; dependencies = \"XT\", name = \"∇u\", quadorder = 4)\n    f = DataFunction(rhs(μ), [2,2]; dependencies = \"XT\", name = \"f\", quadorder = 5)\n\n    # prepare error calculation\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, u, Identity; time = T)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, p, Identity; time = T)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, ∇u, Gradient; time = T)\n\n    # load Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = false)\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [1], f))\n\n    # add boundary data (fixes normal components of along boundary)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n\n    # define additional operators for DG terms for Laplacian and Dirichlet data\n    # (in order of their appearance in the documentation above)\n    function hdiv_laplace2_kernel(result, input, item)\n        result .= input / xFaceVolumes[item]\n        return nothing\n    end\n    function hdiv_laplace3_kernel(result, input, item)\n        result[1] = input[1] * xFaceNormals[1,item]\n        result[2] = input[1] * xFaceNormals[2,item]\n        result[3] = input[2] * xFaceNormals[1,item]\n        result[4] = input[2] * xFaceNormals[2,item]\n        return nothing\n    end\n    function hdiv_laplace4_kernel(result, input, item)\n        result[1] = input[1] * xFaceNormals[1,item] + input[2] * xFaceNormals[2,item]\n        result[2] = input[3] * xFaceNormals[1,item] + input[4] * xFaceNormals[2,item]\n        return nothing\n    end\n    HdivLaplace2 = AbstractBilinearForm([Jump(Identity), Jump(Identity)], Action(Float64, hdiv_laplace2_kernel, [2,2]; dependencies = \"I\", quadorder = 0); name = \"μ/h_F [u] [v]\", factor = λ*μ, AT = ON_FACES)\n    HdivLaplace3 = AbstractBilinearForm([Jump(Identity), Average(Gradient)], Action(Float64, hdiv_laplace3_kernel, [4,2]; dependencies = \"I\", quadorder = 0); name = \"-μ [u] {grad(v)*n}\", factor = -μ, AT = ON_FACES)\n    HdivLaplace4 = AbstractBilinearForm([Average(Gradient), Jump(Identity)], Action(Float64, hdiv_laplace4_kernel, [2,4]; dependencies = \"I\", quadorder = 0); name = \"-μ {grad(u)*n} [v] \", factor = -μ, AT = ON_FACES)\n\n    # additional terms for tangential part at boundary\n    # note: we use average operators here to force evaluation of all basis functions and not only of the face basis functions\n    # (which in case of Hdiv would be only the ones with nonzero normal fluxes)\n    veloeval = zeros(Float64,2)\n    function hdiv_boundary_kernel(result, input, x, t, item)\n        eval!(veloeval, u, x, t)\n        result[1] = (input[1] * veloeval[1] + input[2] * veloeval[2]) / xFaceVolumes[xBFaces[item]]\n        return nothing\n    end\n    function hdiv_boundary_kernel2(result, input, x, t, item)\n        eval!(veloeval, u, x, t)\n        result[1] = (input[1] * xFaceNormals[1,xBFaces[item]] + input[2] * xFaceNormals[2,xBFaces[item]]) * veloeval[1]\n        result[1] += (input[3] * xFaceNormals[1,xBFaces[item]] + input[4] * xFaceNormals[2,xBFaces[item]]) * veloeval[2]\n        return nothing\n    end\n    HdivBoundary1 = RhsOperator(Average(Identity), Action(Float64, hdiv_boundary_kernel, [1,2]; dependencies = \"XTI\", quadorder = u.quadorder); name = \"- μ λ/h_F u_D v\", factor = λ*μ, AT = ON_BFACES)\n    HdivBoundary2 = RhsOperator(Average(Gradient), Action(Float64, hdiv_boundary_kernel2, [1,4]; dependencies = \"XTI\", quadorder = u.quadorder); name = \"- μ u_D grad(v)*n\", factor = -μ, AT = ON_BFACES)\n\n    # assign DG operators to problem descriptions\n    add_operator!(Problem, [1,1], HdivLaplace2)\n    add_operator!(Problem, [1,1], HdivLaplace3)\n    add_operator!(Problem, [1,1], HdivLaplace4)\n    add_rhsdata!(Problem, 1, HdivBoundary1)\n    add_rhsdata!(Problem, 1, HdivBoundary2)\n\n    # show final problem description\n    @show Problem\n\n    # loop over levels\n    Results = zeros(Float64,nlevels,3); NDofs = zeros(Int,nlevels)\n    for level = 1 : nlevels\n\n        # refine grid and update grid component references\n        xgrid = uniform_refine(xgrid)\n        xBFaces = xgrid[BFaces]\n        xFaceVolumes = xgrid[FaceVolumes]\n        xFaceNormals = xgrid[FaceNormals]\n\n        # generate FES spaces and solution vector\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid)]\n        Solution = FEVector{Float64}([\"u_h\", \"p_h\"],FES)\n\n        # solve\n        solve!(Solution, Problem; time = T)\n\n        # plot\n        GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1], Solution[2]], [IdentityComponent{1}, IdentityComponent{2}, Identity]; Plotter = Plotter)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2PressureErrorEvaluator,Solution[2]))\n        Results[level,3] = sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1]))\n    end\n\n    # print/show convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_h) ||\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_h) ||\"])\nend\nend","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"Default output:","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"julia> Example230_StokesHdivDG2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = incompressible Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | μ/h_F [u] [v] (APT = BilinearForm, AT = ON_FACES, regions = [0])\n            | -μ [u] {grad(v)*n} (APT = BilinearForm, AT = ON_FACES, regions = [0])\n            | -μ {grad(u)*n} [v]  (APT = BilinearForm, AT = ON_FACES, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | f⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [1])\n            | - μ λ/h_F u_D v (APT = LinearForm, AT = ON_BFACES, regions = [0])\n            | - μ u_D grad(v)*n (APT = LinearForm, AT = ON_BFACES, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \n\n    ndofs   |    || u - u_h ||     order  |    || p - p_h ||     order  |  || ∇(u - u_h) ||    order  |\n============|=============================|=============================|=============================|\n        72  |     1.02863e-01      0.000  |     3.49020e-02      0.000  |     1.49484e+00      0.000  |\n       272  |     1.11840e-02      3.339  |     1.74718e-02      1.041  |     3.90996e-01      2.018  |\n      1056  |     2.73673e-03      2.076  |     8.74172e-03      1.021  |     1.93586e-01      1.036  |\n      4160  |     6.80881e-04      2.029  |     4.37158e-03      1.011  |     9.61205e-02      1.021  |\n     16512  |     1.71156e-04      2.003  |     2.18588e-03      1.006  |     4.80277e-02      1.007  |","category":"page"},{"location":"examples/Example230_StokesHdivDG2D/","page":"230 : Stokes Hdiv-DG 2D","title":"230 : Stokes Hdiv-DG 2D","text":"(Image: ) (Image: )","category":"page"},{"location":"interpolations/#Finite-Element-Interpolations","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"","category":"section"},{"location":"interpolations/#Standard-interpolations","page":"Finite Element Interpolations","title":"Standard interpolations","text":"","category":"section"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"Each finite element has its standard interpolator that can be applied to some user-defined DataFunction. Instead of interpolating on the full cells, the interpolation can be restricted to faces or edges, by specifying an Assembly Type in the call. ","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"It is also possible to interpolate finite element functions on one grid onto a finite element function on another grid (experimental feature, does not work for all finite elements yet and shall be extended to interpolations of operator evaluations as well in future).","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"interpolate!","category":"page"},{"location":"interpolations/#GradientRobustMultiPhysics.interpolate!","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.interpolate!","text":"function interpolate!(Target::FEVectorBlock,\n     AT::Type{<:AbstractAssemblyType},\n     source_data::UserData{AbstractDataFunction};\n     items = [],\n     time = 0)\n\nInterpolates the given sourcedata into the finite elements space assigned to the Target FEVectorBlock with the specified AbstractAssemblyType (usualy ONCELLS). The optional time argument is only used if the source_data depends on time.\n\n\n\n\n\nfunction interpolate!(Target::FEVectorBlock,\n     source_data::UserData{AbstractDataFunction};\n     items = [],\n     time = 0)\n\nInterpolates the given sourcedata into the finite element space assigned to the Target FEVectorBlock. The optional time argument is only used if the sourcedata depends on time.\n\n\n\n\n\nfunction interpolate!(Target::FEVectorBlock,\n     source_data::FEVectorBlock;\n     items = [])\n\nInterpolates the given finite element function into the finite element space assigned to the Target FEVectorBlock.  (Currently not the most efficient way as it is based on the PointEvaluation pattern and cell search.)\n\n\n\n\n\n","category":"function"},{"location":"interpolations/#Nodal-evaluations","page":"Finite Element Interpolations","title":"Nodal evaluations","text":"","category":"section"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"Usually, Plotters need nodal values, so there is a gengeric function that evaluates any finite element function at the nodes of the grids (possibly by averaging if discontinuous).","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"nodevalues!","category":"page"},{"location":"interpolations/#GradientRobustMultiPhysics.nodevalues!","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.nodevalues!","text":"function nodevalues!(\n    Target::AbstractArray{<:Real,2},\n    Source::FEVectorBlock,\n    operator::Type{<:AbstractFunctionOperator} = Identity;\n    regions::Array{Int,1} = [0],\n    target_offset::Int = 0,   # start to write into Target after offset\n    zero_target::Bool = true, # target vector is zeroed\n    continuous::Bool = false)\n\nEvaluates the finite element function with the coefficient vector Source and the specified FunctionOperator at all the nodes of the (specified regions of the) grid and writes the values into Target. Discontinuous (continuous = false) quantities are averaged.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/#:-Lagrange-Multiplier-on-Faces","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"","category":"section"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"(source code)","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"This code demonstrates the novel feature of finite element spaces on faces by providing AT = ON_FACES in the finite element space constructor. It is used here to solve a bestapproximation into an Hdiv-conforming space by using a broken Hdiv space and setting the normal jumps on interior faces to zero by using a Lagrange multiplier on the faces of the grid (a broken H1-conforming space). Then the solution is compared to the solution of the same problem using the continuous Hdiv-conforming space.","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"module Example209_FaceLagrangeMultiplier2D\n\nusing GradientRobustMultiPhysics\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[2]\n    result[2] = x[2] + 1\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),3)\n\n    # define bestapproximation problem\n    user_function = DataFunction(exact_function!, [2,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    Problem = L2BestapproximationProblem(user_function; name = \"constrained L2-bestapproximation problem\", bestapprox_boundary_regions = [])\n\n    # we want to use a broken space and give the constraint of no normal jumps on interior faces\n    # in form of a Lagrange multiplier, since there is no NormalFluxDisc{Jump} operator yet,\n    # we have to use the full identity and multiply the normal vector in an action\n    add_unknown!(Problem; unknown_name = \"LM face jumps\", equation_name = \"face jump constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(NormalFluxDisc{Jump}; AT = ON_IFACES))\n    # the diagonal operator sets the Lagrange multiplier on all face boundary regions to zero\n    add_operator!(Problem, [2,2], DiagonalOperator(\"Diag(1)\", 1.0, true, [1,2,3,4]))\n\n    # choose some (inf-sup stable) finite element types\n    # first space is the Hdiv element\n    # second will be used for the Lagrange multiplier space on faces\n    FEType = [HDIVRT1{2}, H1P1{1}]\n    FES = [FESpace{FEType[1]}(xgrid; broken = true),FESpace{FEType[2], ON_FACES}(xgrid; broken = true)]\n\n    # solve\n    Solution = FEVector{Float64}([\"u_h (Hdiv-broken)\", \"LM face jumps\"],FES)\n    solve!(Solution, Problem)\n\n    # solve again with Hdiv-continuous element\n    # to see that we get the same result\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [])\n    FES = FESpace{FEType[1]}(xgrid)\n\n    # solve\n    Solution2 = FEVector{Float64}(\"u_h (Hdiv-cont.)\",FES)\n    solve!(Solution2, Problem)\n\n    # calculate L2 error of both solutions and their difference\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    L2DiffEvaluator = L2DifferenceIntegrator(Float64, 2, Identity)\n    println(\"\\tL2error(Hdiv-broken) = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"\\tL2error(Hdiv-cont.) = $(sqrt(evaluate(L2ErrorEvaluator,Solution2[1])))\")\n    println(\"\\tL2error(difference) = $(sqrt(evaluate(L2DiffEvaluator,[Solution[1], Solution2[1]])))\")\n\n    # plot both solutions\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution2[1]], [Identity, Identity]; Plotter = Plotter)\nend\n\nend","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"Default output:","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"julia> Example209_FaceLagrangeMultiplier2D.main()\n\tL2error(Hdiv-broken) = 0.0004715248381994763\n\tL2error(Hdiv-cont.) = 0.00047152483819947594\n\tL2error(difference) = 5.610414426352323e-16","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"(Image: )","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/#A07-:-Interpolation-Between-Meshes","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"","category":"section"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"(source code)","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"This example demonstrates the interpolation between meshes feature. Here, we interpolate a function withe the P2 element of a coarse triangulation and then interpolate this P2 function on two uniform refinements into some P1 function. Then, both finite element functions are plotted.","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"module ExampleA07_InterpolationBetweenMeshes\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# function to interpolate\nfunction data!(ν)\n    function closure(result,x::Array{<:Real,1})\n        result[1] = sin(2*pi*x[1])*sin(2*pi*x[2]);\n        result[2] = cos(2*pi*x[1])*cos(2*pi*x[2]);\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; ν = 1e-3, nrefinements = 4, verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate two grids\n    xgrid1 = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n    xgrid2 = uniform_refine(xgrid1,2; store_parents = true)\n\n    # negotiate data\n    u = DataFunction(data!(ν), [2,2]; name = \"u\", dependencies = \"X\", quadorder = 6)\n\n    # set finite element types for the two grids\n    FEType1 = H1P2{2,2}\n    FEType2 = H1P1{2}\n\n    # generate coressponding finite element spaces and FEVectors\n    FES1 = FESpace{FEType1}(xgrid1)\n    FES2 = FESpace{FEType2}(xgrid2)\n    FEFunction1 = FEVector{Float64}(\"$FEType1 on grid 1\",FES1)\n    FEFunction2 = FEVector{Float64}(\"$FEType2 on grid 2\",FES2)\n\n    # interpolate function onto first grid\n    interpolate!(FEFunction1[1], u)\n\n    # interpolate onto other grids\n    @time interpolate!(FEFunction2[1], FEFunction1[1])\n    @time interpolate!(FEFunction2[1], FEFunction1[1], use_cellparents = true)\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid1, [FEFunction1[1], FEFunction2[1]], [Identity, Identity]; Plotter = Plotter)\nend\n\nend","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"Default output:","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"julia> ExampleA07_InterpolationBetweenMeshes.main()\n  1.031056 seconds (1.07 M allocations: 59.768 MiB, 2.57% gc time, 15.73% compilation time)\n  0.491483 seconds (692.45 k allocations: 32.355 MiB, 96.79% compilation time)","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"(Image: )","category":"page"},{"location":"examples/Example301_Poisson3D/#:-Poisson-Problem-3D","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"","category":"section"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"(source code)","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"This example computes the solution u of the three dimensional Poisson problem","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"beginaligned\n-Delta u  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"with some right-hand side f on the unit cube domain Omega on a series of uniform refined meshes (tetrahedra or parallelepipeds).","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"module Example301_Poisson3D\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]*(x[3] - x[2]) + x[2]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[3] - x[2]\n    result[2] = - x[1] + 2*x[2]\n    result[3] = x[1]\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, nlevels = 4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    # (replace Parallelepiped3D by Tetrahedron3D to change the cell geometries)\n    xgrid = grid_unitcube(Tetrahedron3D)\n\n    # set finite element type used for discretisation\n    FEType = H1P1{1}\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,3]; name = \"u\", dependencies = \"X\", quadorder = 2)\n    user_function_gradient = DataFunction(exact_gradient!, [3,3]; name = \"∇(u)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction([-2]; name = \"f\")\n\n    # create Poisson problem via prototype and add data\n    Problem = PoissonProblem(1.0)\n    add_boundarydata!(Problem, 1, [1,2,3,4,5,6], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs))\n\n    # prepare error calculation\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    Results = zeros(Float64, nlevels, 2); NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # create finite element space and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # solve the problem\n        solve!(Solution, Problem)\n\n        # calculate L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,Solution[1]))\n    end\n\n    # plot (Plotter = GLMakie should work)\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1]], [Identity]; Plotter = Plotter)\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/3), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/3), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\nend\n\nend","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"Default output:","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"julia> Example301_Poisson3D.main()\n\n    ndofs   |    || u - u_h ||     order  |  || ∇(u - u_h) ||    order  |\n============|=============================|=============================|\n        27  |     3.38581e-02      0.000  |     4.38269e-01      0.000  |\n       125  |     8.97264e-03      2.600  |     2.25880e-01      1.298  |\n       729  |     2.28139e-03      2.330  |     1.13818e-01      1.166  |\n      4913  |     5.73658e-04      2.171  |     5.70179e-02      1.087  |","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/#:-Reaction-Convection-Diffusion-Problem-2D","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"","category":"section"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"This example computes the solution of some convection-diffusion problem","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"-nu Delta u + mathbfbeta cdot nabla u + alpha u = f quad textin  Omega","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"with some diffusion coefficient  nu, some vector-valued function  mathbfbeta, some scalar-valued function alpha and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"We prescribe an analytic solution with mathbfbeta = (10) and alpha = 01 and check the L2 and H1 error convergence of the method on a series of uniformly refined meshes. We also compare with the error of a simple nodal interpolation and plot the solution and the norm of its gradient.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"For small nu, the convection term dominates and pollutes the accuracy of the method. For demonstration some simple gradient jump (interior penalty) stabilisation is added to improve things.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"module Example203_ReactionConvectionDiffusion2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# coefficient functions\nconst β = DataFunction([1,0]; name = \"β\")\nconst α = DataFunction([0.01]; name = \"α\")\n\n# problem data and expected exact solution\nfunction exact_solution!(result,x::Array{<:Real,1})\n    result[1] = x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1]\nend\nfunction exact_solution_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[2]*(2*x[1]-1)*(x[2]-1) + 1\n    result[2] = x[1]*(2*x[2]-1)*(x[1]-1)\nend\nfunction exact_solution_rhs!(ν)\n    eval_alpha = zeros(Float64,1)\n    eval_beta = zeros(Float64,2)\n    function closure(result,x::Array{<:Real,1})\n        # diffusion part\n        result[1] = -ν*(2*x[2]*(x[2]-1) + 2*x[1]*(x[1]-1))\n        # convection part (beta * grad(u))\n        eval!(eval_beta, β, x, 0)\n        result[1] += eval_beta[1] * (x[2]*(2*x[1]-1)*(x[2]-1) + 1)\n        result[1] += eval_beta[2] * (x[1]*(2*x[2]-1)*(x[1]-1))\n        # reaction part (alpha*u)\n        eval!(eval_alpha, α, x, 0)\n        result[1] += eval_alpha[1] * (x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1])\n        return nothing\n    end\nend\n\n# custom bilinearform that can assemble the full PDE operator\nfunction ReactionConvectionDiffusionOperator(α, β, ν)\n    eval_alpha = zeros(Float64,1)\n    eval_beta = zeros(Float64,2)\n    function action_kernel!(result, input,x)\n        # input = [u,∇u] as a vector of length 3\n        eval!(eval_beta, β, x, 0)\n        eval!(eval_alpha, α, x, 0)\n        result[1] = eval_alpha[1] * input[1] + eval_beta[1] * input[2] + eval_beta[2] * input[3]\n        result[2] = ν * input[2]\n        result[3] = ν * input[3]\n        # result will be multiplied with [v,∇v]\n        return nothing\n    end\n    action = Action(Float64, ActionKernel(action_kernel!, [3,3]; dependencies = \"X\", quadorder = max(α.quadorder,β.quadorder)))\n    return AbstractBilinearForm([OperatorPair{Identity,Gradient},OperatorPair{Identity,Gradient}], action; name = \"ν(∇u,∇v) + (αu + β⋅∇u, v)\", transposed_assembly = true)\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, ν = 1e-5, τ = 2e-2, nlevels = 5)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load a mesh of the unit square (this one has triangles and quads in it)\n    # it also has four boundary regions (1 = bottom, 2 = right, 3 = top, 4 = left)\n    xgrid = grid_unitsquare_mixedgeometries(); # initial grid\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_solution!, [1,2]; name = \"u\", dependencies = \"X\", quadorder = 4)\n    ∇u = DataFunction(exact_solution_gradient!, [2,2]; name = \"∇(u)\", dependencies = \"X\", quadorder = 3)\n    f = DataFunction(exact_solution_rhs!(ν), [1,2]; name = \"f\", dependencies = \"X\", quadorder = 3)\n\n    # choose a finite element type, here we choose a second order H1-conforming one\n    FEType = H1P2{1,2}\n\n    # create PDE description\n    Problem = PDEDescription(\"reaction-convection-diffusion problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"reaction-convection-diffusion equation\")\n    add_operator!(Problem, [1,1], ReactionConvectionDiffusionOperator(α,β,ν))\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [0], f))\n\n    # add boundary data to unknown 1 (there is only one in this example)\n    # on boundary regions where the solution is linear the data only needs to be interpolated\n    # on boundary regions where the solution is zero homoegeneous boundary conditions can be used\n    add_boundarydata!(Problem, 1, [1,3], BestapproxDirichletBoundary; data = u)\n    add_boundarydata!(Problem, 1, [2], InterpolateDirichletBoundary; data = u)\n    add_boundarydata!(Problem, 1, [4], HomogeneousDirichletBoundary)\n\n    # add a gradient jump (interior penalty) stabilisation for dominant convection\n    if τ > 0\n        # first we define an item-dependent action kernel...\n        xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n        stab_action = Action(Float64,(result,input,item) -> (result .= input .* xFaceVolumes[item]^2), [2,2]; name = \"stabilisation action\", dependencies = \"I\", quadorder = 0 )\n        JumpStabilisation = AbstractBilinearForm([Jump(Gradient), Jump(Gradient)], stab_action; AT = ON_IFACES, factor = τ, name = \"τ |F|^2 [∇(u)]⋅[∇(v)]\")\n        add_operator!(Problem, [1,1], JumpStabilisation)\n    end\n\n    # finally we have a look at the defined problem\n    @show Problem\n\n    # define ItemIntegrators for L2/H1 error computation and some arrays to store the errors\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, u, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, ∇u, Gradient)\n    Results = zeros(Float64,nlevels,4); NDofs = zeros(Int,nlevels)\n\n    # refinement loop over levels\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n        xFaceVolumes = xgrid[FaceVolumes] # update xFaceVolumes used in stabilisation definition\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # solve PDE\n        solve!(Solution, Problem)\n\n        # interpolate (just for comparison)\n        Interpolation = FEVector{Float64}(\"I(u)\",FES)\n        interpolate!(Interpolation[1], u)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2ErrorEvaluator,Interpolation[1]))\n        Results[level,3] = sqrt(evaluate(H1ErrorEvaluator,Solution[1]))\n        Results[level,4] = sqrt(evaluate(H1ErrorEvaluator,Interpolation[1]))\n\n        # plot\n        GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\n    end\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [2,3], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\nend\n\nend","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"julia> Example203_ReactionConvectionDiffusion2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = reaction-convection-diffusion problem\n\n     id   | unknown name / equation name\n    [1]   | u / reaction-convection-diffusion equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ν(∇u,∇v) + (αu + β⋅∇u, v) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n            | τ |F|^2 [∇(u)]⋅[∇(v)] (APT = BilinearForm, AT = ON_IFACES, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | f⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 3]\n                         InterpolateDirichletBoundary -> [2]\n                         HomogeneousDirichletBoundary -> [4]\n                          \n\nProblem = \n\n    ndofs   |    || u - u_h ||     order  |    || u - Iu ||      order  |  || ∇(u - u_h) ||    order  |   || ∇(u - Iu) ||    order  |\n============|=============================|=============================|=============================|=============================|\n        73  |     5.05471e-04      0.000  |     2.63439e-04      0.000  |     9.78641e-03      0.000  |     7.64421e-03      0.000  |\n       257  |     5.66665e-05      3.477  |     2.78520e-05      3.570  |     2.25306e-03      2.334  |     1.84899e-03      2.255  |\n       961  |     6.47050e-06      3.291  |     3.30383e-06      3.233  |     5.29764e-04      2.195  |     4.58288e-04      2.115  |\n      3713  |     7.71394e-07      3.147  |     4.07237e-07      3.098  |     1.27586e-04      2.107  |     1.14323e-04      2.055  |\n     14593  |     9.42281e-08      3.072  |     5.07235e-08      3.044  |     3.12886e-05      2.054  |     2.85652e-05      2.027  |","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/Example206_PressureRobustness2D/#:-Pressure-robustness-2D","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"","category":"section"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"(source code)","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"This example studies two benchmarks for pressure-robust discretisations of the stationary     Navier-Stokes equations that seek a velocity mathbfu and pressure mathbfp such that","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"with (possibly time-dependent) exterior force mathbff and some viscosity parameter mu.","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"Pressure-robustness is concerned with gradient forces that may appear in the right-hand side or the material derivative and should be balanced by the pressure (as divergence-free vector fields are orthogonal on gradient fields). Here, two test problems are considered:","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"HydrostaticTestProblem() : Stokes (without convection term) and mathbff = nabla p such that  mathbfu = 0\nPotentialFlowTestProblem() : Navier-Stokes with mathbff = 0 and mathbfu = nabla h for some harmonic function","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"In both test problems the errors of non-pressure-robust discretisations scale with  1mu, while the pressure-robust discretisation solves mathbfu = 0 exactly in test problem 1 and gives much better results in test problem 2.","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"module Example206_PressureRobustness2D\n\nusing GradientRobustMultiPhysics\n\n# problem data\nfunction HydrostaticTestProblem()\n    # Stokes problem with f = grad(p)\n    # u = 0\n    # p = x^3+y^3 - 1//2\n    function P1_pressure!(result,x::Array{<:Real,1})\n        result[1] = x[1]^3 + x[2]^3 - 1//2\n    end\n    function P1_rhs!(result,x::Array{<:Real,1})\n        result[1] = 3*x[1]^2\n        result[2] = 3*x[2]^2\n    end\n    user_function_velocity = DataFunction([0,0]; name = \"u_exact\")\n    user_function_pressure = DataFunction(P1_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_velocity_gradient = DataFunction([0,0,0,0]; name = \"grad(u_exact)\")\n    user_function_rhs = DataFunction(P1_rhs!, [2,2]; name = \"f\", dependencies = \"X\", quadorder = 2)\n\n    return user_function_pressure,user_function_velocity,user_function_velocity_gradient,user_function_rhs, false\nend\n\nfunction PotentialFlowTestProblem()\n    # NavierStokes with f = 0\n    # u = grad(h) with h = x^3 - 3xy^2\n    # p = - |grad(h)|^2 + 14//5\n    function P2_pressure!(result,x::Array{<:Real,1})\n        result[1] = - 1//2 * (9*(x[1]^4 + x[2]^4) + 18*x[1]^2*x[2]^2) + 14//5\n    end\n    function P2_velo!(result,x::Array{<:Real,1})\n        result[1] = 3*x[1]^2 - 3*x[2]^2;\n        result[2] = -6*x[1]*x[2];\n    end\n    function P2_velogradient!(result,x::Array{<:Real,1})\n        result[1] = 6*x[1]\n        result[2] = -6*x[2];\n        result[3] = -6*x[2];\n        result[4] = -6*x[1];\n    end\n    user_function_velocity = DataFunction(P2_velo!, [2,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_pressure = DataFunction(P2_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 4)\n    user_function_velocity_gradient = DataFunction(P2_velogradient!, [4,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction([0,0]; name = \"f\")\n\n    return user_function_pressure,user_function_velocity,user_function_velocity_gradient,user_function_rhs, true\nend\n\n\nfunction solve(Problem, xgrid, FETypes, viscosity = 1e-2; nlevels = 4, print_results = true, verbosity = 1, target_residual = 1e-10, maxiterations = 20, Plotter = nothing)\n\n    # load problem data and set solver parameters\n    ReconstructionOperator = FETypes[3]\n    exact_pressure!, exact_velocity!, exact_velocity_gradient!, rhs!, nonlinear = Problem()\n\n    # setup classical (Problem) and pressure-robust scheme (Problem2)\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = exact_velocity!)\n    Problem2 = deepcopy(Problem)\n    Problem.name = \"Stokes problem (classical)\"\n    Problem2.name = \"Stokes problem (p-robust)\"\n\n    # assign right-hand side\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [0], rhs!))\n    add_rhsdata!(Problem2, 1, RhsOperator(ReconstructionOperator, [0], rhs!))\n\n    # assign convection term\n    if nonlinear\n        add_operator!(Problem,[1,1], ConvectionOperator(1, Identity, 2, 2))\n        add_operator!(Problem2,[1,1], ConvectionOperator(1, ReconstructionOperator, 2, 2; testfunction_operator = ReconstructionOperator))\n    end\n\n    # define bestapproximation problems\n    L2VelocityBestapproximationProblem = L2BestapproximationProblem(exact_velocity!; bestapprox_boundary_regions = [1,2,3,4])\n    L2PressureBestapproximationProblem = L2BestapproximationProblem(exact_pressure!; bestapprox_boundary_regions = [])\n    H1VelocityBestapproximationProblem = H1BestapproximationProblem(exact_velocity_gradient!, exact_velocity!; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, exact_velocity!, Identity)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, exact_pressure!, Identity)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, exact_velocity_gradient!, Gradient)\n    Results = zeros(Float64, nlevels, 9)\n    NDofs = zeros(Int, nlevels)\n\n    # loop over refinement levels\n    Solution2 = nothing\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n        xFaceVolumes = xgrid[FaceVolumes]\n\n        # get FESpaces\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n        Solution = FEVector{Float64}([\"u_c (classic)\", \"p_c (classic)\"],FES)\n        Solution2 = FEVector{Float64}([\"u_r (p-robust)\", \"p_r (p-robust)\"],FES)\n\n        # solve both problems\n        solve!(Solution, Problem; maxiterations = maxiterations, target_residual = target_residual, anderson_iterations = 5)\n        solve!(Solution2, Problem2; maxiterations = maxiterations, target_residual = target_residual, anderson_iterations = 5)\n\n        # solve bestapproximation problems\n        L2VelocityBestapproximation = FEVector{Float64}(\"Πu\",FES[1])\n        L2PressureBestapproximation = FEVector{Float64}(\"πp\",FES[2])\n        H1VelocityBestapproximation = FEVector{Float64}(\"Su\",FES[1])\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem)\n        solve!(L2PressureBestapproximation, L2PressureBestapproximationProblem)\n        solve!(H1VelocityBestapproximation, H1VelocityBestapproximationProblem)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2VelocityErrorEvaluator,Solution2[1]))\n        Results[level,3] = sqrt(evaluate(L2VelocityErrorEvaluator,L2VelocityBestapproximation[1]))\n        Results[level,4] = sqrt(evaluate(L2PressureErrorEvaluator,Solution[2]))\n        Results[level,5] = sqrt(evaluate(L2PressureErrorEvaluator,Solution2[2]))\n        Results[level,6] = sqrt(evaluate(L2PressureErrorEvaluator,L2PressureBestapproximation[1]))\n        Results[level,7] = sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1]))\n        Results[level,8] = sqrt(evaluate(H1VelocityErrorEvaluator,Solution2[1]))\n        Results[level,9] = sqrt(evaluate(H1VelocityErrorEvaluator,H1VelocityBestapproximation[1]))\n    end\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results[:,1:3]; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_c||\", \"||u-u_r||\", \"||u-Πu||\"])\n    print_convergencehistory(NDofs, Results[:,4:6]; X_to_h = X -> X.^(-1/2), ylabels = [\"||p-p_c||\", \"||p-p_r||\", \"||p-πp||\"])\n    print_convergencehistory(NDofs, Results[:,7:9]; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_c)||\", \"||∇(u-u_r)||\", \"||∇(u-Su)||\"])\n\n    # plot p-robust solution\n    GradientRobustMultiPhysics.plot(xgrid, [Solution2[1],Solution2[2],Solution2[1]], [Identity, Identity, ReconstructionDivergence{HDIVRT1{2}}]; Plotter = Plotter)\n\n    # return last L2 error of p-robust method for testing\n    return Results[end,2]\nend\n\n\n# everything is wrapped in a main function\nfunction main(; problem = 2, verbosity = 0, nlevels = 4, viscosity = 1e-2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # set problem to solve\n    if problem == 1\n        Problem = HydrostaticTestProblem\n    elseif problem == 2\n        Problem = PotentialFlowTestProblem\n    else\n        @error \"No problem defined for this number!\"\n    end\n\n    # set grid and problem parameters\n    xgrid = grid_unitsquare_mixedgeometries() # initial grid\n\n    # choose finite element discretisation\n    #FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Bernardi--Raugel with RT0 reconstruction\n    FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}] # Bernardi--Raugel with BDM1 reconstruction\n    #FETypes = [H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Crouzeix--Raviart with RT0 reconstruction\n\n    # run\n    solve(Problem, xgrid, FETypes, viscosity; nlevels = nlevels, Plotter = Plotter)\n\n    return nothing\nend\n\n\n# test function that is called by test unit\n# tests if hydrostatic problem is solved exactly by pressure-robust methods\nfunction test(; Plotter = nothing)\n    xgrid = uniform_refine(grid_unitsquare_mixedgeometries())\n    testspaces = [[H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}]\n                  ]\n    error = []\n    for FETypes in testspaces\n        push!(error, solve(HydrostaticTestProblem, xgrid, FETypes, 1; nlevels = 1, print_results = false))\n        println(\"FETypes = $FETypes   error = $(error[end])\")\n    end\n\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D))\n    testspaces = [\n                  [H1P2B{2,2}, H1P1{1}, ReconstructionIdentity{HDIVRT1{2}}]\n                  ]\n    error = []\n    for FETypes in testspaces\n        push!(error, solve(HydrostaticTestProblem, xgrid, FETypes, 1; nlevels = 1, print_results = false, Plotter = Plotter))\n        println(\"FETypes = $FETypes   error = $(error[end])\")\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"Default output:","category":"page"},{"location":"examples/Example206_PressureRobustness2D/","page":"206 : Pressure-robustness 2D","title":"206 : Pressure-robustness 2D","text":"julia> Example206_PressureRobustness2D.main()\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.803338e-16 | 2.895609e+00\n\t      2   | 1.185313e-15 | 1.339936e+00\n\t      3   | 1.080142e-15 | 5.449108e-01\n\t      4   | 1.197313e-15 | 4.187236e-01\n\t      5   | 1.555073e-15 | 3.581365e-01\n\t      6   | 1.209339e-15 | 2.487759e-01\n\t      7   | 1.299352e-15 | 1.126170e-01\n\t      8   | 1.271346e-15 | 1.160680e-01\n\t      9   | 1.044738e-15 | 5.821474e-02\n\t     10   | 1.209787e-15 | 1.677214e-02\n\t     11   | 9.116183e-16 | 1.120038e-02\n\t     12   | 1.120663e-15 | 8.025213e-03\n\t     13   | 1.414360e-15 | 3.535567e-03\n\t     14   | 1.366990e-15 | 4.227218e-03\n\t     15   | 1.048963e-15 | 1.489109e-03\n\t     16   | 1.353795e-15 | 1.173412e-03\n\t     17   | 1.174339e-15 | 3.414371e-04\n\t     18   | 1.026265e-15 | 8.826711e-05\n\t     19   | 1.414301e-15 | 6.230044e-05\n\t     20   | 1.494992e-15 | 8.662361e-06\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.803338e-16 | 3.534926e+00\n\t      2   | 1.107392e-15 | 5.435230e-02\n\t      3   | 1.311089e-15 | 3.054699e-02\n\t      4   | 1.198632e-15 | 3.059500e-02\n\t      5   | 1.179181e-15 | 6.895439e-03\n\t      6   | 1.472604e-15 | 4.410285e-03\n\t      7   | 1.258390e-15 | 1.791402e-03\n\t      8   | 1.172733e-15 | 7.588429e-04\n\t      9   | 1.479462e-15 | 1.307062e-04\n\t     10   | 1.360692e-15 | 2.445028e-05\n\t     11   | 1.254498e-15 | 1.159652e-05\n\t     12   | 1.385479e-15 | 2.445646e-06\n\t     13   | 1.657946e-15 | 1.143082e-06\n\t     14   | 1.737378e-15 | 1.031267e-07\n\t     15   | 1.377914e-15 | 2.687431e-08\n\t     16   | 1.151249e-15 | 9.406191e-09\n\t     17   | 1.404258e-15 | 4.387993e-09\n\t     18   | 8.700015e-16 | 5.760511e-10\n\t     19   | 1.517987e-15 | 1.089018e-10\n\t     20   | 1.495521e-15 | 4.340968e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.063101e-16 | 1.841178e+00\n\t      2   | 1.535906e-15 | 3.185853e-01\n\t      3   | 1.431266e-15 | 6.501545e-02\n\t      4   | 1.478113e-15 | 1.931097e-02\n\t      5   | 1.441727e-15 | 6.847968e-03\n\t      6   | 1.336027e-15 | 6.699510e-03\n\t      7   | 1.447659e-15 | 2.290010e-03\n\t      8   | 1.558108e-15 | 1.178035e-03\n\t      9   | 1.228578e-15 | 2.019969e-04\n\t     10   | 1.229482e-15 | 3.661873e-05\n\t     11   | 1.540121e-15 | 2.226621e-05\n\t     12   | 1.497609e-15 | 4.055847e-06\n\t     13   | 1.506902e-15 | 9.572098e-07\n\t     14   | 1.402816e-15 | 2.268293e-07\n\t     15   | 1.264641e-15 | 8.131273e-08\n\t     16   | 1.385559e-15 | 2.318637e-08\n\t     17   | 1.252579e-15 | 6.883499e-09\n\t     18   | 1.443166e-15 | 1.392542e-09\n\t     19   | 1.420953e-15 | 1.159119e-09\n\t     20   | 1.499867e-15 | 2.472829e-10\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.063101e-16 | 2.190743e+00\n\t      2   | 1.510575e-15 | 4.814096e-03\n\t      3   | 1.332127e-15 | 1.359334e-03\n\t      4   | 1.250690e-15 | 6.018365e-04\n\t      5   | 1.422263e-15 | 3.277272e-04\n\t      6   | 1.372454e-15 | 1.231593e-04\n\t      7   | 1.403098e-15 | 3.396347e-05\n\t      8   | 1.215643e-15 | 1.207964e-05\n\t      9   | 1.569944e-15 | 2.518529e-06\n\t     10   | 2.008555e-15 | 4.715978e-07\n\t     11   | 1.029533e-15 | 5.111220e-08\n\t     12   | 1.383645e-15 | 1.958835e-08\n\t     13   | 1.142459e-15 | 4.776487e-09\n\t     14   | 1.472360e-15 | 2.834607e-09\n\t     15   | 1.478033e-15 | 4.306001e-10\n\t     16   | 1.330400e-15 | 7.896006e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 3.020114e-16 | 1.037693e+00\n\t      2   | 1.371502e-15 | 6.205070e-02\n\t      3   | 1.368093e-15 | 1.370371e-02\n\t      4   | 1.697980e-15 | 2.735524e-03\n\t      5   | 1.516250e-15 | 7.618342e-04\n\t      6   | 1.582869e-15 | 1.733140e-04\n\t      7   | 1.499473e-15 | 5.850901e-05\n\t      8   | 1.498577e-15 | 1.581379e-05\n\t      9   | 1.594843e-15 | 2.639635e-06\n\t     10   | 1.376965e-15 | 6.144868e-07\n\t     11   | 1.499836e-15 | 1.471499e-07\n\t     12   | 1.581627e-15 | 2.695707e-08\n\t     13   | 1.417268e-15 | 7.264071e-09\n\t     14   | 1.464844e-15 | 1.921212e-09\n\t     15   | 1.410843e-15 | 6.053304e-10\n\t     16   | 1.448141e-15 | 1.141196e-10\n\t     17   | 1.481428e-15 | 1.738936e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 3.020114e-16 | 1.217573e+00\n\t      2   | 1.395421e-15 | 5.548380e-04\n\t      3   | 1.480962e-15 | 1.241344e-04\n\t      4   | 1.548030e-15 | 3.784206e-05\n\t      5   | 1.515617e-15 | 1.066551e-05\n\t      6   | 1.755620e-15 | 4.499323e-06\n\t      7   | 1.509628e-15 | 8.200007e-07\n\t      8   | 1.424858e-15 | 1.295708e-07\n\t      9   | 1.525469e-15 | 2.819667e-08\n\t     10   | 1.639298e-15 | 6.869162e-09\n\t     11   | 1.580547e-15 | 1.173502e-09\n\t     12   | 1.757894e-15 | 2.554458e-10\n\t     13   | 1.561850e-15 | 6.348800e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 4.431093e-16 | 5.507688e-01\n\t      2   | 1.577556e-15 | 9.716689e-03\n\t      3   | 1.546914e-15 | 1.789684e-03\n\t      4   | 1.535135e-15 | 3.930624e-04\n\t      5   | 1.509307e-15 | 1.143424e-04\n\t      6   | 1.483776e-15 | 2.400959e-05\n\t      7   | 1.554942e-15 | 8.112497e-06\n\t      8   | 1.581504e-15 | 2.260995e-06\n\t      9   | 1.514386e-15 | 4.274699e-07\n\t     10   | 1.542015e-15 | 7.999490e-08\n\t     11   | 1.526636e-15 | 1.341215e-08\n\t     12   | 1.565950e-15 | 2.840186e-09\n\t     13   | 1.532259e-15 | 7.196124e-10\n\t     14   | 1.526270e-15 | 1.285133e-10\n\t     15   | 1.491547e-15 | 3.873058e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 4.431093e-16 | 6.416617e-01\n\t      2   | 1.679460e-15 | 8.066181e-05\n\t      3   | 1.576428e-15 | 1.612409e-05\n\t      4   | 1.596991e-15 | 4.779746e-06\n\t      5   | 1.574646e-15 | 1.200918e-06\n\t      6   | 1.613286e-15 | 4.125628e-07\n\t      7   | 1.600062e-15 | 9.613403e-08\n\t      8   | 1.650273e-15 | 1.893123e-08\n\t      9   | 1.738183e-15 | 4.361211e-09\n\t     10   | 1.620958e-15 | 8.769816e-10\n\t     11   | 1.583660e-15 | 1.896566e-10\n\t     12   | 1.678531e-15 | 3.998211e-11\n\n\n    ndofs   |      ||u-u_c||       order  |      ||u-u_r||       order  |      ||u-Πu||        order  |\n============|=============================|=============================|=============================|\n       122  |     1.11543e+00      0.000  |     1.18505e-01      0.000  |     2.54921e-02      0.000  |\n       434  |     4.81112e-01      1.325  |     1.22629e-02      3.575  |     5.78066e-03      2.339  |\n      1634  |     1.59473e-01      1.666  |     2.65129e-03      2.310  |     1.35412e-03      2.190  |\n      6338  |     4.62337e-02      1.827  |     6.73737e-04      2.021  |     3.26202e-04      2.100  |\n\n    ndofs   |      ||p-p_c||       order  |      ||p-p_r||       order  |      ||p-πp||        order  |\n============|=============================|=============================|=============================|\n       122  |     1.71119e+00      0.000  |     1.07372e+00      0.000  |     1.07051e+00      0.000  |\n       434  |     7.67359e-01      1.264  |     5.46447e-01      1.065  |     5.46367e-01      1.060  |\n      1634  |     3.50717e-01      1.181  |     2.74613e-01      1.038  |     2.74597e-01      1.038  |\n      6338  |     1.56053e-01      1.195  |     1.37479e-01      1.021  |     1.37476e-01      1.021  |\n\n    ndofs   |    ||∇(u-u_c)||      order  |    ||∇(u-u_r)||      order  |     ||∇(u-Su)||      order  |\n============|=============================|=============================|=============================|\n       122  |     2.01313e+01      0.000  |     1.98681e+00      0.000  |     6.76182e-01      0.000  |\n       434  |     1.34246e+01      0.639  |     4.18114e-01      2.456  |     3.34586e-01      1.109  |\n      1634  |     8.67723e+00      0.658  |     1.76224e-01      1.303  |     1.66341e-01      1.054  |\n      6338  |     4.83987e+00      0.861  |     8.45715e-02      1.083  |     8.29298e-02      1.027  |","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/#:-Flow-around-a-cylinder-2D","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"","category":"section"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"(source code)","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"This example solves the DFG Navier-Stokes benchmark problem","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"on a rectangular 2D domain with a circular obstacle, see here for details.","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"This script demonstrates the employment of external grid generators and the computation of drag and lift coefficients.","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"Note: This example needs the additional packages Triangulate and SimplexGridFactory to generate the mesh.","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"module Example224_FlowAroundCylinder2D\n\nusing GradientRobustMultiPhysics\nusing Triangulate\nusing SimplexGridFactory\nusing ExtendableGrids\n\n# inlet data for Karman vortex street example\n# as in DFG benchmark 2D-1 (Re = 20, laminar)\nconst umax = 0.3\nconst umean = 2//3 * umax\nconst L = 0.1\nconst W = 2.2\nconst H = 0.41\nfunction bnd_inlet!(result,x)\n    result[1] = 4*umax*x[2]*(H-x[2])/(H*H);\n    result[2] = 0.0;\nend\n\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 2, μ = 1e-3, maxvol = 5e-4)\n\n    # load grid (see function below)\n    xgrid = make_grid(W,H; n = Int(ceil(sqrt(1/maxvol))), maxvol = maxvol)\n\n    # Bernardi--Raugel element + reconstruction operator\n    FETypes = [H1BR{2}, H1P0{1}];\n    VeloIdentity = ReconstructionIdentity{HDIVBDM1{2}} # div-free reconstruction operator for Identity\n\n    # PDE description\n    Problem = PDEDescription(\"NSE problem (μ = $μ)\")\n    add_unknown!(Problem; equation_name = \"momentum equation\", unknown_name = \"u\")\n    add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"p\")\n\n    # add operators (Laplacian, Div-LagrangeMultierplier, Convection)\n    add_operator!(Problem, [1,1], LaplaceOperator(μ; store = true))\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n    add_operator!(Problem, [1,1], ConvectionOperator(1, VeloIdentity, 2, 2; testfunction_operator = VeloIdentity, auto_newton = true))\n\n    # add boundary data (bregion 2 is outflow, 4 is inflow, 5 is cylinder)\n    user_function_inflow = DataFunction(bnd_inlet!, [2,2]; name = \"u_inflow\", dependencies = \"X\", quadorder = 2)\n    add_boundarydata!(Problem, 1, [1,3,5], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], BestapproxDirichletBoundary; data = user_function_inflow)\n\n    # inspect problem\n    @show Problem\n\n    # generate FESpaces and Solution vector\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],FES)\n\n    # solve\n    solve!(Solution, Problem; maxiterations = 50, target_residual = 1e-10)\n\n    # postprocess : compute drag/lift (see function below)\n    draglift = get_draglift(Solution, μ)\n    pdiff = get_pressure_difference(Solution)\n    println(\"[drag, lift] = $draglift\")\n    println(\"p difference = $pdiff\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[2]], [Identity, Identity]; add_grid_plot = true, Plotter = Plotter, use_subplots = false, resolution = (800,400))\nend\n\nfunction get_pressure_difference(Solution::FEVector)\n    xgrid = Solution[2].FES.xgrid\n    PE = PointEvaluator{Float64,typeof(Solution[2].FES).parameters[1],Triangle2D,Identity,ON_CELLS}(Solution[2].FES, Solution[2])\n    CF = CellFinder(xgrid, Triangle2D)\n    xref = zeros(Float64,2)\n    p_left = zeros(Float64,1); x1 = [0.15,0.2]\n    p_right = zeros(Float64,1); x2 = [0.25,0.2]\n    cell::Int = gFindLocal!(xref, CF, x1; icellstart = 1)\n    if cell == 0\n        cell = gFindBruteForce!(xref, CF, x1)\n    end\n    evaluate!(p_left,PE,xref,cell)\n    cell = gFindLocal!(xref, CF, x2; icellstart = 1)\n    if cell == 0\n        cell = gFindBruteForce!(xref, CF, x2)\n    end\n    evaluate!(p_right,PE,xref,cell)\n    return p_left - p_right\nend\n\nfunction get_draglift(Solution::FEVector, μ)\n\n    # this function is interpolated for drag/lift test function creation\n    function circle_bnd_testfunction(component)\n        function closure!(result,x)\n            fill!(result,0)\n            if sqrt((x[1] - 0.2)^2 + (x[2] - 0.2)^2) <= 0.06\n                result[component] = 1\n            end\n        end\n    end\n\n    # drag lift calcuation by testfunctions\n    function draglift_kernel(result, input)\n        # input = [ u, grad(u), p , v , grad(v)]\n        #         [1:2,  3:6,   7 ,8:9,  10:13 ]\n        fill!(result,0)\n        result[1] += μ * (input[3]*input[10] + input[4]*input[11] + input[5]*input[12] + input[6]*input[13])\n        result[1] += (input[1] * input[3] + input[2] * input[4]) * input[8]\n        result[1] += (input[1] * input[5] + input[2] * input[6]) * input[9]\n        result[1] -= input[7] * (input[10] + input[13])\n        result[1] *= -(2/(umean^2*L))\n        return nothing\n    end\n    draglift_action = Action(Float64, draglift_kernel, [1,13]; name = \"drag/lift by testfunction\", dependencies = \"\", quadorder = 4)\n    DLIntegrator = ItemIntegrator(Float64,ON_CELLS,[Identity, Gradient, Identity, Identity, Gradient], draglift_action)\n\n    # test for drag\n    TestFunction = FEVector{Float64}(\"drag testfunction\",Solution[1].FES)\n    xBFaces = Solution[1].FES.xgrid[BFaces]\n    user_function_dragtest = DataFunction(circle_bnd_testfunction(1), [2,2]; name = \"drag test\", dependencies = \"X\", quadorder = 0)\n    interpolate!(TestFunction[1], ON_FACES, user_function_dragtest; items = xBFaces)\n    drag = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunction[1],TestFunction[1]])\n\n    # test for lift\n    user_function_lifttest = DataFunction(circle_bnd_testfunction(2), [2,2]; name = \"lift test\", dependencies = \"X\", quadorder = 0)\n    interpolate!(TestFunction[1], ON_FACES, user_function_lifttest; items = xBFaces)\n    lift = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunction[1],TestFunction[1]])\n\n    return [drag,lift]\nend\n\n# grid generator script using SimplexGridBuilder/Triangulate\nfunction make_grid(W,H; n=20,maxvol=0.1)\n\tbuilder=SimplexGridBuilder(Generator=Triangulate)\n    function circlehole!(builder, center, radius; n=20)\n        points=[point!(builder, center[1]+radius*sin(t),center[2]+radius*cos(t))\n\t\t\t\tfor t in range(0,2π,length=n)]\n        for i=1:n-1\n            facet!(builder,points[i],points[i+1])\n        end\n        facet!(builder,points[end],points[1])\n        holepoint!(builder,center)\n    end\n    p1=point!(builder,0,0)\n    p2=point!(builder,W,0)\n    p3=point!(builder,W,H)\n    p4=point!(builder,0,H)\n\n    # heuristic refinement around cylinder\n    refine_radius = 0.25\n    maxrefinefactor = 1//20\n    function unsuitable(x1,y1,x2,y2,x3,y3,area)\n        if area>maxvol*min(max(4*maxrefinefactor,abs((x1+x2+x3)/3 - 0.2)),1/maxrefinefactor)\n            return true\n        end\n        dist = sqrt( ( (x1+x2+x3)/3 - 0.2 )^2 + ( (y1+y2+y3)/3 - 0.2)^2) - 0.05\n        myarea= dist < refine_radius ? maxvol*max(maxrefinefactor,1-(refine_radius - dist)/refine_radius) : maxvol\n        if area>myarea\n           return true\n        else\n            return false\n        end\n    end\n\n    facetregion!(builder,1); facet!(builder,p1,p2)\n    facetregion!(builder,2); facet!(builder,p2,p3)\n\tfacetregion!(builder,3); facet!(builder,p3,p4)\n\tfacetregion!(builder,4); facet!(builder,p4,p1)\n\n\tfacetregion!(builder,5); circlehole!(builder, (0.2,0.2),0.05,n=n)\n\tsimplexgrid(builder,maxvolume=16*maxvol, unsuitable = unsuitable)\nend\n\nend","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"Default output:","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"julia> Example224_FlowAroundCylinder2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = NSE problem (μ = 0.001)\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(u) ⋅ ∇) u ⋅ R(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (R(u) ⋅ ∇) u ⋅ R(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [4]\n                         HomogeneousDirichletBoundary -> [1, 3, 5]\n                          \n   BoundaryOperator[2] : \n\nProblem = \n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.158694e-17 | 1.903511e-03\n\t      2   | 2.309762e-17 | 5.517788e-04\n\t      3   | 2.042380e-17 | 2.927442e-05\n\t      4   | 2.281003e-17 | 1.036895e-07\n\t      5   | 2.295749e-17 | 1.089343e-12\n\n[drag, lift] = [5.574275662599664, 0.012138554422720174]\np difference = [0.11612370212308319]","category":"page"},{"location":"examples/Example224_FlowAroundCylinder2D/","page":"224 : Flow around a cylinder 2D","title":"224 : Flow around a cylinder 2D","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/#:-Obstacle-Problem-2D","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"","category":"section"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"This example computes the solution u of the nonlinear obstacle problem that seeks the minimiser of the energy functional","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"beginaligned\n    E(u) = int_Omega lvert nabla u rvert^2 dx - int_Omega f u dx\nendaligned","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"with some right-hand side f within the set of admissible functions that lie above an obstacle  chi","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"beginaligned\n    mathcalK = lbrace u in H^1_0(Omega)  u geq chi rbrace\nendaligned","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"The obstacle constraint is realised via a penalty term that is automatically differentiated for a Newton scheme.","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"module Example215_ObstacleProblem2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableSparse\nusing Printf\n\n# problem data\nfunction obstacle!(result,x)\n    result[1] = -0.05 + 0.05*cos(4*x[1]*pi)*cos(4*x[2]*pi)\n    return nothing\nend\nfunction obstacle_penalty_kernel!(result::Array{<:Real,1}, input::Array{<:Real,1},x)\n    obstacle!(result,x)\n    result[1] = min(0, input[1] - result[1])\n    return nothing\nend\n\nfunction main(; Plotter = nothing, verbosity = 0, penalty = 1e4, nrefinements = 5, FEType = H1P1{1})\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n\n    # generate problem description\n    Problem = PDEDescription(\"obstacle problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"obstacle problem\")\n    add_operator!(Problem, [1,1], LaplaceOperator(1.0; store = true))\n    add_operator!(Problem, [1,1], GenerateNonlinearForm(\"eps^{-1} ||(u-χ)_||\", [Identity], [1], Identity, obstacle_penalty_kernel!, [1,1]; dependencies = \"X\", factor = penalty, quadorder = 4, ADnewton = true) )\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], DataFunction([-1]); store = true))\n\n    # create finite element space and solution vector\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector{Float64}(\"u_h\",FES)\n\n    # solve\n    @show Problem Solution\n    solve!(Solution, Problem; maxiterations = 20)\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\nend\n\n\nend","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"julia> Example215_ObstacleProblem2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = obstacle problem\n\n     id   | unknown name / equation name\n    [1]   | u / obstacle problem \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | eps^{-1} ||(u-χ)_|| [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | eps^{-1} ||(u-χ)_|| [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n            | Constant([-1])⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n\nProblem = \nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    2113 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 6.660468e-16 | 3.453860e+00\n\t      2   | 8.112879e-16 | 1.038513e-01\n\t      3   | 6.121301e-16 | 6.813761e-02\n\t      4   | 4.519985e-16 | 4.818589e-02\n\t      5   | 3.093450e-16 | 3.242300e-02\n\t      6   | 2.701738e-16 | 1.591896e-02\n\t      7   | 2.461467e-16 | 5.214040e-03\n\t      8   | 2.442026e-16 | 6.933163e-04\n\t      9   | 2.522782e-16 | 3.948840e-06\n\t     10   | 2.473934e-16 | 2.473934e-16\n","category":"page"},{"location":"examples/Example215_ObstacleProblem2D/","page":"215 : Obstacle Problem 2D","title":"215 : Obstacle Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/ExampleA05_DiffEQ/#A05-:-Comparison-with-DifferentialEquations.jl","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"","category":"section"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"(source code)","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"This example computes a transient velocity mathbfu solution of the nonlinear Poisson problem","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"beginaligned\nmathbfu_t - mathrmdiv((1+betamathbfu^2) nabla mathbfu)  = mathbff\nendaligned","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"with (some time-dependent) exterior force mathbff. The parameter beta steers the strength of the nonlinearity.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"The time integration will be performed by a solver from DifferentialEquations.jl or by the iternal backward Euler method of GradientRobustMultiPhysics.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"Note: To run this example the DifferentialEquations.jl package has to be installed.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"module ExampleA05_DiffEQ\n\nusing GradientRobustMultiPhysics\nusing DifferentialEquations\nusing Printf\n\n\n# problem data\nfunction exact_solution!(result,x::Array{<:Real,1}, t)\n    result[1] = x[1]*x[2]*(1-t)\n    return nothing\nend\nfunction exact_gradient!(result,x::Array{<:Real,1}, t)\n    result[1] = x[2]\n    result[2] = x[1]\n    result .*= 1-t\n    return nothing\nend\nfunction rhs!(beta)\n    function closure(result,x::Array{<:Real,1},t)\n        result[1] = -2*beta*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div(beta*u^2*grad(u))\n        result .*= (1-t)^3\n        result[1] += -x[1]*x[2] ## = u_t\n        return nothing\n    end\nend\n\n# everything is wrapped in a main function\n# the last four parametes steer the solver from DifferentialEquations.jl\n# for beta = 0, abstol and reltol can be choosen much larger\nfunction main(; verbosity = 0, Plotter = nothing, nlevels = 3, timestep = 1e-1, T = 0.5, FEType = H1P1{1}, beta = 1,\n    use_diffeq::Bool = true, solver = Rosenbrock23(autodiff = false), adaptive_timestep = true,  abstol = 1e-3, reltol = 1e-3, testmode = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),1);\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_solution!, [1,1]; name = \"u\", dependencies = \"XT\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_gradient!, [2,1]; name = \"∇(u)\", dependencies = \"XT\", quadorder = 4)\n    user_function_rhs = DataFunction(rhs!(beta), [1,1]; name = \"f\", dependencies = \"XT\", quadorder = 5)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    function diffusion_kernel!(result::Array{<:Real,1}, input::Array{<:Real,1})\n        # input = [u, grad(u)]\n        result[1] = (1+beta*input[1]^2)*input[2]\n        result[2] = (1+beta*input[1]^2)*input[3]\n        return nothing\n    end\n    nonlin_diffusion = GenerateNonlinearForm(\"(1+ βu^2) ∇u ⋅ ∇v\", [Identity, Gradient], [1,1], Gradient, diffusion_kernel!, [2,3]; quadorder = 2, ADnewton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(beta == 0 ? \"linear Poisson problem\" : \"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = beta == 0 ? \"linear Poisson problem\" : \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], beta == 0 ? LaplaceOperator() : nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs))\n\n    # define error evaluators\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity; time = T)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient; time = T)\n    Results = zeros(Float64, nlevels, 2); NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # set initial solution\n        interpolate!(Solution[1], user_function)\n\n        # generate time-dependent solver\n        sys = TimeControlSolver(Problem, Solution, BackwardEuler; timedependent_equations = [1], skip_update = [beta == 0 ? -1 : 1], nonlinear_iterations = beta == 0 ? 1 : 5)\n\n        if use_diffeq == true\n            # use time integration by DifferentialEquations\n            advance_until_time!(DifferentialEquations, sys, timestep, T; solver = solver, abstol = abstol, reltol = reltol, adaptive = adaptive_timestep)\n        else\n            # use time control solver by GradientRobustMultiPhysics\n            advance_until_time!(sys, timestep, T)\n        end\n\n        # plot solution at final time\n        GradientRobustMultiPhysics.plot(xgrid, [Solution[1]], [Identity]; Plotter = Plotter)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,Solution[1]))\n    end\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\nend\n\nfunction test()\n    return main(; use_diffeq = false, nlevels = 1, testmode = true)\nend\n\n\nend","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/#:-Planar-Lattice-Flow-2D","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"","category":"section"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"(source code)","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"This example computes an approximation to the planar lattice flow test problem of the Stokes equations","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"beginaligned\n- nu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(mathbfu)  = 0\nendaligned","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"with an exterior force mathbff and some viscosity parameter nu and Dirichlet boundary data for mathbfu.","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"Here the exact data for the planar lattice flow","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"beginaligned\nmathbfu(xyt)  = exp(-8 pi^2 nu t) beginpmatrix sin(2 pi x) sin(2 pi y)  cos(2 pi x) cos(2 pi y) endpmatrix\np(xyt)  = exp(-8 pi^2 nu t) ( cos(4 pi x) - cos(4 pi y))  4\nendaligned","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"is prescribed at fixed time t = 0 with mathbff = mathbfu_t - nu Delta mathbfu.","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"In this example the Navier-Stokes equations are solved with a pressure-robust variant of the Bernardi–Raugel finite element method and the nonlinear convection term (that involves reconstruction operators) is automatically differentiated for a Newton iteration.","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"module Example205_PlanarLatticeFlow2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# exact solution\nfunction exact_velocity!(ν)\n    function closure(result,x::Array{<:Real,1},t)\n        result[1] = exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n        result[2] = exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n    end\nend\nfunction exact_pressure!(ν)\n    function closure(result,x::Array{<:Real,1}, t)\n        result[1] = exp(-8*pi*pi*ν*t)*(cos(4*pi*x[1])-cos(4*pi*x[2])) / 4\n    end\nend\nfunction rhs!(ν)\n    function closure(result,x::Array{<:Real,1},t)\n        result[1] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n        result[2] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; ν = 1e-3, nrefinements = 5, verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate a unit square mesh and refine\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n\n    # negotiate data\n    u = DataFunction(exact_velocity!(ν), [2,2]; name = \"u\", dependencies = \"XT\", quadorder = 6)\n    p = DataFunction(exact_pressure!(ν), [1,2]; name = \"p\", dependencies = \"XT\", quadorder = 4)\n    f = DataFunction(rhs!(ν), [2,2]; name = \"f\", dependencies = \"XT\", quadorder = 4)\n\n    # set finite element and reconstruction operator\n    FEType = [H1BR{2}, H1P0{1}]; IdentityV = ReconstructionIdentity{HDIVBDM1{2}};\n\n    # setup a bestapproximation problem via a predefined prototype\n    Problem = PDEDescription(\"planar lattice flow problem\")\n    add_unknown!(Problem; equation_name = \"momentum equation\", unknown_name = \"velocity\")\n    add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"pressure\")\n    add_operator!(Problem, [1,1], LaplaceOperator(ν; store = true))\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n    add_operator!(Problem, [1,1], ConvectionOperator(1, IdentityV, 2, 2; testfunction_operator = IdentityV, auto_newton = true))\n    add_constraint!(Problem, FixedIntegralMean(2,0))\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1, RhsOperator(IdentityV, [1], f))\n    @show Problem\n\n    # create finite element spaces and solve\n    FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid)]\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],FES)\n    solve!(Solution, Problem)\n\n    # calculate L2 errors for u and p\n    L2errorV = L2ErrorIntegrator(Float64, u, Identity)\n    L2errorP = L2ErrorIntegrator(Float64, p, Identity)\n    println(\"|| u - u_h || = $(sqrt(evaluate(L2errorV,Solution[1])))\")\n    println(\"|| p - p_h || = $(sqrt(evaluate(L2errorP,Solution[2])))\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[2]], [Identity, Identity]; Plotter = Plotter, isolines = 9)\nend\n\nend","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"Default output:","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"julia> Example205_PlanarLatticeFlow2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = planar lattice flow problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(u) ⋅ ∇) u ⋅ R(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (R(u) ⋅ ∇) u ⋅ R(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n            | f⋅R(v) (APT = LinearForm, AT = ON_CELLS, regions = [1])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 4.445431e-17 | 9.171721e-02\n\t      2   | 1.068140e-16 | 1.005659e-06\n\t      3   | 1.036015e-16 | 2.431843e-10\n\t      4   | 1.063117e-16 | 1.461784e-16\n\n|| u - u_h || = 0.00218809011322407\n|| p - p_h || = 0.01641994916604906","category":"page"},{"location":"examples/Example205_PlanarLatticeFlow2D/","page":"205 : Planar Lattice Flow 2D","title":"205 : Planar Lattice Flow 2D","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build status) (Image: ) (Image: ) (Image: DOI)","category":"page"},{"location":"#GradientRobustMultiPhysics.jl","page":"Home","title":"GradientRobustMultiPhysics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package offers (mostly low-order) finite element methods for multiphysics problems in Julia that focus on the preservation of structural and qualitative properties, in particular the gradient-robustness property for the discretisation of (nearly) incompressible flows and resulting qualitative properties in coupled processes. The code therefore offers several classical and novel non-standard finite element discretisations to play and compare with in these applications and a toolkit to setup multi-physics problems by defining PDE systems and generating fixed-point iterations to solve them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The implementation is based on ExtendableGrids.jl that allows to have unstructured grids with mixed element geometries in it, e.g. triangles and quads in the same mesh.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also note, that this package is part of the meta-package PDELIB.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe focus is (at least currently) not on high-performance, high-order or parallel-computing. Also, this package is still in an early development stage and features and interfaces might change in future updates.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"via Julia package manager in Julia 1.5 or above:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# latest stable version\n(@v1.5) pkg> add GradientRobustMultiPhysics\n# latest version\n(@v1.5) pkg> add GradientRobustMultiPhysics#master","category":"page"},{"location":"#Dependencies-on-other-Julia-packages","page":"Home","title":"Dependencies on other Julia packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExtendableGrids.jl\nGridVisualize.jl\nExtendableSparse.jl\nDocStringExtensions.jl\nForwardDiff.jl\nDiffResults.jl\nWriteVTK.jl\n","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The general work-flow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mesh the domain of computation, possibly using one of the constructors by ExtendableGrid.jl or via mesh generators in SimplexGridFactory.jl.\nDescribe your PDE system with the help of the PDE Description and PDE Operators. User parameters and customised operator actions are framed with the help of User Data and Actions.\nDiscretise, i.e. choose suitable finite element ansatz spaces for the unknowns of your PDE system.\nSolve (stationary, time-dependent, iteratively?)\nPostprocess (compute stuff, plot, export data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please have a look at the Examples.","category":"page"},{"location":"#What-is-gradient-robustness?","page":"Home","title":"What is gradient-robustness?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gradient-robustness is a feature of discretisations that exactly balance gradient forces in the momentum balance. In the case of the incompressible Navier–Stokes equations this means that the discrete velocity does not depend on the exact pressure. Divergence-free finite element methods have this property but are usually expensive and difficult to contruct. However, also non-divergence-free classical finite element methods can be made pressure-robust with the help of reconstruction operators applied to testfuntions in certain terms of the momentum balance, see e.g. references [1,2] below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Recently gradient-robustness was also connected to the design of well-balanced schemes e.g. in the context of (nearly) compressible flows, see e.g. reference [3] below.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]   \"On the divergence constraint in mixed finite element methods for incompressible flows\",\n      V. John, A. Linke, C. Merdon, M. Neilan and L. Rebholz,\n      SIAM Review 59(3) (2017), 492–544,\n      >Journal-Link<,       >Preprint-Link<\n[2]   \"Pressure-robustness and discrete Helmholtz projectors in mixed finite element methods for the incompressible Navier–Stokes equations\",\n      A. Linke and C. Merdon,       Computer Methods in Applied Mechanics and Engineering 311 (2016), 304–326,\n      >Journal-Link<       >Preprint-Link<\n[3]   \"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\n      M. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\n      Computer Methods in Applied Mechanics and Engineering 367 (2020),\n      >Journal-Link<       >Preprint-Link<","category":"page"},{"location":"userdata/#User-Data-and-Actions","page":"User Data and Actions","title":"User Data and Actions","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"There is a variety of different user data, like scalar- and vector-valued constants, time-dependent data, region-dependent data or plain functions that depend on the the space coordinates. Also dependency on the item number of the reference coordinates of the quadrature point in the quadrature item are sometimes desireable. To allow for flexible user-specified data, all functions have to be negotiated by the UserData interface that fixes the order and number of the arguments in the interface via a user-given substring of \"XTRIL\" where each character stands for a dependency. The following table explains the meaning of each character.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Character Explanation\nX depends on (vector-valued) space coordinates\nT depends on time coordinate\nR depends on region number\nI depends on item number\nL depends on local coordinates in reference geometry of item","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Also note that all functions are expected to write their result into the first argument.","category":"page"},{"location":"userdata/#Data-Function","page":"User Data and Actions","title":"Data Function","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"The simplest form of user data is called DataFunction which allows additional dependencies on space or time coordinates. The following tables lists all allowed substrings of \"XTRIL\" and the expected interface of the function provided by the user.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"dependency string Expected interface\n\"\" function f!(result) ... end  (constant data)\n\"X\" function f!(result,x) ... end  (space-dependent data)\n\"T\" function f!(result,t) ... end  (time-dependent constant-in-space data)\n\"XT\" function f!(result,x,t) ... end  (space and time-dependent data)","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"DataFunctions can be used to define boundary data, right-hand side functions and can be interpolated by the finite element standard interpolations.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"DataFunction","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.DataFunction","page":"User Data and Actions","title":"GradientRobustMultiPhysics.DataFunction","text":"function DataFunction(\n    f::Function,                    # user function with interface f(result, _other dependencies_)\n    dimensions::Array{Int,1};       # [length(result), length(x)]\n    name = \"user data function\",\n    dependencies::String = \"\",      # substring of \"XT\" encoding other dependencies in f interface\n    quadorder::Int = 0)             # quadrature order added to operator's quadorder that evalute f\n\nProvides a negotation interface for some user-defined function that  can be used in integrate! and boundary or right-hand side data assignments. The function f has to obey the interface\n\nf(result, [X, T])\n\nwhere the parameters X (= space coordinates) and T ( = time) are optional. Which of them are used has to be specified in the  String dependencies. The array dimensions specifies the expected length of result and input and quadorder determines the additional quadrature order to be used if this function is involved in some quadrature-requireing procedure.\n\n\n\n\n\nfunction DataFunction(c::Array{<:Real,1}; name = \"constant user data\", quadorder::Int = 0)\n\nDirectly generates a DataFunction from a given array c, i.e. a DataFunction that is constant and has no dependencies on x or t.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Extended-Data-Function","page":"User Data and Actions","title":"Extended Data Function","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"There are also ExtendedDataFunction that allow the additional dependencies R (region), I (item number) and L (local coordinates). The dependencies are stated via a string in the constructor that should be a substring of \"XTRIL\". However, extended data functions cannot be used everywhere.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"ExtendedDataFunction","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.ExtendedDataFunction","page":"User Data and Actions","title":"GradientRobustMultiPhysics.ExtendedDataFunction","text":"function ExtendedDataFunction(\n    f::Function,                    # user function with interface f(result, _other dependencies_)\n    dimensions::Array{Int,1};       # [length(result), length(x)]\n    name = \"user data function\",\n    dependencies::String = \"\",      # substring of \"XTRIL\" encoding other dependencies in f interface\n    quadorder::Int = 0)             # quadrature order added to operator's quadorder that evalute f\n\nProvides a negotation interface for some data function with extended dependencies (region number, item number and local coordinates) that can be used in integrate!. The function f has to obey the interface\n\nf(result, [X, T, R, I, L])\n\nwhere the parameters X (= space coordinates) and T ( = time) are optional. Which of them are used has to be specified in the  String dependencies. The array dimensions specifies the expected length of result and X (if X-depdendent, otherwise will be ignored) and quadorder determines the additional quadrature order to be used if this function is involved in some quadrature-requireing procedure.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Action-Kernel","page":"User Data and Actions","title":"Action Kernel","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Another form of user data are action kernels that are used to define an AbstractAction. Actions modify (usually a subset of) arguments of Assembly Patterns and so allow parameter-dependent assemblies.  Also, a trilinear form always needs an action that holds instructions how to prepare the first two arguments such that it can be evaluated with the testfunction operator. To use them, the user defines some kernel function for the action that has the interface. Kernel functions also allow the full range of dependencies, hence any substring of \"XTRIL\".","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"However, between the result argument and the further dependencies they get an input argument which (during assembly) carries the operator-evaluations of the arguments that go into the action. Hence the usual interface of a action kernel function looks like this:","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"function action_kernel!(result,input,[X,T,R,I,L])\n    # result = modified input, e.g.\n    # multiplication with some parameter that can depend on\n    # X = space coordinates\n    # T = time\n    # R = region number\n    # I = item number (cell, face or edge number depending on assembly type)\n    # L = local coordinates on item reference domain\nend","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"During assembly, input (in general) takes the role of all non-testfunction arguments and the result vector will be the one that is multiplied with the testfunctions. Additionally, the kernel function can depend on X, T, R, I and L as specified above. Once again note, that time-dependency of the kernel function is inherited to the action and later to the whole PDEOperator and so triggers reassembly of the associated PDEoperator in each time step.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"ActionKernel","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.ActionKernel","page":"User Data and Actions","title":"GradientRobustMultiPhysics.ActionKernel","text":"function ActionKernel(\n    f::Function,                    # user function with interface f(result, _other dependencies_)\n    dimensions::Array{Int,1};       # [length(result), length(input)]\n    name = \"user action kernel\",\n    dependencies::String = \"\",      # substring of \"XTRIL\" encoding other dependencies in f interface\n    quadorder::Int = 0)             # quadrature order added to actions/operators that evaluate this action kernel\n\nProvides a negotation interface for some function that can be used in the Action constructor to define a user-defined operator action. The function has to obey the interface\n\nf(result, input, [X, T, R, I, L])\n\nwhere the parameters X (= space coordinates), T ( = time), R (= region number), I (= item number), L (= local coordinates) are optional. Which of them are used has to be specified in the String dependencies.\n\nThe input vector usually provides the FunctionOperator evaluations of (a subset of) the ansatz arguments of the assembly pattern where the action is used. The array dimensions specifies the expected length of result and input and quadorder determines the additional quadrature order to be used if this function (or its derived action) is involved in an assembly process.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Action","page":"User Data and Actions","title":"Action","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Actions are used by abstract user-defined PDEOperators and consist of an action kernel plus some additional infrastructure. To generate an action from an action kernel or directly from a function works via the following constructors.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Action","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.Action","page":"User Data and Actions","title":"GradientRobustMultiPhysics.Action","text":"function Action(\n    T::Type{<:Real},\n    kernel::UserData{<:AbstractActionKernel};\n    name::String = \"user action\")\n\nCreates an Action from a given specified action kernel that then can be used in an assembly pattern. T specifies the number format that should match the number format of the used quadrature rules and grid coordinates in the mesh (usually Float64).\n\n\n\n\n\nfunction Action(\n    T::Type{<:Real},\n    kernel_function::Function,\n    dimensions::Array{Int,1};\n    name = \"user action\",\n    dependencies = \"\",\n    quadorder = 0)\n\nCreates an Action directly from a kernel function (plus additional information to complement the action kernel) that then can be used in an assembly pattern. T specifies the number format that should match the number format of the used quadrature rules and grid coordinates in the mesh (usually Float64).\n\n\n\n\n\n","category":"type"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Moreover, there are some shortcut action constructors that can be used directly without defining an action kernel first.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"NoAction\nMultiplyScalarAction","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.NoAction","page":"User Data and Actions","title":"GradientRobustMultiPhysics.NoAction","text":"function NoAction()\n\nCreates a NoAction that causes the assembly pattern to ignore the action assembly.\n\n\n\n\n\n","category":"type"},{"location":"userdata/#GradientRobustMultiPhysics.MultiplyScalarAction","page":"User Data and Actions","title":"GradientRobustMultiPhysics.MultiplyScalarAction","text":"function MultiplyScalarAction(value, ncomponents::Int)\n\nDEPRECATED\n\nDirectly creates an Action that multiplies a scalar value to the input (vector of length ncomponents). This action should not be necessary anymore, since all PDEOperators/AssemblyPatterns have a factor property with the same functionality.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#NLAction-Kernel","page":"User Data and Actions","title":"NLAction Kernel","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"For the manual linearisation (=without automatic differentiation) of Nonlinear Operators assembly pattern, the user can also insert nonlinear action kernels that have a second input argument for the operator-evaluations of the current solution. But since this feature is still experimental, it will not explained in more detail, yet.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"NLActionKernel","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.NLActionKernel","page":"User Data and Actions","title":"GradientRobustMultiPhysics.NLActionKernel","text":"function NLActionKernel(\n    f::Function,\n    dimensions::Array{Int,1};\n    name = \"nonlinear user action kernel\",\n    dependencies::String = \"\",\n    quadorder::Int = 0)\n\nProvides a negotation interface for some function to be used as a nonlinear action kernel that can be used in the NonlinearOperator constructor without automatic differentiation. The function f has to obey the interface\n\nf(result, input_current, input_ansatz)\n\nand can be seen as a linearisation of a nonlinearity that can depend on the operator evaluation of the current iterate (inputcurrent) and, as usual, the operator evaluations of the ansatz function (inputansatz).\n\nNo further dependencies are allowed currently. Note, that this is a work-in-progress feature.\n\n\n\n\n\n","category":"function"},{"location":"examples/ExampleA02_CommutingInterpolators2D/#A02-:-Commuting-Interpolators-2D","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"","category":"section"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"(source code)","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"This example verifies a structural property of the H1 and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"mathrmCurl(I_mathrmP_kpsi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"for the H_1 interpolator I_mathrmP_k and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 and k=2. Note, that the H_1 interpolator only does nodal interpolations at the vertices but not in the additional degrees of freedom. For k=2, the interpolator also preserves the moments along the edges.","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"module ExampleA02_CommutingInterpolators2D\n\nusing GradientRobustMultiPhysics\n\n# define some function\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^2-x[2]^4 + 1\nend\n# and its CurlScalar = (-dy,dx)\nfunction exact_curl!(result,x::Array{<:Real,1})\n    result[1] = 4*x[2]^3\n    result[2] = 2*x[1]\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 2, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Triangle2D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 4)\n    user_function_curl = DataFunction(exact_curl!, [2,2]; name = \"Curl(u_exact)\", dependencies = \"X\", quadorder = 3)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [H1P1{1},HDIVRT0{2}]; testFE = H1P0{2}\n    elseif order == 2\n        FE = [H1P2{1,2},HDIVRT1{2}]; testFE = H1P1{2}\n    end\n\n    # do the H1 interpolation of the function\n    FESH1 = FESpace{FE[1]}(xgrid)\n    H1Interpolation = FEVector{Float64}(\"H1-Interpolation\",FESH1)\n    interpolate!(H1Interpolation[1], user_function)\n\n    # do the Hdiv interpolation of the Curl of the function\n    # since integrals over faces have to be computed exactly we need to tune the quadrature order\n    FESHdiv = FESpace{FE[2]}(xgrid)\n    HdivCurlInterpolation = FEVector{Float64}(\"Hdiv-Interpolation\",FESHdiv)\n    interpolate!(HdivCurlInterpolation[1], user_function_curl)\n\n    # Checking the identity:\n    # Both sides of the identity are finite element function of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # first: generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector{Float64}(\"ErrorVector\",FEStest)\n\n    # Define bilinear forms that represents testing each side of the identity with the testspace functions\n    BLF1 = BilinearForm(Float64, ON_CELLS, [FEStest, FESHdiv], [Identity, Identity])\n    BLF2 = BilinearForm(Float64, ON_CELLS, [FEStest, FESH1], [Identity, CurlScalar])\n\n    # evaluate the bilinear forms in the respective interpolations and subtract them from each other\n    # note that in these calls always the second argument of the bilinearform is fixed by the given FEVectorBlock\n    assemble!(error[1], BLF1, HdivCurlInterpolation[1]; fixed_arguments = [2])\n    assemble!(error[1], BLF2, H1Interpolation[1]; factor = -1, fixed_arguments = [2])\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1,2]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"Default output:","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"julia> ExampleA02_CommutingInterpolators2D.main()\nerror(Curl(I_H1P2{1,2}(psi) - I_HDIVRT1{2}(Curl(psi))) = 1.6883384559505932e-16","category":"page"},{"location":"examples/Example201_PoissonProblem2D/#:-Poisson-Problem-2D","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"","category":"section"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"This example computes the solution u of the Poisson problem","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"beginaligned\n-Delta u  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"with some right-hand side f on the unit cube domain Omega on a given grid.","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"module Example201_PoissonProblem2D\n\nusing GradientRobustMultiPhysics\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, diffusion = 1, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # build/load any grid (here: a uniform-refined 2D unit square into triangles)\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),4)\n\n    # create empty PDE description\n    Problem = PDEDescription(\"Poisson problem\")\n\n    # add unknown(s) (here: \"u\" that gets id 1 for later reference)\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"Poisson equation\")\n\n    # add left-hand side PDEoperator(s) (here: only Laplacian)\n    add_operator!(Problem, [1,1], LaplaceOperator(diffusion; AT = ON_CELLS))\n\n    # add right-hand side data (here: f = [1] in region(s) [1])\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [1], DataFunction([1]; name = \"f\"); AT = ON_CELLS))\n\n    # add boundary data (here: zero data for boundary regions 1:4)\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # discretise = choose FEVector with appropriate FESpaces\n    FEType = H1P2{1,2}\n    Solution = FEVector{Float64}(\"u_h\",FESpace{FEType}(xgrid))\n\n    # show problem and Solution structure\n    @show Problem Solution\n\n    # solve for chosen Solution vector\n    solve!(Solution, Problem)\n\n    # plot solution (for e.g. Plotter = PyPlot)\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\n\nend\n\nend","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"julia> Example201_PoissonProblem2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | u / Poisson equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | f⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [1])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n\nProblem = \nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    2113 | u_h (H1P2{1,2})\n","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/#:-Compressible-Stokes-2D","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"","category":"section"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"(source code)","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"This example solves the compressible Stokes equations where one seeks a (vector-valued) velocity mathbfu, a density varrho and a pressure p such that","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"beginaligned\n- mu Delta mathbfu + lambda nabla(mathrmdiv(mathbfu)) + nabla p  = mathbff + varrho mathbfg\nmathrmdiv(varrho mathbfu)  = 0\n        p  = eos(varrho)\n        int_Omega varrho  dx  = M\n        varrho  geq 0\nendaligned","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"Here eos eos is some equation of state function that describes the dependence of the pressure on the density (and further physical quantities like temperature in a more general setting). Moreover, mu and lambda are Lame parameters and mathbff and mathbfg are given right-hand side data.","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"In this example we solve a analytical toy problem with the prescribed solution","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"beginaligned\nmathbfu(mathbfx)  =0\nvarrho(mathbfx)  = 1 - (x_2 - 05)c\np = eos(varrho) = c varrho^gamma\nendaligned","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"such that mathbff = 0 and mathbfg nonzero to match the prescribed solution. This example is designed to study the well-balanced property of a discretisation. Note that a gradient-robust discretisation (set reconstruct = true below) has a much smaller L2 velocity error (i.e. approximatse the well-balanced state much better). For larger c the problem gets more incompressible which reduces the error further as then the right-hand side is a perfect gradient also when evaluated with the (now closer to a constant) discrete density. See reference below for more details.","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"reference: Reference\n\"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\nM. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\nComputer Methods in Applied Mechanics and Engineering 367 (2020),\n>Journal-Link< >Preprint-Link<","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"module Example225_CompressibleStokes2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# the equation of state\nfunction equation_of_state!(c,γ)\n    function closure(pressure,density)\n        for j = 1 : length(density)\n            pressure[j] = c*density[j]^γ\n        end\n    end\nend\n\n# the exact density (used for initial value of density if configured so)\nfunction ϱ_exact!(M,c)\n    function closure(result,x::Array{<:Real,1})\n        result[1] = M*(1.0 - (x[2] - 0.5)/c)\n    end\nend\n\n# gravity right-hand side (just gravity but with opposite sign!)\nfunction gravity!(γ,c)\n    function closure(result,x::Array{<:Real,1})\n        result[2] = - (1.0 - (x[2] - 0.5)/c)^(γ-2) * γ # = - ϱ^(γ-2) * γ\n    end\nend\n# gravity right-hand side (just gravity but with opposite sign!)\nfunction rhs!(γ,c)\n    function closure(result,x::Array{<:Real,1})\n        result[2] = - (1.0 - (x[2] - 0.5)/c)^(γ-1) * γ # = - ϱ^(γ-2) * γ\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; use_gravity = true, verbosity = 0, c = 10, γ = 1.4, M = 1, μ = 1e-3, λ = -2/3*μ, Plotter = nothing, nlevels = 3)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and exact solution\n    xgrid = simplexgrid(\"assets/2d_mountainrange.sg\")\n    u = DataFunction([0,0]; name = \"u\")\n    ∇u = DataFunction([0,0,0,0]; name = \"∇u\")\n    ϱ = DataFunction(ϱ_exact!(M,c), [1,2]; name = \"ϱ\", dependencies = \"X\", quadorder = 2)\n\n    # compute mass of exact density on grid (bit smaller than M due to mountains)\n    Mreal = integrate(xgrid, ON_CELLS, ϱ, 1)\n\n    # prepare error calculation\n    VeloError = L2ErrorIntegrator(Float64, u, Identity; quadorder = 4)\n    VeloGradError = L2ErrorIntegrator(Float64, ∇u, Gradient; quadorder = 2)\n    DensityError = L2ErrorIntegrator(Float64, ϱ, Identity; quadorder = 2)\n    Results = zeros(Float64,6,nlevels)\n    NDoFs = zeros(Int,nlevels)\n\n    # set finite element types [velocity, density,  pressure]\n    FETypes = [H1BR{2}, H1P0{1}, H1P0{1}] # Bernardi--Raugel x P0\n\n    # solve\n    Solution = [nothing, nothing]\n    for lvl = 1 : nlevels\n        if lvl > 1\n            xgrid = uniform_refine(xgrid)\n        end\n\n        # generate FESpaces and solution vector\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid)]\n        Solution = [FEVector{Float64}([\"u_h (BR)\", \"ϱ_h (BR)\", \"p_h (BR)\"],FES),FEVector{Float64}([\"u_h (BR+)\", \"ϱ_h (BR+)\", \"p_h (BR+)\"],FES)]\n        NDoFs[lvl] = length(Solution[1].entries)\n\n        # solve with and without reconstruction\n        for reconstruct in [true, false]\n            Target = Solution[reconstruct+1]\n            setup_and_solve!(Target, xgrid; use_gravity = use_gravity, reconstruct = reconstruct, c = c, M = Mreal, λ = λ, μ = μ, γ = γ)\n            Results[reconstruct ? 2 : 1,lvl] = sqrt(evaluate(VeloError,Target[1]))\n            Results[reconstruct ? 4 : 3,lvl] = sqrt(evaluate(VeloGradError,Target[1]))\n            Results[reconstruct ? 6 : 5,lvl] = sqrt(evaluate(DensityError,Target[2]))\n\n            # check error in mass constraint\n            Md = sum(Target[2][:] .* xgrid[CellVolumes])\n            @printf(\"\\tmass_error = %.4e - %.4e = %.4e \\n\",Mreal, Md, abs(Mreal-Md))\n        end\n    end\n\n    # print convergence history tables\n    print_convergencehistory(NDoFs, Results[1:2,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_h|| (BR)\",\"||u-u_h|| (BR+)\"], xlabel = \"ndof\")\n    print_convergencehistory(NDoFs, Results[3:4,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_h)|| (BR)\",\"||∇(u-u_h)|| (BR+)\"], xlabel = \"ndof\")\n    print_convergencehistory(NDoFs, Results[5:6,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||ϱ-ϱ_h|| (BR)\",\"||ϱ-ϱ_h|| (BR+)\"], xlabel = \"ndof\")\n\n    # plot everything\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1][1],Solution[1][2],Solution[2][1],Solution[2][2]], [Identity, Identity, Identity, Identity]; add_grid_plot = true, Plotter = Plotter)\nend\n\nfunction setup_and_solve!(Solution, xgrid;\n    c = 1, γ = 1, M = 1, μ = 1, λ = 0,\n    use_gravity = true,\n    reconstruct = true,\n    timestep = μ / (M*c),\n    maxTimeSteps = 500,\n    stationarity_threshold = c*1e-14/μ)\n\n    # generate empty PDEDescription for three unknowns (u, ϱ. p)\n    Problem = PDEDescription(\"compressible Stokes problem\")\n    add_unknown!(Problem; unknown_name = \"v\", equation_name = \"momentum equation\")\n    add_unknown!(Problem; unknown_name = \"ϱ\", equation_name = \"continuity equation\")\n    add_unknown!(Problem; unknown_name = \"p\", equation_name = \"equation of state\")\n    add_boundarydata!(Problem, 1,  [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # momentum equation\n    hdiv_space = HDIVBDM1{2} # HDIVRT0{2} also works\n    VeloIdentity = reconstruct ? ReconstructionIdentity{hdiv_space} : Identity\n    VeloDivergence = reconstruct ? ReconstructionDivergence{hdiv_space} : Divergence\n    add_operator!(Problem, [1,1], LaplaceOperator(2*μ; store = true))\n    if λ != 0\n        add_operator!(Problem, [1,1], AbstractBilinearForm([VeloDivergence,VeloDivergence]; name = \"λ (div(u),div(v))\", factor = λ, store = true))\n    end\n    add_operator!(Problem, [1,3], AbstractBilinearForm([Divergence,Identity]; name = \"(div(v),p)\", factor = -1, store = true))\n\n    if use_gravity\n        # discrete gravity term for right-hand side (assembled as bilinearform for faster evaluation in fixpoint iteration)\n        g = DataFunction(gravity!(γ,c), [2,2]; name = \"g\", dependencies = \"X\", quadorder = 4)\n        add_operator!(Problem, [1,2], AbstractBilinearForm([VeloIdentity,Identity], fdot_action(Float64, g); factor = -1, name = \"(g ⋅ v) ϱ\", store = true))\n    else\n        # exact gravity term for right-hand side\n        f = DataFunction(rhs!(γ,c), [2,2]; name = \"f\", dependencies = \"X\", quadorder = 4)\n        add_rhsdata!(Problem, 1,  RhsOperator(VeloIdentity, [0], f; store = true))\n    end\n\n    # continuity equation (by FV upwind on triangles)\n    add_operator!(Problem, [2,2], FVConvectionDiffusionOperator(1))\n\n    # equation of state (by best-approximation, P0 mass matrix is diagonal)\n    eos_action = Action(Float64, equation_of_state!(c,γ),[1,1]; dependencies = \"\", quadorder = 1)\n    add_operator!(Problem, [3,2], AbstractBilinearForm([Identity,Identity],eos_action; name = \"(p,eos(ϱ))\", apply_action_to = [2])) # cannot be stored if eos is nonlinear!\n    add_operator!(Problem, [3,3], AbstractBilinearForm([Identity,Identity]; name = \"(p,q)\", factor = -1, store = true))\n\n    # initial values for density (constant) and pressure (by equation of state)\n    fill!(Solution[2], M/sum(xgrid[CellVolumes]))\n    equation_of_state!(c,γ)(Solution[3],Solution[2])\n\n    # time-dependent solver with three equations [1] velocity, [2] density, [3] pressure\n    # solved iteratively [1] => [2] => [3] in each pseudo time step until stationarity\n    TCS = TimeControlSolver(Problem, Solution, BackwardEuler;\n                                        subiterations = [[1],[2],[3]], # solve [1], then [2], then [3]\n                                        skip_update = [-1,1,-1], # only matrix of eq [2] changes\n                                        timedependent_equations = [2], # only eq [2] is time-dependent\n                                        maxiterations = 1,\n                                        check_nonlinear_residual = false,\n                                        show_iteration_details = false)\n    advance_until_stationarity!(TCS, timestep; maxTimeSteps = maxTimeSteps, stationarity_threshold = stationarity_threshold)\nend\nend","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"Default output:","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"julia> Example225_CompressibleStokes2D.main()\n\tmass_error = 8.9026e-01 - 8.9026e-01 = 2.6645e-15 \n\tmass_error = 8.9026e-01 - 8.9026e-01 = 3.3307e-15 \n\tmass_error = 8.9026e-01 - 8.9026e-01 = 1.3323e-15 \n\tmass_error = 8.9026e-01 - 8.9026e-01 = 7.7716e-16 \n\tmass_error = 8.9026e-01 - 8.9026e-01 = 6.1062e-15 \n\tmass_error = 8.9026e-01 - 8.9026e-01 = 6.6613e-15 \n\n    ndof    |   ||u-u_h|| (BR)     order  |   ||u-u_h|| (BR+)    order  |\n============|=============================|=============================|\n       167  |     4.71437e-01      0.000  |     1.28783e-03      0.000  |\n       602  |     1.63767e-01      1.649  |     3.84703e-04      1.885  |\n      2282  |     4.54389e-02      1.924  |     9.32730e-05      2.127  |\n\n    ndof    |  ||∇(u-u_h)|| (BR)   order  | ||∇(u-u_h)|| (BR+)   order  |\n============|=============================|=============================|\n       167  |     9.53773e+00      0.000  |     2.47878e-02      0.000  |\n       602  |     6.81732e+00      0.524  |     9.94591e-03      1.424  |\n      2282  |     3.77126e+00      0.889  |     2.46695e-03      2.092  |\n\n    ndof    |   ||ϱ-ϱ_h|| (BR)     order  |   ||ϱ-ϱ_h|| (BR+)    order  |\n============|=============================|=============================|\n       167  |     6.24901e-03      0.000  |     5.64017e-03      0.000  |\n       602  |     2.94689e-03      1.172  |     2.82008e-03      1.081  |\n      2282  |     1.44808e-03      1.066  |     1.41004e-03      1.040  |","category":"page"},{"location":"examples/Example225_CompressibleStokes2D/","page":"225 : Compressible Stokes 2D","title":"225 : Compressible Stokes 2D","text":"(Image: )","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/#:-Navier-Stokes-Lid-driven-cavity-Anderson-Acceleration","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"","category":"section"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"(source code)","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"This example solves the lid-driven cavity problem where one seeks a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"where mathbfu = (10) along the top boundary of a square domain.","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"For small viscosities (where a Newton and a classical Picard iteration do not converge anymore), Anderson acceleration might help which can be tested with this script. Here, we use Anderson acceleration until the residual is small enough for the Newton to take over.","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"module Example222_NavierStokesAnderson2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, viscosity = 5e-4, anderson_iterations = 10, target_residual = 1e-12, maxiterations = 50, switch_to_newton_tolerance = 1e-4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # grid\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), 5);\n\n    # finite element type\n    FETypes = [H1P2{2,2}, H1P1{1}] # Taylor--Hood\n\n    # load Navier-Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = true, auto_newton = false, store = false)\n    add_boundarydata!(Problem, 1, [1,2,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [3], BestapproxDirichletBoundary; data = DataFunction([1,0]))\n    @show Problem\n\n    # generate FESpaces\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid)]\n    Solution = FEVector{Float64}([\"u_h\", \"p_h\"],FES)\n\n    # solve with anderson iterations until 1e-4\n    solve!(Solution, Problem; anderson_iterations = anderson_iterations, anderson_metric = \"l2\", anderson_unknowns = [1], maxiterations = maxiterations, target_residual = switch_to_newton_tolerance)\n\n    # solve rest with Newton\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = true, auto_newton = true, store = true)\n    add_boundarydata!(Problem, 1, [1,2,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [3], BestapproxDirichletBoundary; data = DataFunction([1,0]))\n    @show Problem\n    solve!(Solution, Problem; anderson_iterations = anderson_iterations, maxiterations = maxiterations, target_residual = target_residual)\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1],Solution[2]], [Identity, Identity]; Plotter = Plotter)\nend\n\nend","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"Default output:","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"julia> Example222_NavierStokesAnderson2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = incompressible Navier-Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0005 ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (id(a) ⋅ ∇) u ⋅ id(v) (APT = TrilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [3]\n                         HomogeneousDirichletBoundary -> [1, 2, 4]\n                          \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.371139e-17 | 8.063241e-03\n\t      2   | 2.417482e-17 | 4.186558e-03\n\t      3   | 3.163859e-17 | 2.062310e-03\n\t      4   | 2.798891e-17 | 6.651686e-04\n\t      5   | 2.893519e-17 | 5.562696e-04\n\t      6   | 2.902720e-17 | 3.504737e-04\n\t      7   | 2.972862e-17 | 3.225783e-04\n\t      8   | 2.916243e-17 | 1.990759e-04\n\t      9   | 2.973245e-17 | 8.282842e-05\n\n\nPDE-DESCRIPTION\n===============\n  system name = incompressible Navier-Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0005 ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (id(u) ⋅ ∇) u ⋅ id(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (id(u) ⋅ ∇) u ⋅ id(v) [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [3]\n                         HomogeneousDirichletBoundary -> [1, 2, 4]\n                          \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \nProblem = \n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.941146e-17 | 8.735238e-07\n\t      2   | 2.961347e-17 | 4.117803e-10\n\t      3   | 2.827158e-17 | 6.583227e-16\n","category":"page"},{"location":"examples/Example222_NavierStokesAnderson2D/","page":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"222 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"(Image: )","category":"page"},{"location":"quadrature/#Quadrature","page":"Quadrature","title":"Quadrature","text":"","category":"section"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Usually quadrature is a hidden layer as quadrature rules are chosen automatically based on the polynomial degree of the ansatz functions and the specified quadorder of the user data.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Hence, quadrature rules are only needed if the user wants write his own low-level assembly.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Quadrature rules consist of points (coordinates of evauation points with respect to reference geometry) and weights. There are constructors for several AbstractElementGeometries (from ExtendableGrids) and different order (some have generic formulas for abitrary order), see below for a detailed list.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"quadrature.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"abstract type QuadratureRule{T<:Real, ET<:AbstractElementGeometry}\n\nA struct that contains the name of the quadrature rule, the reference points and the weights for the parameter-determined element geometry.\n\n\n\n\n\n","category":"type"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry0D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry0D}\n\nConstructs 0D quadrature rule of specified order (always point evaluation).\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry1D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry1D}\n\nConstructs 1D quadrature rule of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Parallelepiped3D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelepiped3D}\n\nConstructs quadrature rule on Parallelepiped3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Parallelogram2D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelogram2D}\n\nConstructs quadrature rule on Parallelogram2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Tetrahedron3D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Tetrahedron3D}\n\nConstructs quadrature rule on Tetrahedron3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Triangle2D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Triangle2D}\n\nConstructs quadrature rule on Triangle2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.eltype-Union{Tuple{QuadratureRule{T, ET}}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry}","page":"Quadrature","title":"Base.eltype","text":"eltype(_::QuadratureRule{T<:Real, ET<:AbstractElementGeometry}) -> Vector{_A} where _A\n\n\nCustom eltype function for QuadratureRule{T,ET}.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.show-Tuple{IO, QuadratureRule}","page":"Quadrature","title":"Base.show","text":"show(io::IO, Q::QuadratureRule)\n\n\nCustom show function for QuadratureRule{T,ET} that prints some information.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate!-Tuple{AbstractArray, ExtendableGrid, Type{var\"#s116\"} where var\"#s116\"<:AbstractAssemblyType, UserData{var\"#s115\", FType, NFType, ndim} where {var\"#s115\"<:AbstractDataFunction, FType<:Function, NFType<:Function, ndim}}","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate!","text":"integrate!(integral4items::AbstractArray, grid::ExtendableGrid, AT::Type{var\"#s116\"} where var\"#s116\"<:AbstractAssemblyType, integrand::UserData{var\"#s115\", FType, NFType, ndim} where {var\"#s115\"<:AbstractDataFunction, FType<:Function, NFType<:Function, ndim}; index_offset, time, items, force_quadrature_rule)\n\n\nIntegration that writes result on every item into integral4items.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate-Tuple{ExtendableGrid, Type{var\"#s184\"} where var\"#s184\"<:AbstractAssemblyType, UserData{var\"#s183\", FType, NFType, ndim} where {var\"#s183\"<:AbstractDataFunction, FType<:Function, NFType<:Function, ndim}, Int64}","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate","text":"integrate(grid::ExtendableGrid, AT::Type{var\"#s184\"} where var\"#s184\"<:AbstractAssemblyType, integrand!::UserData{var\"#s183\", FType, NFType, ndim} where {var\"#s183\"<:AbstractDataFunction, FType<:Function, NFType<:Function, ndim}, resultdim::Int64; items, force_quadrature_rule) -> Union{Float64, Vector{Float64}}\n\n\nIntegration that returns total integral.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.ref_integrate!-Tuple{AbstractArray, Type{var\"#s207\"} where var\"#s207\"<:AbstractElementGeometry, Int64, Function}","page":"Quadrature","title":"GradientRobustMultiPhysics.ref_integrate!","text":"ref_integrate!(integral::AbstractArray, EG::Type{var\"#s207\"} where var\"#s207\"<:AbstractElementGeometry, order::Int64, integrand::Function)\n\n\nIntegration for reference basis functions on reference domains (merely for testing stuff).\n\nNote: area of reference geometry is not multiplied\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#PDE-Description","page":"PDE Description","title":"PDE Description","text":"","category":"section"},{"location":"pdedescription/#Purpose","page":"PDE Description","title":"Purpose","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"The following flow chart visualizes the typical work flow for solving a PDE.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"(Image: Assembly Flowchart) ","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Central object is the PDEDescription which is given as a weak form of your problem (without time derivatives that are added separately by a TimeControlSolver) and usually does not need any information on the discretisation at this point (but of course can depend on region numbers).","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Seperately the user provides a mesh and selects suitable finite element spaces on it. The PDEDescription and the Finite Element information is passed to the solver which (after an inspection of all the problem features) descides on a solver strategy (directly or fixed-point). In each iteration a linear system of equations is assembled and then solved by a linear solver.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Automatic differentiation enters on the PDEDescription level. Nonlinear operators can be differentiated automatically and the necessary terms for a Newton update enter the PDEDescription.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Also, if preferred or needed, a low-level assembly of the linear system is possible as each operator can be assembled separately.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Below the PDEDescription type is detailed. Its ingredients (PDEOperators, boundary conditions, global constraints) are explained on the next pages.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"PDEDescription\nBase.show(io::IO, PDE::PDEDescription)","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String) -> PDEDescription\n\n\nCreate empty PDEDescription with no unknowns.\n\n\n\n\n\nPDEDescription(name::String, nunknowns::Int64; algebraic, unknown_names, equation_names) -> PDEDescription\n\n\nCreate empty PDEDescription for a specified number of unknowns.\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#Base.show-Tuple{IO, PDEDescription}","page":"PDE Description","title":"Base.show","text":"show(io::IO, PDE::PDEDescription)\n\n\nCustom show function for PDEDescription that prints the PDE systems and all assigned operators\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#Creating/Extending-a-PDEDescription","page":"PDE Description","title":"Creating/Extending a PDEDescription","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Several add...! functions allow to extend the problems at any stage. There are several prototype PDEs documented on the PDE Prototypes page that can be used as a point of departure. Below is a list of functions that allows to initialise and extend a PDEDescription.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"pdedescription.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String, Int64}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String, nunknowns::Int64; algebraic, unknown_names, equation_names) -> PDEDescription\n\n\nCreate empty PDEDescription for a specified number of unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String) -> PDEDescription\n\n\nCreate empty PDEDescription with no unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_boundarydata!-Tuple{PDEDescription, Int64, Any, Type{var\"#s2496\"} where var\"#s2496\"<:AbstractBoundaryType}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions, btype::Type{var\"#s2496\"} where var\"#s2496\"<:AbstractBoundaryType; data)\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nIf timedependent == true, that data function depends also on time t and is reassembled in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_constraint!-Tuple{PDEDescription, AbstractGlobalConstraint}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint)\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Tuple{PDEDescription, Vector{Int64}, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, position::Vector{Int64}, O::AbstractPDEOperator; equation_name) -> Union{Int64, Tuple{Int64, Int64}}\n\n\nAdds the given abstract PDEOperator to the left-hand side of the PDEDescription at the specified position. The id of the operator in the coressponding LHS block of PDEDescription is returned.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Tuple{PDEDescription, Vector{Int64}, GradientRobustMultiPhysics.PDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, position::Vector{Int64}, O::GradientRobustMultiPhysics.PDEOperator; equation_name) -> Union{Int64, Tuple{Int64, Int64}}\n\n\nAdds the given PDEOperator to the left-hand side of the PDEDescription at the specified position. Optionally, the name of the equation can be changed. The id of the operator in the coressponding LHS block of PDEDescription is returned (in case of a nonlinear operator with a RHS contribution also the id in the coressponding RHS block is returned).\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_rhsdata!-Tuple{PDEDescription, Int64, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_rhsdata!","text":"add_rhsdata!(PDE::PDEDescription, position::Int64, O::AbstractPDEOperator) -> Int64\n\n\nAdds the given PDEOperator to the right-hand side of the PDEDescription at the specified position. The id of the operator in the coressponding RHS block of PDEDescription is returned.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_unknown!-Tuple{PDEDescription}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_unknown!","text":"add_unknown!(PDE::PDEDescription; equation_name, unknown_name, algebraic_constraint)\n\n\nAdds another unknown to the PDEDescription. With the optional argument algebraic_constraint = true the unknown and the related equation can be mask as an algebraic constraint. (Currently this only has a consequence if the system is integrated in time with the Crank-Nicolson rule.)\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Finite-Element-Spaces-and-Arrays","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"This page describes the structure FESpace that acts as a finite element space on a given grid and provides the associated degree of freedom maps DofMaps on demand. See Implemented Finite Elements for a list of available finite element types.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Moreover, there are special arrays FEVector and FEMatrix that carry coefficients and discretised PDEOperators.","category":"page"},{"location":"fespace/#FESpace","page":"Finite Element Spaces and Arrays","title":"FESpace","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"To generate a finite element space only a finite element type and a grid is needed, dofmaps are generated automatically on demand.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"finiteelements.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"struct FESpace{FEType<:AbstractFiniteElement,AT<:AbstractAssemblyType}\n    name::String                          # full name of finite element space (used in messages)\n    broken::Bool                          # if true, broken dofmaps are generated\n    ndofs::Int                            # total number of dofs\n    xgrid::ExtendableGrid                 # link to xgrid \n    dofmaps::Dict{Type{<:AbstractGridComponent},Any} # backpack with dofmaps\nend\n\nA struct that has a finite element type as parameter and carries dofmaps (CellDofs, FaceDofs, BFaceDofs) plus additional grid information and access to arrays holding coefficients if needed.\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace-Union{Tuple{ExtendableGrid}, Tuple{AT}, Tuple{FEType}} where {FEType<:AbstractFiniteElement, AT<:AbstractAssemblyType}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"function FESpace{FEType<:AbstractFiniteElement,AT<:AbstractAssemblyType}(\n    xgrid::ExtendableGrid;\n    name = \"\",\n    broken::Bool = false)\n\nConstructor for FESpace of the given FEType, AT = ONCELLS/ONFACES/ONEDGES generates a finite elements space on the cells/faces/edges of the provided xgrid (if omitted ONCELLS is used as default). The broken switch allows to generate a broken finite element space (that is piecewise H1/Hdiv/HCurl). If no name is provided it is generated automatically from FEType. If no AT is provided, the space is generated ON_CELLS.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.eltype-Union{Tuple{FESpace{FEType, AT} where AT<:AbstractAssemblyType}, Tuple{FEType}} where FEType<:AbstractFiniteElement","page":"Finite Element Spaces and Arrays","title":"Base.eltype","text":"eltype(_::FESpace{FEType<:AbstractFiniteElement, AT} where AT<:AbstractAssemblyType) -> Type{FEType} where FEType<:AbstractFiniteElement\n\n\nCustom eltype function for FESpace returns the finite element type of the finite element space.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.get!-Tuple{FESpace, Type{var\"#s208\"} where var\"#s208\"<:DofMap}","page":"Finite Element Spaces and Arrays","title":"Base.get!","text":"get!(FES::FESpace, DM::Type{var\"#s208\"} where var\"#s208\"<:DofMap) -> Any\n\n\nTo be called by getindex. This triggers lazy creation of  non-existing dofmaps\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.getindex-Tuple{FESpace, Type{var\"#s208\"} where var\"#s208\"<:DofMap}","page":"Finite Element Spaces and Arrays","title":"Base.getindex","text":"Base.getindex(FES::FESpace,DM::Type{<:DofMap})\n\nGeneric method for obtaining dofmap. This method is mutating in the sense that non-existing dofmaps are created on demand. Due to the fact that components are stored as Any the return value triggers type instability.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.setindex!-Tuple{FESpace, Any, Type{var\"#s208\"} where var\"#s208\"<:DofMap}","page":"Finite Element Spaces and Arrays","title":"Base.setindex!","text":"setindex!(FES::FESpace, v, DM::Type{var\"#s208\"} where var\"#s208\"<:DofMap) -> Any\n\n\nSet new dofmap\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Union{Tuple{FEType}, Tuple{IO, FESpace{FEType, AT} where AT<:AbstractAssemblyType}} where FEType<:AbstractFiniteElement","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FES::FESpace{FEType<:AbstractFiniteElement, AT} where AT<:AbstractAssemblyType)\n\n\nCustom show function for FESpace that prints some information and all available dofmaps.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#DofMaps","page":"Finite Element Spaces and Arrays","title":"DofMaps","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dofmaps.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.DofMap","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.DofMap","text":"abstract type DofMap <: AbstractGridAdjacency\n\nDofmaps are stored as an ExtendableGrids.AbstractGridAdjacency in the finite element space and collect information with respect to different AssemblyTypes. They are generated automatically on demand and the dofmaps associated to each subtype can be accessed via FESpace[DofMap].\n\n\n\n\n\n","category":"type"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"The following DofMap subtypes are available and are used as keys to access the dofmap via FESpace[DofMap] (which is equivalent to FESpace.dofmaps[DofMap]).","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"DofMap Explanation\nCellDofs degrees of freedom for on each cell\nFaceDofs degrees of freedom for each face\nEdgeDofs degrees of freedom for each edge (in 3D)\nBFaceDofs degrees of freedom for each boundary face\nBEdgeDofs degrees of freedom for each boundary edge (in 3D)","category":"page"},{"location":"fespace/#FEVector","page":"Finite Element Spaces and Arrays","title":"FEVector","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"A FEVector consists of FEVectorBlocks that share a common one-dimensional array. Each block is associated to a FESpace and can only write into a region of the common array specified by offsets. It also acts as a one-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fevector.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"struct FEVector{T}\n\na plain array but with an additional layer of several FEVectorBlock subdivisions each carrying coefficients for their associated FESpace\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{T}, Tuple{String, FESpace}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::FESpace) where T <: Real\n\nCreates FEVector that has one block.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{T}, Tuple{Vector{String}, Vector{var\"#s206\"} where var\"#s206\"<:FESpace}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEVector that has one block for each FESpace in FES.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVectorBlock","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVectorBlock","text":"struct FEVectorBlock{T} <: AbstractArray{T, 1}\n\nblock of an FEVector that carries coefficients for an associated FESpace and can be assigned as an AbstractArray (getindex, setindex, size, length)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.append!-Union{Tuple{T}, Tuple{FEVector{T}, String, FESpace}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"Base.append!","text":"append!(FEF::FEVector{T<:Real}, name::String, FES::FESpace)\n\n\nCustom append function for FEVector that adds a FEVectorBlock at the end.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.fill!-Tuple{FEVectorBlock, Any}","page":"Finite Element Spaces and Arrays","title":"Base.fill!","text":"fill!(b::FEVectorBlock, value)\n\n\nCustom fill function for FEVectorBlock (only fills the block, not the complete FEVector).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Tuple{FEVectorBlock}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"length(FEB::FEVectorBlock) -> Int64\n\n\nCustom length function for FEVectorBlock that gives the coressponding number of degrees of freedoms of the associated FESpace\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Tuple{FEVector}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"length(FEF::FEVector) -> Int64\n\n\nCustom length function for FEVector that gives the number of defined FEMatrixBlocks in it\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Tuple{IO, FEVector}","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEF::FEVector)\n\n\nCustom show function for FEVector that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock, AbstractVector{T} where T}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::AbstractVector{T} where T; factor)\n\n\nAdds Array b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock, FEVectorBlock}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::FEVectorBlock; factor)\n\n\nAdds FEVectorBlock b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#FEMatrix","page":"Finite Element Spaces and Arrays","title":"FEMatrix","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"A FEMatrix consists of FEMatrixBlocks that share a common ExtendableSparseMatrix. Each block is associated to two FESpaces and can only write into a submatrix of the common sparse matrix specified by offsets. It also acts as a two-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fematrix.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"struct FEMatrix{T, nbrow, nbcol, nbtotal}\n\nan AbstractMatrix (e.g. an ExtendableSparseMatrix) with an additional layer of several FEMatrixBlock subdivisions each carrying coefficients for their associated pair of FESpaces\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String, FESpace, FESpace}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FESX::FESpace, FESY::FESpace) where T <: Real\n\nCreates FEMatrix with one rectangular block (FESX,FESY).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String, FESpace}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FES::FESpace) where T <: Real\n\nCreates FEMatrix with one square block (FES,FES).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String, Vector{FESpace}}} where T<:Real","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEMatrix with blocks (FESX[i],FESY[j]) (enumerated row-wise).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrixBlock","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrixBlock","text":"struct FEMatrixBlock{T} <: AbstractArray{T, 2}\n\nblock of an FEMatrix that carries coefficients for an associated pair of FESpaces and can be assigned as an two-dimensional AbstractArray (getindex, setindex, size)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.fill!-Tuple{FEMatrixBlock, Any}","page":"Finite Element Spaces and Arrays","title":"Base.fill!","text":"fill!(B::FEMatrixBlock, value)\n\n\nCustom fill function for FEMatrixBlock (only fills the block, not the complete FEMatrix).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Tuple{FEMatrix}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"length(FEF::FEMatrix) -> Any\n\n\nCustom length function for FEMatrix that gives the total number of defined FEMatrixBlocks in it\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Union{Tuple{nbrow}, Tuple{T}, Tuple{IO, FEMatrix{T, nbrow, nbcol, nbtotal} where {nbcol, nbtotal}}} where {T, nbrow}","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEM::FEMatrix{T, nbrow, nbcol, nbtotal} where {nbcol, nbtotal})\n\n\nCustom show function for FEMatrix that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.size-Tuple{FEMatrixBlock}","page":"Finite Element Spaces and Arrays","title":"Base.size","text":"size(FEB::FEMatrixBlock) -> Vector{Int64}\n\n\nCustom size function for FEMatrixBlock that gives the size of the block (that coressponds to the number of degrees of freedoms in X and Y)\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.size-Tuple{FEMatrix}","page":"Finite Element Spaces and Arrays","title":"Base.size","text":"size(FEF::FEMatrix) -> Vector{_A} where _A\n\n\nCustom size function for FEMatrix that gives the number of rows and columns of the FEBlock overlay\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.add!-Union{Tuple{T}, Tuple{FEMatrix{T, nbrow, nbcol, nbtotal} where {nbrow, nbcol, nbtotal}, FEMatrix{T, nbrow, nbcol, nbtotal} where {nbrow, nbcol, nbtotal}}} where T","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.add!","text":"add!(A::FEMatrix{T, nbrow, nbcol, nbtotal} where {nbrow, nbcol, nbtotal}, B::FEMatrix{T, nbrow, nbcol, nbtotal} where {nbrow, nbcol, nbtotal}; factor, transpose)\n\n\nAdds FEMatrix B to FEMatrix A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrixBlock{Tv}, ExtendableSparseMatrix{Tv, Ti}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock{Tv}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}; factor, transpose)\n\n\nAdds ExtendableSparseMatrix B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Union{Tuple{T}, Tuple{FEMatrixBlock{T}, FEMatrixBlock{T}}} where T","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock{T}, B::FEMatrixBlock{T}; factor, transpose)\n\n\nAdds FEMatrixBlock B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEVectorBlock{Tv}, ExtendableSparseMatrix{Tv, Ti}, FEVectorBlock}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock{Tv}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b::FEVectorBlock; factor)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{T}, Tuple{AbstractVector{T}, FEMatrixBlock{T}, AbstractVector{T} where T}} where T","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::AbstractArray{T, 1}, B::FEMatrixBlock{T}, b::AbstractVector{T} where T; factor, transposed)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{T}, Tuple{FEVectorBlock{T}, FEMatrixBlock{T}, FEVectorBlock}} where T","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock{T}, B::FEMatrixBlock{T}, b::FEVectorBlock; factor, transposed)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.ldrdmatmul-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractVector{Tv}, AbstractVector{Tv}, ExtendableSparseMatrix{Tv, Ti}, AbstractVector{Tv}, AbstractVector{Tv}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.ldrdmatmul","text":"ldrdmatmul(a1::AbstractArray{Tv, 1}, a2::AbstractArray{Tv, 1}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b1::AbstractArray{Tv, 1}, b2::AbstractArray{Tv, 1}; factor) -> Any\n\n\nComputes vector'-matrix-vector product (a1-a2)'B(b1-b2).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.lrmatmul-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractVector{Tv}, ExtendableSparseMatrix{Tv, Ti}, AbstractVector{Tv}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.lrmatmul","text":"lrmatmul(a::AbstractArray{Tv, 1}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b::AbstractArray{Tv, 1}; factor) -> Any\n\n\nComputes vector'-matrix-vector product a'Bb.\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#FE-Basis-Evaluators","page":"FE Basis Evaluators","title":"FE Basis Evaluators","text":"","category":"section"},{"location":"febasisevaluators/","page":"FE Basis Evaluators","title":"FE Basis Evaluators","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"febasisevaluator.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.FEBasisEvaluator-Union{Tuple{AT}, Tuple{FEOP}, Tuple{EG}, Tuple{FEType}, Tuple{T}, Tuple{FESpace, Array{Vector{T}, 1}}} where {T, FEType<:AbstractFiniteElement, EG<:AbstractElementGeometry, FEOP<:??, AT<:AbstractAssemblyType}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.FEBasisEvaluator","text":"    FEBasisEvaluator{T <: Real,FEType <: AbstractFiniteElement,EG <: AbstractElementGeometry,FEOP <: AbstractFunctionOperator,AT <: AbstractAssemblyType}(FES::FESpace, qf::QuadratureRule)\n\nConstructor for an evaluator for the basis of the specified FEType (with matching FESpace FES) of the function operator FEOP on the given element geometry EG beeing of AssemblyType AT at the points of the quadrature rule qf.\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.eval!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{AT}, Tuple{EG}, Tuple{FEOP}, Tuple{FEType}, Tuple{T}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64, Int64, Any}} where {T, FEType, FEOP, EG, AT, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.eval!","text":"    eval!(result, FEBE::FEBasisEvaluator, j::Int, i::Int, offset::Int = 0, factor = 1)\n\nEvaluate the j-th basis function of the FEBasisEvaluator at the i-th quadrature point adn writes the (possibly vector-valued) evaluation into result (beginning at offset and with the specified factor).\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.eval!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{AT}, Tuple{EG}, Tuple{FEOP}, Tuple{FEType}, Tuple{T}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64, Any}, Tuple{Vector{T}, FEBasisEvaluator{T, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64, Any, Any}} where {T, FEType, FEOP, EG, AT, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.eval!","text":"    eval!(result, FEBE::FEBasisEvaluator, j::Int, i::Int, offset::Int = 0, factor = 1)\n\nEvaluates the linear combination of the basisfunction with given coefficients at the i-th quadrature point and writes the (possibly vector-valued) evaluation into result (beginning at offset and with the specified factor).\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.update!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{T}, Tuple{GradientRobustMultiPhysics.StandardFEBasisEvaluator{T, var\"#s184\", var\"#s183\", var\"#s182\", var\"#s181\", edim, ncomponents, ndofs, ndofs_all, nentries} where {var\"#s184\"<:AbstractH1FiniteElement, var\"#s183\"<:AbstractElementGeometry, var\"#s182\"<:id, var\"#s181\"<:AbstractAssemblyType, ndofs_all, nentries}, Any}} where {T, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.update!","text":"    update!(FEBE::FEBasisEvaluator, item::Int)\n\nUpdate the FEBasisEvaluator on the given item number of the grid items associated to the AssemblyType. During the update the FEBasisevaluator computes all evaluations of all basis functions at all quadrature points and stores them in FEBE.cvals. From there they can be accessed directly or via the eval! functions.\n\n\n\n\n\n","category":"method"},{"location":"itemintegrators/#Item-Integrators","page":"Item Integrators","title":"Item Integrators","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Item integrators are one of the Assembly Patterns that help to compute certain quantities of the Solution, like a posteriori errors estimators, norms, drag/lift coefficients or other statistics.","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"ItemIntegrator\nL2ErrorIntegrator\nL2NormIntegrator\nL2DifferenceIntegrator","category":"page"},{"location":"itemintegrators/#GradientRobustMultiPhysics.ItemIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.ItemIntegrator","text":"function ItemIntegrator(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    name = \"ItemIntegrator\",\n    regions::Array{Int,1} = [0])\n\nCreates an ItemIntegrator assembly pattern with the given operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2ErrorIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2ErrorIntegrator","text":"function L2ErrorIntegrator(\n    T::Type{<:Real},\n    compare_data::UserData{AbstractDataFunction}, # can be omitted if zero\n    operator::Type{<:AbstractFunctionOperator};\n    quadorder = \"auto\",\n    name = \"auto\",\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    time = 0)\n\nCreates an ItemIntegrator that compares FEVectorBlock operator-evaluations against the given compare_data and returns the L2-error.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2NormIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2NormIntegrator","text":"L2NormIntegrator(\n    T::Type{<:Real},\n    ncomponents::Int,\n    operator::Type{<:AbstractFunctionOperator};\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    name = \"L2 norm\",\n    quadorder = 2,\n    regions = [0])\n\nCreates an ItemIntegrator that computes the L2 norm of an operator evaluation where ncomponents is the expected length of the operator evaluation.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2DifferenceIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2DifferenceIntegrator","text":"function L2DifferenceIntegrator(\n    T::Type{<:Real},\n    ncomponents::Int,\n    operator::Union{Type{<:AbstractFunctionOperator},Array{DataType,1}};\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    name = \"L2 difference\",\n    quadorder = 2,\n    regions = [0])\n\nCreates an ItemIntegrator that computes the L2 norm difference between two arguments evalauted with the same operator (or with different operators if operator is an array) where ncomponents is the expected length of each operator evaluation. Note that all arguments in an evaluation call need to be defined on the same grid !\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#Evaluation","page":"Item Integrators","title":"Evaluation","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"There are two possibilities to evaluate an ItemIntegrator, on each item (with evaluate!) or globally (with evaluate):","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"evaluate!\nevaluate","category":"page"},{"location":"itemintegrators/#GradientRobustMultiPhysics.evaluate!","page":"Item Integrators","title":"GradientRobustMultiPhysics.evaluate!","text":"function evaluate!(\n    b::AbstractArray{T,2},          # target vector\n    AP::AssemblyPattern{APT,T,AT},  # ItemIntegrator pattern\n    FEB::Array{<:FEVectorBlock,1}   # coefficients for arguments\n    where {APT <: APT_ItemIntegrator, T, AT}\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlocks FEB into given two-dimensional Array b.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.evaluate","page":"Item Integrators","title":"GradientRobustMultiPhysics.evaluate","text":"function evaluate(\n    AP::AssemblyPattern{APT,T,AT},  # ItemIntegrator pattern\n    FEB::Array{<:FEVectorBlock,1})  # coefficients for arguments\n    where {APT <: APT_ItemIntegrator, T, AT}\n\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlocks FEB, only returns accumulation over all items.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#Noteworthy-Examples","page":"Item Integrators","title":"Noteworthy Examples","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Examples 204 and A06 use ItemIntegrators for a posteriori error estimation and refinement indicators.","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Example 224 uses ItemIntegrators to calculate drag and lift coefficients.","category":"page"},{"location":"examples/Example207_StokesTransient2D/#:-Stokes-Transient-2D","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"","category":"section"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"(source code)","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"beginaligned\nmathbfu_t - mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"with (possibly time-dependent) exterior force mathbff and some viscosity parameter mu.","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"In this example we solve an analytical toy problem with prescribed solution","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"beginaligned\nmathbfu(mathbfxt)  = (1+t)(cos(x_2) sin(x_1))^T\np(mathbfx) = sin(x_1+x_2) - 2sin(1) + sin(2)\nendaligned","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"with time-dependent right-hand side and inhomogeneous Dirichlet boundary data. The example showcases the benefits of pressure-robustness in time-dependent linear Stokes problem in presence of complicated pressures and small viscosities. The problem is solved on series of finer and finer unstructured simplex meshes and compares the error of the discrete Stokes solution, an interpolation into the same space and the best-approximations into the same space. While a pressure-robust variant shows optimally converging errors close to the best-approximations, a non pressure-robust discretisations show suboptimal (or no) convergence! Compare e.g. Bernardi–Raugel and Bernardi–Raugel pressure-robust by (un)commenting the responsible lines in this example.","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"module Example207_StokesTransient2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# problem data\nfunction exact_pressure!(result,x::Array{<:Real,1})\n    result[1] = sin(x[1]+x[2]) - 2*sin(1)+sin(2)\nend\nfunction exact_velocity!(result,x::Array{<:Real,1},t::Real)\n    result[1] = (1+t)*cos(x[2]);\n    result[2] = (1+t)*sin(x[1]);\nend\nfunction exact_velocity_gradient!(result,x::Array{<:Real,1},t::Real)\n    result[1] = 0.0\n    result[2] = -(1+t)*sin(x[2]);\n    result[3] = (1+t)*cos(x[1]);\n    result[4] = 0.0;\nend\nfunction exact_rhs!(viscosity)\n    function closure(result,x::Array{<:Real,1},t::Real)\n        result[1] = viscosity*(1+t)*cos(x[2]) + cos(x[1]+x[2]) + cos(x[2])\n        result[2] = viscosity*(1+t)*sin(x[1]) + cos(x[1]+x[2]) + sin(x[1])\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, nlevels = 4, timestep = 1e-3, T = 1e-2, viscosity = 1e-6, graddiv = 0)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D);\n\n    # choose one of these (inf-sup stable) finite element type pairs\n    reconstruct = false # do not change\n    broken_p = false # is pressure space broken ?\n    #FETypes = [H1P2{2,2}, H1P1{1}] # Taylor--Hood\n    #FETypes = [H1P2B{2,2}, H1P1{1}]; broken_p = true # P2-bubble\n    #FETypes = [H1CR{2}, H1P0{1}]; broken_p = true # Crouzeix--Raviart\n    #FETypes = [H1CR{2}, H1P0{1}]; broken_p = true; reconstruct = true # Crouzeix-Raviart gradient-robust\n    #FETypes = [H1MINI{2,2}, H1P1{1}] # MINI element on triangles only\n    #FETypes = [H1MINI{2,2}, H1CR{1}] # MINI element on triangles/quads\n    #FETypes = [H1BR{2}, H1P0{1}]; broken_p = true # Bernardi--Raugel\n    FETypes = [H1BR{2}, H1P0{1}]; broken_p = true; reconstruct = true # Bernardi--Raugel gradient-robust\n\n    #####################################################################################\n\n    # set testfunction operator for certain testfunctions\n    # (pressure-robustness chooses a reconstruction that can exploit the L2-orthogonality onto gradients)\n    testfunction_operator = reconstruct ? ReconstructionIdentity{HDIVBDM1{2}} : Identity\n\n    # negotiate data functions to the package\n    # note that dependencies \"XT\" marks the function to be x- and t-dependent\n    # that causes the solver to automatically reassemble associated operators in each time step\n    user_function_velocity = DataFunction(exact_velocity!, [2,2]; name = \"u_exact\", dependencies = \"XT\", quadorder = 5)\n    user_function_pressure = DataFunction(exact_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_velocity_gradient = DataFunction(exact_velocity_gradient!, [4,2]; name = \"grad(u_exact)\", dependencies = \"XT\", quadorder = 4)\n    user_function_rhs = DataFunction(exact_rhs!(viscosity), [2,2]; name = \"f\", dependencies = \"XT\", quadorder = 5)\n\n    # load Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function_velocity)\n    add_rhsdata!(Problem, 1, RhsOperator(testfunction_operator, [1], user_function_rhs))\n\n    # add grad-div stabilisation\n    if graddiv > 0\n        add_operator!(Problem, [1,1], AbstractBilinearForm(\"graddiv-stabilisation (div x div)\", Divergence, Divergence, MultiplyScalarAction(graddiv)))\n    end\n\n    # define bestapproximation problems\n    L2PressureBestapproximationProblem = L2BestapproximationProblem(user_function_pressure; bestapprox_boundary_regions = [])\n    L2VelocityBestapproximationProblem = L2BestapproximationProblem(user_function_velocity; bestapprox_boundary_regions = [1,2,3,4])\n    H1VelocityBestapproximationProblem = H1BestapproximationProblem(user_function_velocity_gradient, user_function_velocity; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation and arrays to store them\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity, Identity; time = T)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, user_function_pressure, Identity)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity_gradient, Gradient; time = T)\n    Results = zeros(Float64, nlevels, 6)\n    NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpaces\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = broken_p)]\n\n        # generate solution fector\n        Solution = FEVector{Float64}([\"velocity\", \"pressure\"],FES)\n\n        # set initial solution ( = bestapproximation at time 0)\n        L2VelocityBestapproximation = FEVector{Float64}(\"L2-Bestapproximation velocity\",FES[1])\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem; time = 0)\n        Solution[1][:] = L2VelocityBestapproximation[1][:]\n\n        # generate time-dependent solver and chance rhs data\n        TCS = TimeControlSolver(Problem, Solution, CrankNicolson; timedependent_equations = [1], skip_update = [-1], dt_testfunction_operator = [testfunction_operator])\n        advance_until_time!(TCS, timestep, T)\n\n        # solve bestapproximation problems at final time for comparison\n        L2PressureBestapproximation = FEVector{Float64}(\"L2-Bestapproximation pressure\",FES[2])\n        H1VelocityBestapproximation = FEVector{Float64}(\"H1-Bestapproximation velocity\",FES[1])\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem; time = T)\n        solve!(L2PressureBestapproximation, L2PressureBestapproximationProblem)\n        solve!(H1VelocityBestapproximation, H1VelocityBestapproximationProblem; time = T)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2VelocityErrorEvaluator,L2VelocityBestapproximation[1]))\n        Results[level,3] = sqrt(evaluate(L2PressureErrorEvaluator,Solution[2]))\n        Results[level,4] = sqrt(evaluate(L2PressureErrorEvaluator,L2PressureBestapproximation[1]))\n        Results[level,5] = sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1]))\n        Results[level,6] = sqrt(evaluate(H1VelocityErrorEvaluator,H1VelocityBestapproximation[1]))\n    end\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results[:,1:2]; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_h||\", \"||u-Πu||\"])\n    print_convergencehistory(NDofs, Results[:,3:4]; X_to_h = X -> X.^(-1/2), ylabels = [\"||p-p_h||\", \"||p-πp||\"])\n    print_convergencehistory(NDofs, Results[:,5:6]; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_h)||\", \"||∇(u-Su)||\"])\nend\n\nend","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"Default output:","category":"page"},{"location":"examples/Example207_StokesTransient2D/","page":"207 : Stokes Transient 2D","title":"207 : Stokes Transient 2D","text":"julia> Example207_StokesTransient2D.main()\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)      velocity    pressure  \n\t     1  | 1.0000e-03 | 1.4466e-13 | 4.519e+00 | 4.9651e-03  3.0773e+00 \n\t     2  | 2.0000e-03 | 1.5937e-13 | 2.493e-02 | 3.6022e-03  2.3073e+00 \n\t     3  | 3.0000e-03 | 1.3691e-13 | 1.418e-03 | 3.6022e-03  1.1203e-10 \n\t     4  | 4.0000e-03 | 1.4458e-13 | 1.388e-03 | 3.6022e-03  1.1174e-10 \n\t     5  | 5.0000e-03 | 1.2235e-13 | 1.873e-03 | 3.6022e-03  1.1206e-10 \n\t     6  | 6.0000e-03 | 1.7675e-13 | 1.491e-03 | 3.6022e-03  1.1177e-10 \n\t     7  | 7.0000e-03 | 1.3755e-13 | 1.439e-03 | 3.6022e-03  1.1215e-10 \n\t     8  | 8.0000e-03 | 1.3359e-13 | 1.380e-03 | 3.6022e-03  1.1180e-10 \n\t     9  | 9.0000e-03 | 1.7021e-13 | 1.375e-03 | 3.6022e-03  1.1212e-10 \n\t    10  | 1.0000e-02 | 1.5510e-13 | 1.398e-03 | 3.6022e-03  1.1177e-10 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)      velocity    pressure  \n\t     1  | 1.0000e-03 | 8.0765e-14 | 5.504e-03 | 5.6703e-03  2.8195e+00 \n\t     2  | 2.0000e-03 | 9.0578e-14 | 3.099e-03 | 6.4012e-03  1.1598e+00 \n\t     3  | 3.0000e-03 | 8.4737e-14 | 3.091e-02 | 6.4012e-03  1.4684e-10 \n\t     4  | 4.0000e-03 | 9.2578e-14 | 3.633e-03 | 6.4012e-03  1.4512e-10 \n\t     5  | 5.0000e-03 | 8.3924e-14 | 3.274e-03 | 6.4012e-03  1.4607e-10 \n\t     6  | 6.0000e-03 | 8.5502e-14 | 3.111e-03 | 6.4012e-03  1.4581e-10 \n\t     7  | 7.0000e-03 | 8.3046e-14 | 3.108e-03 | 6.4012e-03  1.4590e-10 \n\t     8  | 8.0000e-03 | 8.4320e-14 | 3.242e-03 | 6.4012e-03  1.4597e-10 \n\t     9  | 9.0000e-03 | 8.1094e-14 | 3.151e-03 | 6.4012e-03  1.4626e-10 \n\t    10  | 1.0000e-02 | 7.8020e-14 | 3.104e-03 | 6.4012e-03  1.4520e-10 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)      velocity    pressure  \n\t     1  | 1.0000e-03 | 4.3949e-14 | 1.851e-02 | 1.1430e-02  4.0417e+00 \n\t     2  | 2.0000e-03 | 4.2635e-14 | 8.910e-03 | 1.2040e-02  5.7953e-01 \n\t     3  | 3.0000e-03 | 4.3319e-14 | 9.451e-03 | 1.2040e-02  9.5532e-11 \n\t     4  | 4.0000e-03 | 4.3968e-14 | 9.017e-03 | 1.2040e-02  9.4340e-11 \n\t     5  | 5.0000e-03 | 4.1433e-14 | 9.221e-03 | 1.2040e-02  9.5695e-11 \n\t     6  | 6.0000e-03 | 4.5165e-14 | 9.115e-03 | 1.2040e-02  9.4537e-11 \n\t     7  | 7.0000e-03 | 4.1895e-14 | 1.022e-02 | 1.2040e-02  9.5578e-11 \n\t     8  | 8.0000e-03 | 4.0827e-14 | 1.162e-02 | 1.2040e-02  9.4772e-11 \n\t     9  | 9.0000e-03 | 4.6319e-14 | 1.061e-02 | 1.2040e-02  9.5622e-11 \n\t    10  | 1.0000e-02 | 4.2196e-14 | 1.015e-02 | 1.2040e-02  9.4840e-11 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)      velocity    pressure  \n\t     1  | 1.0000e-03 | 2.2255e-14 | 7.544e-02 | 2.2994e-02  7.3187e+00 \n\t     2  | 2.0000e-03 | 2.2382e-14 | 3.473e-02 | 2.3341e-02  2.8899e-01 \n\t     3  | 3.0000e-03 | 2.2497e-14 | 3.357e-02 | 2.3341e-02  6.5748e-09 \n\t     4  | 4.0000e-03 | 2.2928e-14 | 3.319e-02 | 2.3341e-02  6.5539e-09 \n\t     5  | 5.0000e-03 | 2.2558e-14 | 3.260e-02 | 2.3341e-02  6.5258e-09 \n\t     6  | 6.0000e-03 | 2.2094e-14 | 3.326e-02 | 2.3341e-02  6.5025e-09 \n\t     7  | 7.0000e-03 | 2.2223e-14 | 3.359e-02 | 2.3341e-02  6.4759e-09 \n\t     8  | 8.0000e-03 | 2.2153e-14 | 3.328e-02 | 2.3341e-02  6.4539e-09 \n\t     9  | 9.0000e-03 | 2.2132e-14 | 3.256e-02 | 2.3341e-02  6.4247e-09 \n\t    10  | 1.0000e-02 | 2.2167e-14 | 3.616e-02 | 2.3341e-02  6.4064e-09 \n\n    ndofs   |      ||u-u_h||       order  |      ||u-Πu||        order  |\n============|=============================|=============================|\n        70  |     2.83479e-03      0.000  |     2.16474e-03      0.000  |\n       250  |     6.94501e-04      2.210  |     5.11118e-04      2.268  |\n       946  |     1.70437e-04      2.111  |     1.21282e-04      2.162  |\n      3682  |     4.22288e-05      2.053  |     2.92850e-05      2.091  |\n\n    ndofs   |      ||p-p_h||       order  |      ||p-πp||        order  |\n============|=============================|=============================|\n        70  |     6.98506e-02      0.000  |     6.98503e-02      0.000  |\n       250  |     3.49744e-02      1.087  |     3.49744e-02      1.087  |\n       946  |     1.74943e-02      1.041  |     1.74943e-02      1.041  |\n      3682  |     8.74806e-03      1.020  |     8.74806e-03      1.020  |\n\n    ndofs   |    ||∇(u-u_h)||      order  |     ||∇(u-Su)||      order  |\n============|=============================|=============================|\n        70  |     5.12836e-02      0.000  |     4.81476e-02      0.000  |\n       250  |     2.59216e-02      1.072  |     2.38875e-02      1.101  |\n       946  |     1.30868e-02      1.027  |     1.18665e-02      1.051  |\n      3682  |     6.52912e-03      1.023  |     5.90884e-03      1.026  |","category":"page"},{"location":"boundarydata/#Boundary-Data","page":"Boundary Data","title":"Boundary Data","text":"","category":"section"},{"location":"boundarydata/#Dirichlet-Boundary-Data","page":"Boundary Data","title":"Dirichlet Boundary Data","text":"","category":"section"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"BoundaryOperators carry the boundary data for each unknown. Each regions can have a different AbstractBoundaryType and an associated Data Function. This data function than will now if it depends on space or time variables and will assemble itself accordingly.","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"AbstractBoundaryType Subtypes causes\nDirichletBoundary  \n BestapproxDirichletBoundary computation of Dirichlet data by bestapproximation along boundary faces\n InterpolateDirichletBoundary computation of Dirichlet data by interpolation along boundary faces\n HomogeneousDirichletBoundary zero Dirichlet data on all dofs","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"BoundaryOperator\nadd_boundarydata!","category":"page"},{"location":"boundarydata/#GradientRobustMultiPhysics.BoundaryOperator","page":"Boundary Data","title":"GradientRobustMultiPhysics.BoundaryOperator","text":"mutable struct BoundaryOperator <: AbstractPDEOperator\n\ncollects boundary data for a component of the system and allows to specify a AbstractBoundaryType for each boundary region so far only DirichletBoundary types (see above)\n\n\n\n\n\n","category":"type"},{"location":"boundarydata/#GradientRobustMultiPhysics.add_boundarydata!","page":"Boundary Data","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions, btype::Type{var\"#s2496\"} where var\"#s2496\"<:AbstractBoundaryType; data)\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nIf timedependent == true, that data function depends also on time t and is reassembled in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"function"},{"location":"boundarydata/#Other-Boundary-Data","page":"Boundary Data","title":"Other Boundary Data","text":"","category":"section"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"NeumannBoundary can be implemented as a RhsOperator with AT = ON_BFACES","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"PeriodicBoundary can be implemented as a CombineDofs <: AbstractGlobalConstraint","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"SymmetryBoundary can be implemented by penalisation as a AbstractBilinearForm on AT = ON_BFACES and specified boundary regions with operator NormalFlux and some penalty factor.","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/#A03-:-Commuting-Interpolators-3D","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"","category":"section"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"(source code)","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"This example verifies a structural property of the Hcurl and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"mathrmCurl(I_mathrmN_k-1psi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"for the standard Nedelec interpolator I_mathrmN_k-1 and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 (higher order spaces are tested as well as soon as they are available).","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"module ExampleA03_CommutingInterpolators3D\nusing GradientRobustMultiPhysics\n\n# define some function\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[2]^2 + x[3]\n    result[2] = x[1]^3\n    result[3] = 1 + x[3]^2\nend\n# and its Curl3D\nfunction exact_curl!(result,x::Array{<:Real,1})\n    result[1] = 0\n    result[2] = 1\n    result[3] = 3*x[1]^2 - 2*x[2]\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 1, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [3,3]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_curl = DataFunction(exact_curl!, [3,3]; name = \"Curl(u_exact)\", dependencies = \"X\", quadorder = 2)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [HCURLN0{3},HDIVRT0{3}]; testFE = H1P0{3}\n    end\n\n    # do the Hcurl interpolation of the function\n    FESH1 = FESpace{FE[1]}(xgrid)\n    HcurlInterpolation = FEVector{Float64}(\"Hcurl-Interpolation\",FESH1)\n    interpolate!(HcurlInterpolation[1], user_function)\n\n    # do the Hdiv interpolation of the Curl of the function\n    # since integrals over faces have to be computed exactly we need to tune the quadrature order\n    FESHdiv = FESpace{FE[2]}(xgrid)\n    HdivCurlInterpolation = FEVector{Float64}(\"Hdiv-Interpolation\",FESHdiv)\n    interpolate!(HdivCurlInterpolation[1], user_function_curl)\n\n    # Checking the identity:\n    # Both sides of the identity are finite element function of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # first: generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector{Float64}(\"ErrorVector\",FEStest)\n\n    # Define bilinear forms that represents testing each side of the identity with the testspace functions\n    BLF1 = BilinearForm(Float64, ON_CELLS, [FEStest, FESHdiv], [Identity, Identity])\n    BLF2 = BilinearForm(Float64, ON_CELLS, [FEStest, FESH1], [Identity, Curl3D])\n\n    # evaluate the bilinear forms in the respective interpolations and subtract them from each other\n    # note that in these calls always the second argument of the bilinearform is fixed by the given FEVectorBlock\n    assemble!(error[1], BLF1, HdivCurlInterpolation[1]; fixed_arguments = [2])\n    assemble!(error[1], BLF2, HcurlInterpolation[1]; factor = -1, fixed_arguments = [2])\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"Default output:","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"julia> ExampleA03_CommutingInterpolators3D.main()\nerror(Curl(I_HCURLN0{3}(psi) - I_HDIVRT0{3}(Curl(psi))) = 3.821945511051252e-17","category":"page"},{"location":"viewers/#Viewers","page":"Viewers","title":"Viewers","text":"","category":"section"},{"location":"viewers/","page":"Viewers","title":"Viewers","text":"Plotting is possible e.g. via calculation of nodal values and the plot routines from ExtendableGrids.jl.","category":"page"},{"location":"viewers/","page":"Viewers","title":"Viewers","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"plots.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"viewers/#GradientRobustMultiPhysics.plot-Tuple{ExtendableGrid, Vector{var\"#s2480\"} where var\"#s2480\"<:FEVectorBlock, Vector{DataType}}","page":"Viewers","title":"GradientRobustMultiPhysics.plot","text":"plot(xgrid::ExtendableGrid, Sources::Vector{var\"#s2480\"} where var\"#s2480\"<:FEVectorBlock, operators::Vector{DataType}; add_grid_plot, Plotter, subplots_per_column, use_subplots, resolution, maintitle, kwargs...)\n\n\nPlots scalar plots of nodval values of operators applied to the given vector of FEVectorBlocks (Sources) (this meands operator[j] is applied to block j) via GridVisualizer (see documentation there for possible kwargs), either in one window with subplots (default) or several single plots. If the operator evaluation is vector-valued the absolute value of this vector is plotted (quiver plots not supported by this interface yet).\n\nPlotter = PyPlot should work in 2D Plotter = GLMakie should work in 3D (but only with a single plot currently)\n\n\n\n\n\n","category":"method"},{"location":"examples/Example210_NonlinearPoisson2D/#:-Nonlinear-Poisson-Problem-2D","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"","category":"section"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"This example computes the solution u of the nonlinear Poisson problem","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"beginaligned\n-mathrmdiv(q(u) nabla u)  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"with some right-hand side f on a series of uniform refinements of the unit square Omega. The quantity q(u) makes the problem nonlinear and we consider the two possibilites","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"beginaligned\n    q_1(u) = 1 + u^2\n    q_2(u) = (kappa + lvert nabla u rvert)^p-2\nendaligned","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"where the second one is known is the p-Laplacian (plus some small regularisation kappa geq 0 to make it solvable with the Newton solver).","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"This example demonstrates the automatic differentation feature and explains how to setup a nonlinear expression and how to assign it to the problem description. The setup is tested with some manufactured quadratic solution.","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"Also the factorization in the linear solver can be changed to anything <:ExtendableSparse.AbstractFactorization (but not every one will work in this example).","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"module Example210_NonlinearPoisson2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableSparse\nusing Printf\n\n# problem data\nfunction exact_function!(result,x)\n    result[1] = x[1]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x)\n    result[1] = x[2]\n    result[2] = x[1]\n    return nothing\nend\nfunction rhs!(q,p,κ)\n    function closure(result,x)\n        if q == 1\n            result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div((1+u^2)*grad(u))\n        elseif q == 2\n            result[1] = -2*(p-2) * (κ + x[1]^2+x[2]^2)^((p-2)/2-1) * x[1] * x[2] # = -div((κ + |grad(u)|)^p-2*grad(u))\n        end\n        return nothing\n    end\n    return closure\nend\nfunction diffusion_kernel1!(result::Array{<:Real,1}, input::Array{<:Real,1})\n    # input[1,2:3] = [u, grad(u)]\n    result[1] = (1+input[1]^2)*input[2]\n    result[2] = (1+input[1]^2)*input[3]\n    return nothing\nend\nfunction diffusion_kernel2!(p,κ)\n    function closure(result::Array{<:Real,1}, input::Array{<:Real,1})\n        # input[1:2] = [grad(u)]\n        # we use result[1] as temporary storage to compute (κ + |∇u|)^(p-2)\n        result[1] = (κ + input[1]^2 + input[2]^2)^((p-2)/2)\n        result[2] = result[1] * input[2]\n        result[1] = result[1] * input[1]\n        return nothing\n    end\n    return closure\nend\n\n# everything is wrapped in a main function\n# default argument trigger P1-FEM calculation, you might also want to try H1P2{1,2}\nfunction main(; q = 1, p = 2.7, κ = 0.0001, Plotter = nothing, verbosity = 0, nlevels = 6, FEType = H1P1{1}, testmode = false, factorization = ExtendableSparse.LUFactorization)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = grid_unitsquare(Triangle2D)\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_gradient = DataFunction(exact_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction(rhs!(q,p,κ), [1,2]; dependencies = \"X\", name = \"f\", quadorder = 4)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    if q == 1\n        nonlin_diffusion = GenerateNonlinearForm(\"(1+u^2) ∇u ⋅ ∇v\", [Identity, Gradient], [1,1], Gradient, diffusion_kernel1!, [2,3]; quadorder = 4, ADnewton = true)\n    elseif q == 2\n        nonlin_diffusion = GenerateNonlinearForm(\"(κ+|∇u|^2) ∇u ⋅ ∇v\", [Gradient], [1], Gradient, diffusion_kernel2!(p,κ), [2,2]; quadorder = 5, ADnewton = true)\n    else\n        @error \"only q ∈ [1,2] !\"\n    end\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs; store = true))\n    @show Problem\n\n    # prepare error calculation\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    NDofs = zeros(Int,nlevels)\n    Results = zeros(Float64,nlevels,2)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # create finite element space and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # solve\n        @show Solution\n        solve!(Solution, Problem; linsolver = factorization)\n\n        # calculate L2 and H1 error and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,Solution[1]))\n    end\n\n    if testmode == true\n        return Results[end,2]\n    else\n        # plot\n        GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\n\n        # print/plot convergence history\n        print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n        plot_convergencehistory(NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    end\nend\n\n# test function that is called by test unit\n# tests if the above problem is solved exactly by P2-FEM\nfunction test()\n    return main(; FEType = H1P2{1,2}, q = 1, nlevels = 1, testmode = true)\nend\n\nend","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"julia> Example210_NonlinearPoisson2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = nonlinear Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | u / nonlinear Poisson equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (1+u^2) ∇u ⋅ ∇v [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (1+u^2) ∇u ⋅ ∇v [AD-Newton] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n            | f⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n\nProblem = \nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |      13 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.276908e-16 | 1.879348e-01\n\t      2   | 2.415941e-16 | 2.427676e-03\n\t      3   | 2.586077e-16 | 3.580510e-07\n\t      4   | 6.032275e-16 | 8.010898e-15\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |      41 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 5.090761e-16 | 1.552235e-01\n\t      2   | 1.484570e-15 | 1.898915e-03\n\t      3   | 1.106914e-15 | 4.461316e-07\n\t      4   | 9.502417e-16 | 2.342188e-14\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |     145 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.464268e-15 | 9.834582e-02\n\t      2   | 2.233430e-15 | 1.307935e-03\n\t      3   | 3.254315e-15 | 4.214647e-07\n\t      4   | 2.580234e-15 | 2.988996e-14\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |     545 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 2.434626e-15 | 5.522608e-02\n\t      2   | 3.915451e-15 | 8.487585e-04\n\t      3   | 4.838680e-15 | 2.555420e-07\n\t      4   | 4.774031e-15 | 2.301925e-14\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    2113 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 4.931135e-15 | 2.924738e-02\n\t      2   | 9.727530e-15 | 4.905172e-04\n\t      3   | 9.447878e-15 | 1.346748e-07\n\t      4   | 9.658176e-15 | 1.975828e-14\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    8321 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 9.796520e-15 | 1.504798e-02\n\t      2   | 1.912058e-14 | 2.640269e-04\n\t      3   | 1.924815e-14 | 6.824838e-08\n\t      4   | 1.929606e-14 | 3.303793e-14\n\n\n    ndofs   |    || u - u_h ||     order  |  || ∇(u - u_h) ||    order  |\n============|=============================|=============================|\n        13  |     6.62330e-03      0.000  |     1.44378e-01      0.000  |\n        41  |     1.65803e-03      2.412  |     7.21744e-02      1.207  |\n       145  |     4.14699e-04      2.194  |     3.60851e-02      1.098  |\n       545  |     1.03688e-04      2.094  |     1.80423e-02      1.047  |\n      2113  |     2.59229e-05      2.046  |     9.02111e-03      1.023  |\n      8321  |     6.48078e-06      2.023  |     4.51055e-03      1.011  |","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D/","page":"210 : Nonlinear Poisson Problem 2D","title":"210 : Nonlinear Poisson Problem 2D","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/Example208_FlowTransport2D/#:-Flow-Transport-2D","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"","category":"section"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"(source code)","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"This example solve the Stokes problem in a Omega-shaped pipe and then uses the velocity in a transport equation for a species with a certain inlet concentration. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a species concentration mathbfc such that","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"beginaligned\n- mu Delta mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\n- kappa Delta mathbfc + mathbfu cdot nabla mathbfc  = 0\nendaligned","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"with some viscosity parameter  and diffusion parameter kappa.","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"The diffusion coefficient for the species is chosen (almost) zero such that the isolines of the concentration should stay parallel from inlet to outlet. For the discretisation of the convection term in the transport equation two three possibilities can be chosen:","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"Classical finite element discretisations mathbfu_h cdot nabla mathbfc_h\nPressure-robust finite element discretisation Pi_textreconst mathbfu_h cdot nabla mathbfc_h with some divergence-free reconstruction operator Pi_textreconst\nUpwind finite volume discretisation for kappa = 0 based on normal fluxes along the faces (also divergence-free in finite volume sense)","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"Observe that a pressure-robust Bernardi–Raugel discretisation preserves this much better than a classical Bernardi–Raugel method. For comparison also a Taylor–Hood method can be switched on which is comparable to the pressure-robust lowest-order method in this example.","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"Note, that the transport equation is very convection-dominated and no stabilisation in the finite element discretisations was used here (but instead a nonzero kappa). The results are very sensitive to kappa and may be different if a stabilisation is used (work in progress). Also note, that only the finite volume discretisation perfectly obeys the maximum principle for the concentration but the isolines do no stay parallel until the outlet is reached, possibly due to articifial diffusion.","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"module Example208_FlowTransport2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n\n# boundary data\nfunction inlet_velocity!(result,x::Array{<:Real,1})\n    result[1] = 4*x[2]*(1-x[2]);\n    result[2] = 0;\nend\nfunction inlet_concentration!(result,x::Array{<:Real,1})\n    result[1] = 1-x[2];\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nrefinements = 5, Plotter = nothing, FVtransport = true, viscosity = 1)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_upipe.sg\")\n    xgrid = uniform_refine(xgrid,nrefinements)\n\n    # choose one of these (inf-sup stable) finite element type pairs for the flow\n    #FETypes = [H1P2{2,2}, H1P1{1}]; postprocess_operator = Identity # Taylor--Hood\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = Identity # Bernardi--Raugel\n    FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVRT0{2}} # Bernardi--Raugel pressure-robust (RT0 reconstruction)\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVBDM1{2}} # Bernardi--Raugel pressure-robust (BDM1 reconstruction)\n\n    #####################################################################################\n\n    # negotiate data functions to the package\n    user_function_inlet_velocity = DataFunction(inlet_velocity!, [2,2]; name = \"inflow\", dependencies = \"X\", quadorder = 2)\n    user_function_inlet_species = DataFunction(inlet_concentration!, [1,2]; name = \"inlet concentration\", dependencies = \"X\", quadorder = 1)\n\n    # load Stokes problem prototype and assign boundary data\n    # (inlet profile in bregion 2, zero Dirichlet at walls 1 and nothing at outlet region 2)\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false, no_pressure_constraint = true)\n    Problem.name = \"Stokes + Transport\"\n    add_boundarydata!(Problem, 1, [1,3], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], BestapproxDirichletBoundary; data = user_function_inlet_velocity)\n\n    # add transport equation of species\n    add_unknown!(Problem; unknown_name = \"concentration\", equation_name = \"transport equation\")\n    if FVtransport == true\n        # finite volume upwind discretisation\n        FETypeTransport = H1P0{1}\n        add_operator!(Problem, [3,3], FVConvectionDiffusionOperator(1))\n    else\n        # finite element convection and diffusion (very small) operators\n        FETypeTransport = H1P1{1}\n        diffusion_FE = 1e-7 # diffusion coefficient for transport equation\n        add_operator!(Problem, [3,3], LaplaceOperator(diffusion_FE))\n        add_operator!(Problem, [3,3], ConvectionOperator(1, postprocess_operator, 2, 1))\n    end\n    # with boundary data (i.e. inlet concentration)\n    add_boundarydata!(Problem, 3, [4], InterpolateDirichletBoundary; data = user_function_inlet_species)\n    @show Problem\n\n    # generate FESpaces and a solution vector for all 3 unknowns\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true), FESpace{FETypeTransport}(xgrid)]\n    Solution = FEVector{Float64}([\"v_h\", \"p_h\", \"c_h\"],FES)\n\n    # first solve the decoupled flow problem equations [1,2]\n    solve!(Solution, Problem; subiterations = [[1,2]], maxiterations = 5, target_residual = 1e-12)\n\n    # then solve the transport equation [3] by finite volumes or finite elements\n    if FVtransport == true\n        # pseudo-timestepping until stationarity detected, the matrix stays the same in each iteration\n        TCS = TimeControlSolver(Problem, Solution, BackwardEuler; subiterations = [[3]], skip_update = [-1], timedependent_equations = [3])\n        advance_until_stationarity!(TCS, 10000; maxTimeSteps = 100, stationarity_threshold = 1e-12)\n    else\n        # solve directly\n        solve!(Solution, Problem; subiterations = [[3]], maxiterations = 5, target_residual = 1e-12)\n    end\n\n    # print minimal and maximal concentration to check max principle (shoule be in [0,1])\n    println(\"\\n[min(c),max(c)] = [$(minimum(Solution[3][:])),$(maximum(Solution[3][:]))]\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[3]], [Identity, Identity]; add_grid_plot = false, Plotter = Plotter, subplots_per_column = 1, resolution = (1000,800), isolines = 9)\nend\n\nend","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"Default output:","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"julia> Example208_FlowTransport2D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = Stokes + Transport\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n    [3]   | concentration / transport equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ∇(u):∇(v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,3]   | none\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | none\n    [3,2]   | none\n    [3,3]   | FVConvectionDiffusionOperator\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [4]\n                         HomogeneousDirichletBoundary -> [1, 3]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : InterpolateDirichletBoundary -> [4]\n                         \n\nProblem = \n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 8.405365e-14 | 8.405365e-14\n\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE                      \n\t        |            |  (total)   |    (s)    |  velocity    pressure   concentrat \n\t     1  | 1.0000e+04 | 1.9936e-16 | 1.670e+00 | 0.0000e+00  0.0000e+00  7.9759e+01 \n\t     2  | 2.0000e+04 | 2.1197e-16 | 2.889e-02 | 0.0000e+00  0.0000e+00  4.3757e-01 \n\t     3  | 3.0000e+04 | 2.2461e-16 | 5.401e-03 | 0.0000e+00  0.0000e+00  1.9895e-02 \n\t     4  | 4.0000e+04 | 2.1007e-16 | 5.720e-03 | 0.0000e+00  0.0000e+00  1.0653e-03 \n\t     5  | 5.0000e+04 | 2.2269e-16 | 4.163e-03 | 0.0000e+00  0.0000e+00  5.5956e-05 \n\t     6  | 6.0000e+04 | 2.2262e-16 | 4.738e-03 | 0.0000e+00  0.0000e+00  2.9128e-06 \n\t     7  | 7.0000e+04 | 2.1006e-16 | 5.409e-03 | 0.0000e+00  0.0000e+00  1.5116e-07 \n\t     8  | 8.0000e+04 | 2.1008e-16 | 6.232e-03 | 0.0000e+00  0.0000e+00  7.8373e-09 \n\t     9  | 9.0000e+04 | 2.1006e-16 | 5.368e-03 | 0.0000e+00  0.0000e+00  4.0622e-10 \n\t    10  | 1.0000e+05 | 2.0857e-16 | 5.577e-03 | 0.0000e+00  0.0000e+00  2.1052e-11 \n\t    11  | 1.1000e+05 | 2.0905e-16 | 5.363e-03 | 0.0000e+00  0.0000e+00  1.0929e-12 \n\t    12  | 1.2000e+05 | 2.0922e-16 | 5.539e-03 | 0.0000e+00  0.0000e+00  5.4404e-14 \n\n[min(c),max(c)] = [0.020833333333327937,0.9895833333333334]","category":"page"},{"location":"examples/Example208_FlowTransport2D/","page":"208 : Flow + Transport 2D","title":"208 : Flow + Transport 2D","text":"(Image: )","category":"page"},{"location":"examples/Example101_Bestapproximation1D/#:-L2-Bestapproximation-1D","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"","category":"section"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"(source code)","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"This example computes the L2-bestapproximation of some given scalar-valued function into the piecewise quadratic continuous polynomials. Afterwards the L2 error is computed and the solution is plotted.","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"module Example101_Bestapproximation1D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# define some (vector-valued) function (to be L2-bestapproximated in this example)\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = (x[1]-1//2)*(x[1]-9//10)*(x[1]-1//3)*(x[1]-1//10)\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, h = 1e-1)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate mesh and uniform refine nrefs times\n    xgrid = simplexgrid(0:h:1)\n\n    # negotiate exact_function! to the package\n    user_function = DataFunction(exact_function!, [1,1]; name = \"u\", dependencies = \"X\", quadorder = 4)\n\n    # setup a bestapproximation problem via a predefined prototype\n    # and an L2ErrorEvaluator that can be used later to compute the L2 error\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [1,2])\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n\n    # choose some finite element type and generate a FESpace for the grid\n    # (here it is a one-dimensional H1-conforming P2 element H1P2{1,1})\n    # the broken switch toggles a broken dofmap\n    FEType = H1P2{1,1}\n    FES = FESpace{FEType}(xgrid)\n\n    # generate a solution vector and solve the problem\n    # (the verbosity argument that many functions have steers the talkativity,\n    #  the larger the number, the more details)\n    Solution = FEVector{Float64}(\"u_h\",FES)\n    solve!(Solution, Problem)\n\n    # calculate the L2 error\n    L2error = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n    println(\"\\t|| u - u_h || = $L2error\")\n\n    # to compare our discrete solution with a finer one, we interpolate the exact function\n    # again on some finer mesh and also compute the L2 error on this one\n    h = h/10\n    xgrid_fine = simplexgrid(0:h:1)\n    FES_fine = FESpace{FEType}(xgrid_fine)\n    Interpolation = FEVector{Float64}(\"u_h (fine)\",FES_fine)\n    interpolate!(Interpolation[1], ON_CELLS, user_function)\n    println(\"\\t|| u - u_h (fine) ||= $(sqrt(evaluate(L2ErrorEvaluator,Interpolation[1])))\")\n\n    # evaluate/interpolate function at nodes and plot\n    if Plotter != nothing\n        nodevals = zeros(Float64,1,size(xgrid[Coordinates],2))\n        nodevalues!(nodevals,Solution[1],FES)\n        p=GridVisualizer(Plotter=Plotter,layout=(1,1))\n        scalarplot!(p[1,1],xgrid, nodevals[1,:], color=(0,1,0), label = \"coarse approximation\")\n\n        nodevals_fine = zeros(Float64,1,size(xgrid_fine[Coordinates],2))\n        nodevalues!(nodevals_fine,Interpolation[1],FES_fine)\n        scalarplot!(p[1,1],xgrid_fine, nodevals_fine[1,:], clear = false, color = (1,0,0), label = \"fine interpolation\",show=true)\n    end\nend\n\nend","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"Default output:","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"julia> Example101_Bestapproximation1D.main()\n\t|| u - u_h || = 3.944249709670143e-5\n\t|| u - u_h (fine) ||= 4.025193150126114e-8","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"(Image: )","category":"page"},{"location":"functionoperators/#Function-Operators","page":"Function Operators","title":"Function Operators","text":"","category":"section"},{"location":"functionoperators/#Available-Operators","page":"Function Operators","title":"Available Operators","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"FunctionOperators are building blocks for the weak form and define the operations that should be applied to the trial and test functions (and their discrete representatives) inside some PDEOperator. Below is a list of currently available FunctionOperators. Note, that not all operators can be applied to all finite element types in principle, but potentially have to be understood in a broken sense and only make sense on certain parts of the mesh (e.g. NormalFlux only on a face). Also note that all evaluations are returned as a vector,  so e.g.\\ a gradient of a 2d vector-field will be a vector of length 4 (ordered component-wise).","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Function operator Description Mathematically\nIdentity identity v rightarrow v\nIdentityComponent{c} identity of c-th component v rightarrow v_c\nNormalFlux normal flux (function times normal) v rightarrow v cdot vecn\nTangentFlux tangent flux (function times tangent) v rightarrow v cdot vect\nGradient gradient/Jacobian (as a vector) v rightarrow nabla v\nSymmetricGradient symmetric part of the gradient v rightarrow Voigt(mathrmsym(nabla v))\nDivergence divergence v rightarrow mathrmdiv(v) = nabla cdot v\nCurlScalar curl operator 1D to 2D (rotated gradient) v rightarrow -dvdx_2dvdx_1\nCurl2D curl operator 2D to 1D v rightarrow dv_1dx_2 - dv_2dx_1\nCurl3D curl operator 3D to 3D v rightarrow nabla times v\nHessian Hesse matrix = all 2nd order derivatives (as a vector) v rightarrow D^2 v\nLaplacian Laplace Operator v rightarrow Delta v","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nAs each finite element type is transformed differently from the reference domain to the general domain, the evaluation of each function operator has to be implemented for each finite element class. Currently, not every function operator works in any dimension and for any finite element. More evaluations are added as soon as they are needed (and possibly upon request). Also, the function operators can be combined with user-defined actions to evaluate other operators that can be build from the ones available (e.g. the deviator).","category":"page"},{"location":"functionoperators/#Jumps-and-Averages","page":"Function Operators","title":"Jumps and Averages","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"If one of the operators above is evaluted ON_FACES for a finite element that is not continuous there, the code usual will crash or produce weird results. However, some operators can be transformed into a Jump- or Average operator and then either the jumps or the average of this operator along the face is assembled. The operator Jump(Identity) for example gives the jump of the identity evaluation on both sides of the face.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Jump\nAverage","category":"page"},{"location":"functionoperators/#GradientRobustMultiPhysics.Jump","page":"Function Operators","title":"GradientRobustMultiPhysics.Jump","text":"function Jump(::Type{<:AbstractFunctionOperator})\n\nTransforms operator inito its jump evaluation.\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/#GradientRobustMultiPhysics.Average","page":"Function Operators","title":"GradientRobustMultiPhysics.Average","text":"function Average::Type{<:AbstractFunctionOperator})\n\nTransforms operator inito its average evaluation.\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nCurrently this feature is only available for assembly on faces (2D and 3D) and certain function operators like Identity, Gradient, ReconstructionIdentity, ReconstructionGradient, NormalFlux, TangentFlux, but more are added as soon as they are needed (and possibly upon request).Also note that if a Jump or Average operator has different behaviour depending on the Assembly Pattern it is used in. Usually, the input of the action used in the assembly pattern has the evaluation on one of the two neighbours at a time, but this should be okay in a linear context. Only in ItemIntegrators the whole jump comes in. In NonlinearForms jumps and averages should better not be used currently.","category":"page"},{"location":"functionoperators/#Reconstruction-Operators","page":"Function Operators","title":"Reconstruction Operators","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"There are special operators (see Table below) that allow to evaluate a usual operator of some discrete reconstructed version of a vector-valued testfunction. These operators keep the discrete divergence exactly and so allow for gradient-robust discretisations with classical non divergence-conforming ansatz spaces. So far such operators are available for the vector-valued Crouzeix-Raviart and Bernardi–Raugel finite element types.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Function operator Description\nReconstructionIdentity{FEType} reconstruction operator into specified FEType\nReconstructionDivergence{FEType} divergence of FEType reconstruction operator\nReconstructionGradient{FEType} gradient of FEType reconstruction operator","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nCurrently this feature works with FEType = HdivRT0{d} and FEType = HdivBDM1{d} where d is the space dimension. However, solve! on a PDEDescription that includes these operators will only work if the function operators are at spots were it is applied to functions from the Bernardi–Raugel or Crouzeix-Raviart finite element space. More reconstruction operators will be implemented at some later point.","category":"page"},{"location":"functionoperators/#Operator-Pairs-(experimental)","page":"Function Operators","title":"Operator Pairs (experimental)","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Two function operators can be put into an OperatorPair so that one can provide effectively two operators in each argument of an assembly pattern. However, the user should make sure that both operators can be evaluated together reasonably (meaning both should be well-defined on the element geometries and the finite element space where the argument will be evaluated). This feature is still experimental and might have issues in some cases.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"OperatorPair","category":"page"},{"location":"functionoperators/#GradientRobustMultiPhysics.OperatorPair","page":"Function Operators","title":"GradientRobustMultiPhysics.OperatorPair","text":"abstract type OperatorPair{<:AbstractFunctionOperator,<:AbstractFunctionOperator} <: AbstractFunctionOperator\n\nallows to evaluate two operators in place of one, e.g. OperatorPair{Identity,Gradient}.\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/#Global-Constraints","page":"Global Constraints","title":"Global Constraints","text":"","category":"section"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"GlobalConstraints are additional constraints that the user does not wish to implement as a global Lagrange multiplier because it e.g. causes a dense row in the system matrix and therefore may destroy the performance of the sparse matrix routines. Such a constraint may be a fixed integral mean. Another application are periodic boundary conditions or glued-together quantities in different regions of the grid. Here a CombineDofs constraint may help.","category":"page"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"globalconstraints.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"globalconstraints/#GradientRobustMultiPhysics.CombineDofs","page":"Global Constraints","title":"GradientRobustMultiPhysics.CombineDofs","text":"struct CombineDofs <: AbstractGlobalConstraint\n\ncombines specified degrees of freedom of two unknown (can be the same), which allows to glue together different unknowns in different regions or periodic boundary conditions\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/#GradientRobustMultiPhysics.FixedIntegralMean","page":"Global Constraints","title":"GradientRobustMultiPhysics.FixedIntegralMean","text":"struct FixedIntegralMean <: AbstractGlobalConstraint\n\nfixes integral mean of the unknown to the specified value\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"add_constraint!","category":"page"},{"location":"globalconstraints/#GradientRobustMultiPhysics.add_constraint!","page":"Global Constraints","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint)\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#Assembly-Patterns","page":"Assembly Patterns","title":"Assembly Patterns","text":"","category":"section"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The definition and assembly of an operator is essentially based on Assembly Patterns and a Assembly Type to choose the geometry information needed for providing quadrature and dof handling. The assembly pattern then basically evaluates the function operators and action for the ansatz and test functions and does the quadrature-weighted accumulation into matrices or vectors that represent the operators.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Each pattern comes with a number of arguments/quantities with associated Function Operators as well as one of the Assembly Type that states whether the form is evaluated over CELLS, FACES order BFACES (see above). Important note: this assembly type is relative to the grid of the first argument of the pattern. If this argument already lives ONFACES and the pattern is also ONFACES, it will ultimatively assemble on the faces of the faces (that are the edges of the grid with these faces). Moreover, patterns can have an Action that allow to make the evaluations parameter-, region- and/or function-dependent. Each pattern then has usually on to three implementation that writes into FEMatrix or FEVector (where e.g. a subset of arguments is fixed) or evaluates the pattern in the given FEVectorBlocks.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The patterns are used to assembly the PDE operators defined in a PDE Description.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"GradientRobustMultiPhysics.AssemblyPattern{APT <: AssemblyPatternType, T <: Real, AT <: AbstractAssemblyType}","category":"page"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.AssemblyPattern","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.AssemblyPattern","text":"mutable struct AssemblyPattern{APT<:AssemblyPatternType, T<:Real, AT<:AbstractAssemblyType, ActionType<:AbstractAction}\n\neach assembly pattern has one of the assembly pattern types (APT) that trigger different assemblies for the involved finite element spaces, operators and an assigned action. The assembly type (AT) determines if the assembly takes place on cells, faces or edges etc. (relatively to the assembly type of the first argument of the pattern)\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The following table lists all available assembly patterns, their constuctor names and how they can be used for assembly or evaluations.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"AssemblyPatternType constructor evaluate assembly into matrix assembly into vector\nAPT_ItemIntegrator ItemIntegrator yes no no\nAPT_LinearForm LinearForm no no yes\nAPT_BilinearForm BilinearForm no yes yes (1)\nAPT_TrilinearForm TrilinearForm no yes (1) yes (2)\nAPT_MultiLinearForm MultilinearForm no no yes (N-1)\nAPT_NonlinearForm NonlinearForm no yes (L) yes (L)","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Number in brackets denotes the number of fixed arguments needed for this assembly, (L) means that a current solution is needed to evaluate (to evaluate the linearisation of the nonlinear form in this state). Evaluations of the other AssemblyPatterns may be possible in a future update, but currently have to be performed by maintaining a duplicate of the pattern rewritten as an ItemIntegrator.","category":"page"},{"location":"assemblypatterns/#Constructor-details","page":"Assembly Patterns","title":"Constructor details","text":"","category":"section"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Below all constructors are detailed. (For the ItemIntegrator see Item Integrators.)","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"GradientRobustMultiPhysics.LinearForm\nGradientRobustMultiPhysics.BilinearForm\nGradientRobustMultiPhysics.TrilinearForm\nGradientRobustMultiPhysics.MultilinearForm\nGradientRobustMultiPhysics.NonlinearForm","category":"page"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.LinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.LinearForm","text":"function LinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a LinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.BilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.BilinearForm","text":"function BilinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a general BilinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.TrilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.TrilinearForm","text":"function TrilinearForm(\n    T::Type{<:Real},\n    FES::Array{FESpace,1},          \n    operators::Array{DataType,1},\n    action::AbstractAction;\n    regions::Array{Int,1} = [0])\n\nCreates a TrilinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.MultilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.MultilinearForm","text":"function MultilinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a MultilinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.NonlinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.NonlinearForm","text":"function NonlinearForm(\n    T::Type{<:Real},\n    FES::Array{FESpace,1},          # finite element spaces for each operator of the ansatz function and the last one refers to the test function\n    operators::Array{DataType,1},   # operators that should be evaluated for the ansatz function and the last one refers to the test function\n    action::AbstractAction;         # action that shoul have an AbstractNLActionKernel\n    regions::Array{Int,1} = [0])\n\nCreates a NonlinearForm assembly pattern.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#Assemble","page":"Assembly Patterns","title":"Assemble","text":"","category":"section"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Below all assemble! functions of the patterns are listed. (For evaluation of the ItemIntegrator see Item Integrators.)","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"assemble!","category":"page"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.assemble!","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.assemble!","text":"assemble!(\n    b::Union{AbstractArray{T,1},AbstractArray{T,2}},    # target vector/matrix\n    AP::AssemblyPattern{APT,T,AT};                      # LinearForm pattern\n    factor = 1)                                         # factor that is multiplied\n    where {APT <: APT_LinearForm, T, AT}\n\nAssembly of a LinearForm pattern AP into a vector or matrix (if action is vetor-valued).\n\n\n\n\n\nassemble!(\n    A::AbstractArray{T,2},                  # target matrix\n    AP::AssemblyPattern{APT,T,AT};          # BilinearForm Pattern\n    apply_action_to::Int = 1,               # action is applied to which argument?\n    factor = 1,                             # factor that is multiplied\n    transposed_assembly::Bool = false,      # transpose result?\n    transpose_copy = Nothing)               # copy a transposed block to this matrix\n    where {APT <: APT_BilinearForm, T, AT}\n\nAssembly of a BilinearForm BLF into given two-dimensional AbstractArray (e.g. FEMatrixBlock or a ExtendableSparseMatrix).\n\n\n\n\n\nassemble!(\n    b::AbstractArray{T,1},          # target vector\n    AP::AssemblyPattern{APT,T,AT},  # BilinearForm Pattern\n    fixedFE::AbstractArray;         # coefficients for fixed argument\n    apply_action_to::Int = 1,       # action is applied to 1st or 2nd argument?\n    fixed_arguments = [1],        # which argument is fixed?\n    factor = 1)                     # factor that is multiplied\n    where {APT <: APT_BilinearForm, T, AT}\n\nAssembly of a BilinearForm AP into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the second argument is fixed (default) by the given coefficients in fixedFE. With applyactionto=2 the action can be also applied to the second argument instead of the first one (default).\n\n\n\n\n\nassemble!(\n    assemble!(\n    A::AbstractArray{T,2},                  # target matrix\n    AP::AssemblyPattern{APT,T,AT},          # TrilinearForm pattern\n    fixedFE::Array{<:FEVectorBlock,1};      # coefficients for fixed argument\n    fixed_argument = [1],                   # position of fixed argument (as an array)\n    transposed_assembly::Bool = false,      # transpose result?\n    factor = 1)                             # factor that is multiplied\n    where {APT <: APT_TrilinearForm, T, AT}\n\nAssembly of a TrilinearForm AP into given two-dimensional AbstractArray (e.g. a FEMatrixBlock). Here, one argument (specified by fixed_argument) is fixed by the given coefficients in fixedFE[1]. Note, that the action is (currently) always applied to the first and second argument.\n\n\n\n\n\nassemble!(\n    assemble!(\n    b::AbstractVector,                      # target vector\n    AP::AssemblyPattern{APT,T,AT},          # coefficients for fixed arguments\n    fixedFE::Array{<:FEVectorBlock,1};      # TrilinearForm pattern\n    factor = 1)                             # factor that is multiplied\n    where {APT <: APT_TrilinearForm, T, AT}\n\nAssembly of a TrilinearForm AP into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the first two arguments are fixed by the given coefficients in FE1 and FE2.\n\n\n\n\n\nassemble!(\n    b::AbstractVector,                        # target vector\n    FE::Array{<:FEVectorBlock,1},             # coefficients of all but last argument\n    AP::AssemblyPattern{APT,T,AT};            # Multilinearform pattern\n    factor = 1)                               # factor that is multiplied\n    where {APT <: APT_MultilinearForm, T, AT}\n\nAssembly of a MultilinearForm AP into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the all but the last arguments are fixed by the given coefficients in the components of FE.\n\n\n\n\n\nassemble!(\n    A::AbstractArray{T,2},                 # target matrix\n    AP::AssemblyPattern{APT,T,AT};         # NonlinearForm pattern\n    FEB::Array{<:FEVectorBlock,1};         # coefficients of current solution for each operator\n    factor = 1,                            # factor that is multiplied\n    transposed_assembly::Bool = false)     # transpose result?\n    where {APT <: APT_NonlinearForm, T, AT}\n\nAssembly of a NonlinearForm assembly pattern into given two-dimensional AbstractArray (e.g. FEMatrixBlock).\n\n\n\n\n\nassemble!(\n    b::AbstractVector,                     # target vector\n    AP::AssemblyPattern{APT,T,AT},         # NonlinearForm pattern\n    FEB::Array{<:FEVectorBlock,1};         # coefficients of current solution for each operator\n    factor = 1)                            # factor that is multiplied\n    where {APT <: APT_NonlinearForm, T, AT}\n\nAssembly of a NonlinearForm AP into given AbstractVector (e.g. FEMatrixBlock).\n\n\n\n\n\n","category":"function"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/#:-Poisson-L-shape-Adaptive-Mesh-Refinement","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"","category":"section"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"(source code)","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"This example computes the standard-residual error estimator for the H^1 error e = u - u_h of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"eta^2(u_h) = sum_T in mathcalT lvert T rvert  f + Delta u_h ^2_L^2(T)\n+ sum_F in mathcalF lvert F rvert  nabla u_h cdot mathbfn ^2_L^2(F)","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"This example script showcases the evaluation of 2nd order derivatives like the Laplacian and adaptive mesh refinement.","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"module Example204_PoissonLshapeAdaptive2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n# ... and its gradient\nfunction exact_function_gradient!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    # du/dy = du/dr * sin(phi) + (1/r) * du/dphi * cos(phi)\n    result[2] = sin(2*result[1]/3) * sin(result[1]) + cos(2*result[1]/3) * cos(result[1])\n    result[2] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\n    # du/dx = du/dr * cos(phi) - (1/r) * du/dphi * sin(phi)\n    result[1] = sin(2*result[1]/3) * cos(result[1]) - cos(2*result[1]/3) * sin(result[1])\n    result[1] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nlevels = 20, theta = 1//3, order = 2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite element\n    if order == 1\n        FEType = H1P1{1}\n    elseif order == 2\n        FEType = H1P2{1,2}\n    elseif order == 3\n        FEType = H1P3{1,2}\n    else\n        @error \"order has to be 1,2 or 3\"\n    end\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_function_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 4)\n\n    # setup Poisson problem\n    Problem = PoissonProblem()\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # setup exact error evaluations\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n\n    # define error estimator\n    # kernel for jump term : |F| ||[[grad(u_h)*n_F]]||^2_L^2(F)\n    xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n    xFaceNormals::Array{Float64,2} = xgrid[FaceNormals]\n    xCellVolumes::Array{Float64,1} = xgrid[CellVolumes]\n    function L2jump_integrand(result, input, item)\n        result[1] = ((input[1]*xFaceNormals[1,item])^2 + (input[2]*xFaceNormals[2,item])^2) * xFaceVolumes[item]\n        return nothing\n    end\n    # kernel for volume term : |T| * ||f + Laplace(u_h)||^2_L^2(T)\n    # note: f = 0 here, but integrand can also be made x-dpendent to allow for non-homogeneous rhs\n    function L2vol_integrand(result, input, item)\n        result[1] = 0\n        for j = 1 : length(input)\n            result[1] += input[j]^2 * xCellVolumes[item]\n        end\n        return nothing\n    end\n    # ... which generates an action...\n    eta_jumps_action = Action(Float64, L2jump_integrand, [1,2]; name = \"estimator kernel jumps\", dependencies = \"I\", quadorder = 2)\n    eta_vol_action = Action(Float64, L2vol_integrand, [1,2]; name = \"estimator kernel volume\", dependencies = \"I\", quadorder = 1)\n    # ... which is used inside an ItemIntegrator\n    jumpIntegrator = ItemIntegrator(Float64,ON_IFACES,[Jump(Gradient)],eta_jumps_action; name = \"η_F\")\n    volIntegrator = ItemIntegrator(Float64,ON_CELLS,[Laplacian],eta_vol_action; name = \"η_T\")\n\n    # refinement loop\n    NDofs = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 3)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        println(\"------- LEVEL $level\")\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n        solve!(Solution, Problem)\n        NDofs[level] = length(Solution[1])\n\n        # calculate local error estimator contributions\n        xFaceVolumes = xgrid[FaceVolumes]\n        xFaceNormals = xgrid[FaceNormals]\n        xCellVolumes = xgrid[CellVolumes]\n        vol_error = zeros(Float64,1,num_sources(xgrid[CellNodes]))\n        jump_error = zeros(Float64,1,num_sources(xgrid[FaceNodes]))\n        evaluate!(vol_error,volIntegrator,[Solution[1]])\n        evaluate!(jump_error,jumpIntegrator,[Solution[1]])\n\n        # calculate exact L2 error, H1 error and total estimator\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,[Solution[1]]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,[Solution[1]]))\n        Results[level,3] = sqrt(sum(jump_error) + sum(vol_error))\n        println(\"\\tη = $(Results[level,3])\\n\\te = $(Results[level,2])\")\n\n        if level == nlevels\n            break;\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # compute refinement indicators\n            nfaces = num_sources(xgrid[FaceNodes])\n            refinement_indicators = sum(jump_error, dims = 1)\n            xFaceCells = xgrid[FaceCells]\n            cell::Int = 0\n            for face = 1 : nfaces, k = 1 : 2\n                cell = xFaceCells[k,face]\n                if cell > 0\n                    refinement_indicators[face] += vol_error[1,cell]\n                end\n            end\n\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, refinement_indicators, theta; indicator_AT = ON_FACES)\n            xgrid = RGB_refine(xgrid, facemarker)\n        end\n    end\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1]], [Identity]; add_grid_plot = true, Plotter = Plotter)\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\"])\n    plot_convergencehistory(NDofs, Results; add_h_powers = [order,order+1], X_to_h = X -> X.^(-1/2), Plotter = Plotter, ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\"])\nend\n\nend","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"Default output:","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"julia> Example204_PoissonLshapeAdaptive2D.main()\n------- LEVEL 1\n\tη = 1.1809216557030233\n\te = 0.2076474651624387\n------- LEVEL 2\n\tη = 0.7574690118747248\n\te = 0.16086233264174035\n------- LEVEL 3\n\tη = 0.5060512659008009\n\te = 0.12710035674542716\n------- LEVEL 4\n\tη = 0.3333391179306108\n\te = 0.0820803030509537\n------- LEVEL 5\n\tη = 0.23308314458993257\n\te = 0.055004363135275625\n------- LEVEL 6\n\tη = 0.1786953253460242\n\te = 0.039456229943995544\n------- LEVEL 7\n\tη = 0.13915850782044412\n\te = 0.029372552786887583\n------- LEVEL 8\n\tη = 0.109821452233475\n\te = 0.022390159079847222\n------- LEVEL 9\n\tη = 0.08174488804163997\n\te = 0.01571686306614436\n------- LEVEL 10\n\tη = 0.06164313323480438\n\te = 0.01166092416956658\n------- LEVEL 11\n\tη = 0.04513125476819613\n\te = 0.00839438373037072\n------- LEVEL 12\n\tη = 0.03308173869008528\n\te = 0.006117474655358896\n------- LEVEL 13\n\tη = 0.024323647581147988\n\te = 0.004508865557953349\n------- LEVEL 14\n\tη = 0.017721168129910637\n\te = 0.0031946413430606353\n------- LEVEL 15\n\tη = 0.01286507905625899\n\te = 0.002311089419858611\n------- LEVEL 16\n\tη = 0.009428615043436072\n\te = 0.0016865873325011785\n------- LEVEL 17\n\tη = 0.0069421508417187435\n\te = 0.0012444240066276288\n------- LEVEL 18\n\tη = 0.005073360038187537\n\te = 0.000897681251740881\n------- LEVEL 19\n\tη = 0.003722822140532354\n\te = 0.0006539955724163516\n------- LEVEL 20\n\tη = 0.0027250673116204984\n\te = 0.00047677332460083536\n\n    ndofs   |    || u - u_h ||     order  |  || ∇(u - u_h) ||    order  |          η           order  |\n============|=============================|=============================|=============================|\n        21  |     2.51263e-02      0.000  |     2.07647e-01      0.000  |     1.18092e+00      0.000  |\n        33  |     1.90247e-02      1.231  |     1.60862e-01      1.130  |     7.57469e-01      1.965  |\n        41  |     1.26917e-02      3.730  |     1.27100e-01      2.171  |     5.06051e-01      3.716  |\n        67  |     4.79055e-03      3.968  |     8.20803e-02      1.781  |     3.33339e-01      1.700  |\n        93  |     2.38377e-03      4.257  |     5.50044e-02      2.441  |     2.33083e-01      2.182  |\n       119  |     1.78155e-03      2.362  |     3.94562e-02      2.695  |     1.78695e-01      2.156  |\n       159  |     1.24278e-03      2.486  |     2.93726e-02      2.037  |     1.39159e-01      1.726  |\n       215  |     7.86008e-04      3.037  |     2.23902e-02      1.799  |     1.09821e-01      1.569  |\n       287  |     4.04477e-04      4.600  |     1.57169e-02      2.450  |     8.17449e-02      2.044  |\n       377  |     3.33412e-04      1.417  |     1.16609e-02      2.189  |     6.16431e-02      2.069  |\n       527  |     1.95675e-04      3.182  |     8.39438e-03      1.963  |     4.51313e-02      1.862  |\n       729  |     1.14131e-04      3.323  |     6.11747e-03      1.950  |     3.30817e-02      1.914  |\n      1025  |     8.23682e-05      1.914  |     4.50887e-03      1.791  |     2.43236e-02      1.805  |\n      1403  |     4.27727e-05      4.175  |     3.19464e-03      2.195  |     1.77212e-02      2.018  |\n      1951  |     2.80610e-05      2.557  |     2.31109e-03      1.964  |     1.28651e-02      1.942  |\n      2685  |     1.67382e-05      3.236  |     1.68659e-03      1.973  |     9.42862e-03      1.946  |\n      3647  |     1.15905e-05      2.400  |     1.24442e-03      1.986  |     6.94215e-03      1.999  |\n      4953  |     6.26521e-06      4.020  |     8.97681e-04      2.134  |     5.07336e-03      2.049  |\n      6781  |     3.91776e-06      2.989  |     6.53996e-04      2.016  |     3.72282e-03      1.971  |\n      9271  |     2.50250e-06      2.866  |     4.76773e-04      2.021  |     2.72507e-03      1.995  |","category":"page"},{"location":"examples/Example204_PoissonLshapeAdaptive2D/","page":"204 : Poisson L-shape Adaptive Mesh Refinement","title":"204 : Poisson L-shape Adaptive Mesh Refinement","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/#:-Nonlinear-Poisson-Transient-2D","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"","category":"section"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"(source code)","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"This example computes a transient velocity mathbfu solution of the nonlinear Poisson problem","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"beginaligned\nmathbfu_t - mathrmdiv((1+betamathbfu^2) nabla mathbfu)  = mathbff\nendaligned","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"with (some time-dependent) exterior force mathbff. The parameter beta steers the strength of the nonlinearity.","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"The time integration will be performed by the internal CrankNicolson rule (or optionally BackwardEuler) of GradientRobustMultiPhysics. A manufactureed quadratic-in-space and qaudratic-in-time solution is prescribed to test if the solver computes the exact solution.","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"module Example212_NonlinearPoissonTransient2D\n\nusing GradientRobustMultiPhysics\n\n# kernel for nonlinear diffusion operator\nfunction diffusion_kernel!(result, input)\n    # input = [u, grad(u)]\n    result[1] = (1+input[1]^2)*input[2]\n    result[2] = (1+input[1]^2)*input[3]\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, nlevels = 3, timestep = 1e-1, T = 0.5, FEType = H1P2{1,2}, time_integration_rule = CrankNicolson, t_power = 2, testmode = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # set exact solution and data\n    u = DataFunction((result,x,t) -> (result[1] = x[1]*x[2]*(1-t)^t_power), [1,2]; dependencies = \"XT\", quadorder = 2)\n    ∇u = DataFunction((result,x,t) -> (result[1] = x[2]*(1-t)^t_power; result[2] = x[1]*(1-t)^t_power), [2,1]; name = \"∇(u)\", dependencies = \"XT\", quadorder = 1)\n    f = DataFunction((result,x,t) -> (result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1])*(1-t)^(3*t_power) -t_power*x[1]*x[2]*(1-t)^(t_power-1)), [2,1]; name = \"∇(u)\", dependencies = \"XT\", quadorder = 4)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),1)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    nonlin_diffusion = GenerateNonlinearForm(\"(1+u^2) ∇u ⋅ ∇v\", [Identity, Gradient], [1,1], Gradient, diffusion_kernel!, [2,3]; quadorder = 2, ADnewton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], f))\n\n    # define error evaluators\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, u, Identity; time = T)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, ∇u, Gradient; time = T)\n    NDofs = zeros(Int,nlevels)\n    Results = zeros(Float64,nlevels,2)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # set initial solution\n        interpolate!(Solution[1], u)\n\n        # generate time-dependent solver\n        sys = TimeControlSolver(Problem, Solution, time_integration_rule; timedependent_equations = [1], maxiterations = 5)\n\n        # use time control solver by GradientRobustMultiPhysics\n        advance_until_time!(sys, timestep, T)\n\n        # calculate L2 and H1 error and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,Solution[1]))\n    end\n\n    if testmode == true\n        return Results[end,2]\n    else\n        # plot\n        GradientRobustMultiPhysics.plot(xgrid, [Solution[1], Solution[1]], [Identity, Gradient]; Plotter = Plotter)\n\n        # print/plot convergence history\n        print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    end\nend\n\nfunction test()\n    error1 = main(; nlevels = 1, FEType = H1P2{1,2}, t_power = 1, time_integration_rule = BackwardEuler, testmode = true)\n    error2 = main(; nlevels = 1, FEType = H1P2{1,2}, t_power = 2, time_integration_rule = CrankNicolson, testmode = true)\n    return max(error1,error2)\nend\n\nend","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example212_NonlinearPoissonTransient2D/","page":"212 : Nonlinear Poisson Transient 2D","title":"212 : Nonlinear Poisson Transient 2D","text":"(Image: )","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/#A04-:-Custom-Linear-Solvers","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"","category":"section"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"(source code)","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"This example revisits the nonlinear Poisson example from the introductory examples and showcases how to define a user-specified linear solver.","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"module ExampleA04_CustomLinearSolver\n\nusing GradientRobustMultiPhysics\nusing ExtendableSparse\nusing Printf\n\n\n# first define a subtype of AbstractLinearSystem, which is later given as an optional parameter to the problem solve! call\nmutable struct MySolver{Tv,Ti} <: GradientRobustMultiPhysics.AbstractLinearSystem{Tv, Ti}\n    x::AbstractVector{Tv}\n    A::ExtendableSparseMatrix{Tv,Ti}\n    b::AbstractVector{Tv}\n    # add stuff here that you need e.g. for preconditioners\n    MySolver{Tv,Ti}(x,A,b) where {Tv,Ti} = new{Tv,Ti}(x,A,b)\nend\n\n# you need to define update! and solve! functions for your new subtype\nfunction GradientRobustMultiPhysics.update!(LS::MySolver)\n    # this function is called before the solve (if other solver configuration not cause to skip it)\n    # do anything here (e.g. updating the preconditioner)\n    println(\"\\t\\tHi! update! is called at start and every skip_update time...\")\nend\nfunction GradientRobustMultiPhysics.solve!(LS::MySolver)\n    # this function is called to solve the linear system\n    println(\"\\t\\tHi! solve! under way...\")\n    LS.x .= LS.A \\ LS.b\nend\n\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[2]\n    result[2] = x[1]\n    return nothing\nend\nfunction rhs!(result,x::Array{<:Real,1})\n    result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div((1+u^2)*grad(u))\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, nrefinements = 5, FEType = H1P1{1}, testmode = false, skip_update = 2)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_gradient = DataFunction(exact_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction(rhs!, [1,2]; dependencies = \"X\", name = \"f\", quadorder = 4)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    function diffusion_kernel!(result::Array{<:Real,1}, input::Array{<:Real,1})\n        # input = [u, grad(u)]\n        result[1] = (1+input[1]^2)*input[2]\n        result[2] = (1+input[1]^2)*input[3]\n        return nothing\n    end\n    nonlin_diffusion = GenerateNonlinearForm(\"((1+u^2)*grad(u))*grad(v)\", [Identity, Gradient], [1,1], Gradient, diffusion_kernel!, [2,3]; quadorder = 2, ADnewton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs; store = true))\n\n    # create finite element space and solution vector\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector{Float64}(\"u_h\",FES)\n\n    # solve the problem (here the newly defined linear solver type is used)\n    solve!(Solution, Problem; linsolver = MySolver{Float64,Int64}, skip_update = [skip_update])\n\n    # calculate error\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    println(\"\\tL2error = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"\\tH1error = $(sqrt(evaluate(H1ErrorEvaluator,Solution[1])))\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(xgrid, [Solution[1]], [Identity]; Plotter = Plotter)\nend\n\n\nend","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"Default output:","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"julia> ExampleA04_CustomLinearSolver.main()\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t\tHi! update! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      1   | 8.452621e-15 | 2.924738e-02\n\t\tHi! update! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      2   | 8.786607e-15 | 4.905172e-04\n\t\tHi! solve! under way...\n\t      3   | 9.250634e-15 | 1.346748e-07\n\t\tHi! update! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      4   | 8.938063e-15 | 1.844386e-14\n\n\tL2error = 2.592288956240462e-5\n\tH1error = 0.009021109569311967","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"(Image: )","category":"page"},{"location":"examples_intro/#About-the-examples","page":"About the examples","title":"About the examples","text":"","category":"section"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"The examples have been designed with the following issues in mind:","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"they run from the Julia REPL\neach example is a Julia module named similar to the basename of the example file.\nan example can be used as the starting point for a project \nsome examples define test cases for the test suite\nExampleXYZ with X = A can be considered advanced and uses low-level structures and/or demonstrates customisation features or experimental features\nthe default output of the main function is printed on the website and can be used to check if the code runs as expected (unfortunately REPL messages are not recorded)","category":"page"},{"location":"examples_intro/#Running-the-examples","page":"About the examples","title":"Running the examples","text":"","category":"section"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"In order to run ExampleXXX, peform the following steps:","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"Download the example file (e.g. via the source code link at the top)\nMake sure all used packages are installed in your Julia environment\nIn the REPL: ","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"julia> include(\"ExampleXXX.jl\")`\n\njulia> ExampleXXX.main()","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"Some examples offer visual output via the optional argument Plotter = PyPlot or Plotter = GLMakie","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"(provided the package PyPlot/GLMakie is installed and loaded)","category":"page"},{"location":"fems/#Implemented-Finite-Elements","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"This page describes the finite element type-tree and lists all implemented finite elements.","category":"page"},{"location":"fems/#The-Finite-Element-Type-Tree","page":"Implemented Finite Elements","title":"The Finite Element Type-Tree","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Finite elements are abstract type leaves in a type-tree. The complete tree looks like this:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"AbstractFiniteElement\n├─ AbstractH1FiniteElement\n│  ├─ AbstractH1FiniteElementWithCoefficients\n│  │  ├─ H1P1TEB\n│  │  └─ H1BR\n│  ├─ H1CR\n│  ├─ H1MINI\n│  ├─ H1P0\n│  ├─ H1P1\n│  ├─ H1P2\n│  ├─ H1P2B\n│  └─ H1P3\n├─ AbstractHcurlFiniteElement\n│  └─ HCURLN0\n└─ AbstractHdivFiniteElement\n   ├─ HDIVBDM1\n   ├─ HDIVBDM2\n   ├─ HDIVRT0\n   └─ HDIVRT1","category":"page"},{"location":"fems/#Remarks","page":"Implemented Finite Elements","title":"Remarks","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"each type depends on one or two parameters, the first one is always the number of components (ncomponents) that determines if the finite element is scalar- or veector-valued; some elements additionaly require the parameter edim <: Int if they are structurally different in different space dimensions\neach finite elements mainly comes with a set of basis functions in reference coordinates for each applicable AbstractElementGeometry and degrees of freedom maps for each Assembly Type (coded as a string)\nbroken finite elements are possible via the broken switch in the FESpace constructor\nthe type steers how the basis functions are transformed from local to global coordinates and how FunctionOperators are evaluated\ndepending on additional continuity properties of the element types more basis function sets are defined:\nAbstractH1FiniteElements additionally have evaluations of nonzero basisfunctions on faces/bfaces\nAbstractHdivFiniteElements additionally have evaluations of nonzero normalfluxes of basisfunctions on faces/bfaces\nAbstractHcurlFiniteElements additionally have evaluations of nonzero tangentfluxes of basisfunctions on edges/bedges\neach finite element has its own implemented standard interpolation interpolate! (see Finite Element Interpolations) that can be applied to a Data Function, below it is shortly described what this means for each finite element","category":"page"},{"location":"fems/#List-of-implemented-Finite-Elements","page":"Implemented Finite Elements","title":"List of implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The following table lists all curently implemented finite elements. Click on them to find out more details.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1 finite elements Hdiv finite elements Hcurl finite elements\nH1P0 HDIVRT0 HCURLN0\nH1P1 HDIVBDM1 \nH1MINI HDIVRT1 \nH1CR HDIVBDM2 \nH1BR  \nH1P1TEB  \nH1P2  \nH1P2B  \nH1P3  ","category":"page"},{"location":"fems/#H1-conforming-finite-elements","page":"Implemented Finite Elements","title":"H1-conforming finite elements","text":"","category":"section"},{"location":"fems/#P0-finite-element","page":"Implemented Finite Elements","title":"P0 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Piecewise constant finite element that has one degree of freedom on each cell of the grid. (It is masked as a H1-conforming finite element, because it uses the same transformations.)","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves the cell integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P0","text":"abstract type H1P0{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nPiecewise constant polynomials on cells.\n\nallowed on every ElementGeometry\n\n\n\n\n\n","category":"type"},{"location":"fems/#P1-finite-element","page":"Implemented Finite Elements","title":"P1 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The lowest-order current finite element that has a degree of freedom on each vertex of the grid. On simplices the basis functions coincide with the linear barycentric coordinates, on parallelepiped bi-linear functions are used (also known as Q1 element).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P1","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P1","text":"abstract type H1P1{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nContinuous piecewise first-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (linear polynomials)\nTriangle2D (linear polynomials)\nQuadrilateral2D (Q1 space)\nTetrahedron3D (linear polynomials)\nHexahedron3D (Q1 space)\n\n\n\n\n\n","category":"type"},{"location":"fems/#MINI-finite-element","page":"Implemented Finite Elements","title":"MINI finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The mini finite element adds cell bubles to the P1 element that are e.g. beneficial to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell integral.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1MINI","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1MINI","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1MINI","text":"abstract type H1MINI{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nMini finite element.\n\nallowed element geometries:\n\nTriangle2D (linear polynomials + cubic cell bubble)\nQuadrilateral2D (Q1 space + quartic cell bubble)\nTetrahedron3D (linear polynomials + cubic cell bubble)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P1TEB-finite-element","page":"Implemented Finite Elements","title":"P1TEB finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"This element adds tangent-weighted edge bubbles to the P1 finite element and therefore is only available as a vector-valued element.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves face integrals of its tangential flux.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P1TEB","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P1TEB","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P1TEB","text":"abstract type H1P1TEB{edim} <: AbstractH1FiniteElementWithCoefficients where {edim<:Int}\n\nvector-valued (ncomponents = edim) element that uses P1 functions + tangential-weighted edge bubbles as suggested by [\"Fortin Operator for the Taylor-Hood Element\", 2021, arxiv:2104.13953]\n\n(is inf-sup stable for Stokes if paired with continuous P1 pressure space, less degrees of freedom than MINI)\n\nallowed ElementGeometries:\n\nTriangle2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Bernardi-Raugel-(BR)-finite-element","page":"Implemented Finite Elements","title":"Bernardi-Raugel (BR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Bernardi-Raugel adds normal-weighted face bubbles to the P1 finite element and therefore is only available as a vector-valued element.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves face integrals of its normal flux.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1BR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1BR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1BR","text":"abstract type H1BR{edim} <: AbstractH1FiniteElementWithCoefficients where {edim<:Int}\n\nvector-valued (ncomponents = edim) Bernardi–Raugel element (first-order polynomials + normal-weighted face bubbles)\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear + normal-weighted face bubbles)\nQuadrilateral2D (Q1 space + normal-weighted face bubbles)\nTetrahedron3D (piecewise linear + normal-weighted face bubbles)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2-finite-element","page":"Implemented Finite Elements","title":"P2 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2 finite element method on simplices equals quadratic polynomials. On the Triangle2D shape the degrees of freedom are associated with the three vertices and the three faces of the triangle. On the Tetrahedron3D shape the degrees of freedom are associated with the four verties and the six edges. On Parallelogram2D cubic Q2 element functions are used.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its face/edge integrals in 2D/3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2","text":"abstract type H1P2{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (quadratic polynomials)\nTriangle2D (quadratic polynomials)\nQuadrilateral2D (Q2 space)\nTetrahedron3D (quadratic polynomials)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2B-finite-element","page":"Implemented Finite Elements","title":"P2B finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2B finite element adds additional cell bubles (in 2D and 3D) and face bubbles (only in 3D) that are e.g. used to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell and face integrals in 2D and also edge integrals in 3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2B","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2B","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2B","text":"abstract type H1P2B{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#P3-finite-element","page":"Implemented Finite Elements","title":"P3 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P3 finite element method on simplices equals cubic polynomials. On the Triangle2D shape the degrees of freedom are associated with the three vertices, the three faces (double dof) of the triangle and the cell itself (one cell bubble).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves cell and face integrals in 2D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P3","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P3","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P3","text":"abstract type H1P3{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise third-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (cubic polynomials)\nTriangle2D (cubic polynomials, experimental)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Crouzeix-Raviart-(CR)-finite-element","page":"Implemented Finite Elements","title":"Crouzeix-Raviart (CR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Crouzeix-Raviart element associates one lowest-order function with each face. On the Triangle2D shape, the basis function of a face is one minus two times the nodal basis function of the opposite node. ","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves its face integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1CR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1CR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1CR","text":"abstract type H1CR{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nCrouzeix-Raviart element (only continuous at face centers).\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear, similar to P1)\nQuadrilateral2D (similar to Q1 space)\nTetrahedron3D (piecewise linear, similar to P1)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hdiv-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hdiv-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"These Raviart-Thomas and Brezzi-Douglas-Marini finite elements of lower order and their standard interpolations are available:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HDIVRT0\nHDIVBDM1\nHDIVRT1\nHDIVBDM2","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT0","text":"abstract type HDIVRT0{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Raviart-Thomas space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\nHexahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVBDM1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVBDM1","text":"abstract type HDIVBDM1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Brezzi-Douglas-Marini space\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT1","text":"abstract type HDIVRT1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) Raviart-Thomas space of order 1.\n\nallowed ElementGeometries:\n\nTriangle2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVBDM2","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVBDM2","text":"abstract type HDIVBDM2{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) Brezzi-Douglas-Marini space of order 2\n\nallowed ElementGeometries:\n\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hcurl-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hcurl-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"So far only the lowest order Nedelec element is available in 2D and 3D. On Triangle2D it has one degree of freedom for each face (i.e. the rotated RT0 element), on Tetrahedron3D it has one degree of freedom associated to each of the six edges.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Its standard interpolation of a given functions preserves its tangential face/edge integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HCURLN0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HCURLN0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HCURLN0","text":"abstract type HCURLN0{edim} <: AbstractHcurlFiniteElement where {edim<:Int}\n\nHcurl-conforming vector-valued (ncomponents = edim) lowest-order Nedelec space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"pdesolvers/#Fixed-Time-Solvers","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"","category":"section"},{"location":"pdesolvers/#Fixed-Time-Solvers-2","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"","category":"section"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"If solve! is applied to a PDEDescription and a FEVector (that specifies the ansatz spaces for the unknowns) an investigation of the PDEDescription is performed that decides if the problem is nonlinear (and has to be solved by a fixed-point algorithm) or if it can be solved directly in one step. Additionally the user can manually trigger subiterations that splits the fixed-point algorithm into substeps where only subsets of the PDE equations are solved together.","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"solve!","category":"page"},{"location":"pdesolvers/#GradientRobustMultiPhysics.solve!","page":"Fixed-Time Solvers","title":"GradientRobustMultiPhysics.solve!","text":"function solve!(\n    Target::FEVector,       # contains initial guess and final solution after solve\n    PDE::PDEDescription;\n    kwargs)\n\nSolves a given PDE (provided as a PDEDescription) and writes the solution into the FEVector Target (which knows the discrete ansatz spaces).\n\nKeyword arguments:\n\nanderson_iterations: use Anderson acceleration with this many previous iterates (to hopefully speed up/enable convergence of fixpoint iterations). Default: 0\nsubiterations: an array of equation subsets (each an array) that should be solved together in each fixpoint iteration. Default: ''auto''\nshowiterationdetails: show details (residuals etc.) of each iteration. Default: true\nanderson_unknowns: an array of unknown numbers that should be included in the Anderson acceleration. Default: [1]\nshow_statistics: show some statistics like assembly times. Default: false\nanderson_metric: String that encodes the desired convergence metric for the Anderson acceleration (possible values: ''l2'' or ''L2'' or ''H1''). Default: ''l2''\nskipupdate: matrix update (for the j-th sub-iteration) will be performed each skipupdate[j] iteration; -1 means only in the first iteration. Default: [1]\nlinsolver: String that encodes the linear solver, or type name of self-defined solver (see corressponding example), or type name of ExtendableSparse.AbstractFactorization. Default: ''UMFPACK''\ndamping: damp the new iteration with this part of the old iteration (0 = undamped). Default: 0\ntime: time at which time-dependent data functions are evaluated or initial time for TimeControlSolver. Default: 0\nshowsolverconfig: show the complete solver configuration before starting to solve. Default: false\nanderson_damping: Damping factor in Anderson acceleration (1 = undamped). Default: 1\nchecknonlinearresidual: check the nonlinear residual in last nonlinear iteration (causes one more reassembly of nonlinear terms). Default: ''auto''\nfixed_penalty: penalty that is used for the values of fixed degrees of freedom (e.g. by Dirichlet boundary data or global constraints). Default: 1.0e60\ntarget_residual: stop fixpoint iterations if the (nonlinear) residual is smaller than this number. Default: 1.0e-10\nmaxiterations: maximal number of nonlinear iterations (TimeControlSolver runs that many in each time step). Default: ''auto''\n\nDepending on the subiterations and detected/configured nonlinearities the whole system is either solved directly in one step or via a fixed-point iteration.\n\n\n\n\n\n","category":"function"},{"location":"pdesolvers/#Anderson-acceleration","page":"Fixed-Time Solvers","title":"Anderson acceleration","text":"","category":"section"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"Fixpoint iterations my be accelerated by Anderson acceleration. Concepts and some theoretical background can be found in the reference below. Within this package, Anderson acceleration can be triggered by optional solver arguments: the user can specify the depth of the Anderson acceleration (anderson_iterations), the damping withing the Anderson iteration (anderson_damping), the unknwons that should be included in the iteration (anderson_unknowns) and the convergence metric (anderson_metric); also see above for a full list of optional solver arguments. In case of subiterations, the Anderson iteration will be called as a postprocessing after the final subiteration.","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"Reference:","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"\"A Proof That Anderson Acceleration Improves the Convergence Rate in Linearly Converging Fixed-Point Methods (But Not in Those Converging Quadratically)\",\nC. Evans, S. Pollock, L. Rebholz, and M. Xiao,\nSIAM J. Numer. Anal., 58(1) (2020),\n>Journal-Link<","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/#:-Bestapproximation-Hdiv-3D","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"","category":"section"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"(source code)","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"This example computes the L2-bestapproximation of some given vector-valued function into an Hdiv-conforming finite element space. It also preserves the divergence of the function in the sense that the divergence of the approximation equals the piecewise integral mean of the exact divergence. Afterwards the L2 error (also of the divergence) is computed.","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"module Example302_BestapproximationHdiv3D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# define some vector field that should be approximated\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[3]^2\n    result[2] = -x[1]^2 + x[2] + 1\n    result[3] = x[1]*x[2]\nend\n# define its divergence\nfunction exact_divergence!(result,x::Array{<:Real,1})\n    result[1] = 3*x[1]*x[1] + 1\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate a unit square mesh and refine\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D),4)\n\n    # negotiate exact_function! and exact_divergence! to the package\n    user_function = DataFunction(exact_function!, [3,3]; name = \"u\", dependencies = \"X\", quadorder = 3)\n    user_function_div = DataFunction(exact_divergence!, [1,3]; name = \"div(u)\", dependencies = \"X\", quadorder = 2)\n\n    # setup a bestapproximation problem via a predefined prototype\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [])\n\n    # add a new unknown (Lagrange multiplier that handles the divergence constraint)\n    # here 1 is the number of components (it is scalarvalued) and 3 is the space dimension\n    add_unknown!(Problem; unknown_name = \"p\", equation_name = \"divergence constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n\n    # add the right-hand side data for the constraint and inspect the defined problem\n    add_rhsdata!(Problem, 2, RhsOperator(Identity, [0], user_function_div))\n    @show Problem\n\n    # choose some (inf-sup stable) finite element types\n    #FEType = [HDIVRT0{3}, H1P0{1}]\n    FEType = [HDIVBDM1{3}, H1P0{1}]\n    FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid; broken = true)]\n\n    # create a solution vector and solve the problem\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],FES)\n    solve!(Solution, Problem)\n\n    # calculate L2 error and L2 divergence error\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    L2DivergenceErrorEvaluator = L2ErrorIntegrator(Float64, user_function_div, Divergence)\n    println(\"\\tL2error(Id) = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"\\tL2error(div) = $(sqrt(evaluate(L2DivergenceErrorEvaluator,Solution[1])))\")\nend\n\nend","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"Default output:","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"julia> Example302_BestapproximationHdiv3D.main()\n\nPDE-DESCRIPTION\n===============\n  system name = L2-Bestapproximation problem\n\n     id   | unknown name / equation name\n    [1]   | u / L2-bestapproximation equation \n    [2]   | p / divergence constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | u ⋅ v (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | div(v) ⋅ q (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | u⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | div(u)⋅id(v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : \n   BoundaryOperator[2] : \n\nProblem = \n\tL2error(Id) = 0.00017706474627459634\n\tL2error(div) = 0.00987828043623493","category":"page"},{"location":"timecontrolsolver/#Time-Dependent-Solvers","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"","category":"section"},{"location":"timecontrolsolver/#TimeControlSolver","page":"Time-Dependent Solvers","title":"TimeControlSolver","text":"","category":"section"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"The structure TimeControlSolver can be used to setup a time-dependent solver that can be configured in a similar manner as the time-independent ones (subiterations, nonlinear iterations, linear solvers). The following table lists the available TimeIntegrationRules:","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"Time integration rule order Formula\nBackwardEuler 1 (M^n+1 + A^n+1) u^n+1 = F^n+1 + M^n+1 u^n\nCrankNicolson 2 (M^n+1 + A^n+1) u^n+1 = F^n+1 + F^n - A^n u^n + M^n+1 u^n","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"Note that currently the time-derivative (M terms) is added by the TimeControlSolver in each integration step and is in general not part of the PDEDescription (this might change in future). The default time derivative is a scaled (depends on the integration rule) mass matrix of the used finite element space, but the user can overwrite it via optional constructor arguments (experimental).","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"In case of the Crank-Nicolson scheme the user can mask unknowns of the PDE as an algebraic constraint (see add_unknown! in ProblemDescription). For these variables old iterates are not used on the right-hand side of the iteration formula. The pressure in the Navier-Stokes system is an example for such a constraint.","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"TimeControlSolver\nadvance!","category":"page"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.TimeControlSolver","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.TimeControlSolver","text":"function TimeControlSolver(\n    PDE::PDEDescription,\n    Solution::FEVector,    # contains initial values and stores solution of advance method below\n    TIR::Type{<:AbstractTimeIntegrationRule} = BackwardEuler;\n    dt_testfunction_operator = [],\n    dt_action = [],\n    nonlinear_dt = [],\n    kwargs...)\n\nCreates a time-dependent solver that can be advanced in time with advance!. The FEVector Solution stores the initial state but also the solution at the current time. The argument TIR carries the time integration rule to be use (e.g. BackwardEuler or CrankNicolson).\n\nKeyword arguments:\n\nsubiterations: an array of equation subsets (each an array) that should be solved together in each fixpoint iteration. Default: ''auto''\nshowiterationdetails: show details (residuals etc.) of each iteration. Default: true\ntimedependent_equations: array of the equations that should get a time derivative (only for TimeControlSolver). Default: Any[]\nshow_statistics: show some statistics like assembly times. Default: false\nskipupdate: matrix update (for the j-th sub-iteration) will be performed each skipupdate[j] iteration; -1 means only in the first iteration. Default: [1]\nlinsolver: String that encodes the linear solver, or type name of self-defined solver (see corressponding example), or type name of ExtendableSparse.AbstractFactorization. Default: ''UMFPACK''\ntime: time at which time-dependent data functions are evaluated or initial time for TimeControlSolver. Default: 0\nshowsolverconfig: show the complete solver configuration before starting to solve. Default: false\nchecknonlinearresidual: check the nonlinear residual in last nonlinear iteration (causes one more reassembly of nonlinear terms). Default: ''auto''\nfixed_penalty: penalty that is used for the values of fixed degrees of freedom (e.g. by Dirichlet boundary data or global constraints). Default: 1.0e60\ntarget_residual: stop fixpoint iterations if the (nonlinear) residual is smaller than this number. Default: 1.0e-10\nmaxiterations: maximal number of nonlinear iterations (TimeControlSolver runs that many in each time step). Default: ''auto''\n\nFurther (very experimental) optional arguments for TimeControlSolver are:\n\ndttestfunction_operator : (array of) operators applied to testfunctions in time derivative (default: Identity)\ndt_action : (array of) actions that are applied to the ansatz function in the time derivative (to include parameters etc.)\nnonlinear_dt : (array of) booleans to decide which time derivatives should be recomputed in each timestep\n\n\n\n\n\n","category":"type"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance!","text":"function TimeControlSolver(\n    advance!(TCS::TimeControlSolver, timestep::Real = 1e-1)\n\nAdvances a TimeControlSolver one step in time with the given timestep.\n\n\n\n\n\n","category":"function"},{"location":"timecontrolsolver/#Advancing-a-TimeControlSolver","page":"Time-Dependent Solvers","title":"Advancing a TimeControlSolver","text":"","category":"section"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"There are two functions that advance the TimeControlSolver automatically until a given final time (advance_until_time!) is reached or until stationarity is reached (advance_until_stationarity!). As an experimental feature, one can add the module DifferentialEquations.jl as the first argument to these methods to let this module run the time integration (the native TimeIntegrationRule argument in the TimeControlSolver constuctor is ignored in this case).","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"advance_until_time!\nadvance_until_stationarity!","category":"page"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance_until_time!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance_until_time!","text":"advance_until_time!(TCS::TimeControlSolver, timestep, finaltime; finaltime_tolerance = 1e-15, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until the specified finaltime is reached (up to the specified tolerance). The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\nadvance_until_time!(DiffEQ::Module, TCS::TimeControlSolver, timestep, finaltime; solver = nothing, abstol = 1e-1, reltol = 1e-1, dtmin = 0, adaptive::Bool = true)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until the specified finaltime is reached (up to the specified tolerance) with the given exterior time integration module. The only valid Module here is DifferentialEquations.jl and the optional arguments are passed to it. If solver == nothing the solver Rosenbrock23(autodiff = false) will be chosen. For more choices please consult the documentation of DifferentialEquations.jl.\n\nAlso note that this is a highly experimental feature and will not work for general TimeControlSolvers configuration (e.g. in the case of several subiterations or, it seems, saddle point problems). Also have a look at corressponding the example in the advanced examples section.\n\n\n\n\n\n","category":"function"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance_until_stationarity!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance_until_stationarity!","text":"advance_until_stationarity!(TCS::TimeControlSolver, timestep; stationarity_threshold = 1e-11, maxTimeSteps = 100, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until stationarity is detected (change of variables below threshold) or a maximal number of time steps is exceeded. The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\n","category":"function"}]
}
