var documenterSearchIndex = {"docs":
[{"location":"examples/ExampleA01_RationalMassMatrix/#A01-:-Rational-Mass-Matrix","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"","category":"section"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"(source code)","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"This example demonstrates the usage of rational numbers to calculate e.g. exact mass matrices on reference domains (if exact quadrature rules in Rational number format are available).","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"module ExampleA01_RationalMassMatrix\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# everything is wrapped in a main function\nfunction main()\n\n    # reference domain as extendable grid\n    xgrid = reference_domain(Triangle2D, Rational{Int64})\n\n    # define P1-Courant finite element space\n    FES = FESpace{H1P1{1}}(xgrid)\n\n    # define mass matrix bilinear form\n    MAMA_BLF = DiscreteSymmetricBilinearForm([Identity,Identity],[FES,FES]; T = Rational{Int64})\n\n    # assemble mass matrix and divide by area\n    MAMA = FEMatrix{Rational{Int64}}(\"mass matrix\",FES)\n    assemble!(MAMA[1],MAMA_BLF)\n    MAMA = MAMA.entries ./ xgrid[CellVolumes][1]\n\n    # print matrix\n    @show MAMA\nend\n\nend","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"Default output:","category":"page"},{"location":"examples/ExampleA01_RationalMassMatrix/","page":"A01 : Rational Mass Matrix","title":"A01 : Rational Mass Matrix","text":"julia> ExampleA01_RationalMassMatrix.main()\nMAMA = Rational{Int64}[1//6 1//12 1//12; 1//12 1//6 1//12; 1//12 1//12 1//6]","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/#:-Navier-Stokes-Lid-driven-cavity-Anderson-Acceleration","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"","category":"section"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"(source code)","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"This example solves the lid-driven cavity problem where one seeks a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"where mathbfu = (10) along the top boundary of a square domain.","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"For small viscosities (where a Newton and a classical Picard iteration do not converge anymore), Anderson acceleration might help which can be tested with this script. Here, we use Anderson acceleration until the residual is small enough for the Newton to take over.","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"module Example225_NavierStokesAnderson2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\nusing Printf\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, μ = 5e-4, anderson_iterations = 10, target_residual = 1e-12, maxiterations = 50, switch_to_newton_tolerance = 1e-4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # grid\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), 5);\n\n    # finite element type\n    FETypes = [H1P2{2,2}, H1P1{1}] # Taylor--Hood\n\n    # load Navier-Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = true, newton = false, store = false)\n    add_boundarydata!(Problem, 1, [1,2,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [3], BestapproxDirichletBoundary; data = DataFunction([1,0]))\n    @show Problem\n\n    # generate FESpaces\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid)]\n    Solution = FEVector([\"u_h\", \"p_h\"],FES)\n\n    # solve with anderson iterations until 1e-4\n    solve!(Solution, Problem; anderson_iterations = anderson_iterations, anderson_metric = \"l2\", anderson_unknowns = [1], maxiterations = maxiterations, target_residual = switch_to_newton_tolerance, show_statistics = true)\n\n    # solve rest with Newton\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = true, newton = true, store = true)\n    add_boundarydata!(Problem, 1, [1,2,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [3], BestapproxDirichletBoundary; data = DataFunction([1,0]))\n    @show Problem\n    solve!(Solution, Problem; anderson_iterations = anderson_iterations, maxiterations = maxiterations, target_residual = target_residual, show_statistics = true)\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 3)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.1, clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[2]),1,:), levels = 11, title = \"p_h\")\nend\n\nend","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"Default output:","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"julia> Example225_NavierStokesAnderson2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = incompressible Navier-Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0005 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((id(a) ⋅ ∇) u, id(v)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [3]\n                         HomogeneousDirichletBoundary -> [1, 2, 4]\n                          \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 8.22e+00/5.30e-06/8.24e+00\n\t      1   | 2.196123e-17 | 8.063241e-03 | 3.19e-01/4.22e-01/7.43e-01\n\t      2   | 2.472444e-17 | 4.186558e-03 | 3.20e-01/4.42e-01/7.64e-01\n\t      3   | 3.249268e-17 | 2.062310e-03 | 3.20e-01/3.66e-01/6.89e-01\n\t      4   | 2.857168e-17 | 6.651686e-04 | 3.20e-01/3.73e-01/6.96e-01\n\t      5   | 2.845856e-17 | 5.562696e-04 | 3.20e-01/3.54e-01/6.78e-01\n\t      6   | 2.962953e-17 | 3.504737e-04 | 3.20e-01/4.36e-01/7.60e-01\n\t      7   | 2.863105e-17 | 3.225783e-04 | 3.21e-01/3.61e-01/6.86e-01\n\t      8   | 2.912065e-17 | 1.990759e-04 | 3.20e-01/5.85e-01/9.11e-01\n\t      9   | 3.016949e-17 | 8.282842e-05 | 3.18e-01/3.60e-01/6.83e-01\n\t    total |                             | 1.11e+01/3.70e+00/1.58e+01\n\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = incompressible Navier-Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0005 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((id(u) ⋅ ∇) u, id(v)) [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [3]\n                         HomogeneousDirichletBoundary -> [1, 2, 4]\n                          \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 3.01e+00/4.30e-06/3.02e+00\n\t      1   | 2.957798e-17 | 8.735238e-07 | 2.15e-01/4.47e-01/6.70e-01\n\t      2   | 2.823773e-17 | 4.117803e-10 | 2.16e-01/3.67e-01/5.85e-01\n\t      3   | 2.965389e-17 | 6.580373e-16 | 2.13e-01/3.51e-01/5.67e-01\n\t    total |                             | 3.66e+00/1.17e+00/4.84e+00\n","category":"page"},{"location":"examples/Example225_NavierStokesAnderson2D/","page":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","title":"225 : Navier-Stokes Lid-driven cavity + Anderson Acceleration","text":"(Image: )","category":"page"},{"location":"pointevaluators/#Point-Evaluators","page":"Point Evaluators","title":"Point Evaluators","text":"","category":"section"},{"location":"pointevaluators/","page":"Point Evaluators","title":"Point Evaluators","text":"Point evaluators allow to evaluate the Solution at arbitrary points.","category":"page"},{"location":"pointevaluators/","page":"Point Evaluators","title":"Point Evaluators","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"pointevaluator.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pointevaluators/#GradientRobustMultiPhysics.PointEvaluator","page":"Point Evaluators","title":"GradientRobustMultiPhysics.PointEvaluator","text":"struct PointEvaluator{T<:Real, Tv<:Real, Ti<:Integer, FEType<:AbstractFiniteElement, FEOP<:??, AT<:AssemblyType, ACT<:AbstractAction}\n\nstructure that allows to evaluate a FEVectorBlock at arbitrary points\n\n\n\n\n\n","category":"type"},{"location":"pointevaluators/#GradientRobustMultiPhysics.PointEvaluator-Union{Tuple{Ti}, Tuple{Tv}, Tuple{T}, Tuple{FEVectorBlock{T, Tv, Ti}, Any}, Tuple{FEVectorBlock{T, Tv, Ti}, Any, AbstractAction}} where {T, Tv, Ti}","page":"Point Evaluators","title":"GradientRobustMultiPhysics.PointEvaluator","text":"function PointEvaluator(FEB::FEVectorBlock, FEOP::AbstractFunctionOperator, action::AbstractAction = NoAction(); AT = ON_CELLS)\n\nconstructor for PointEvaluator that evaluate the given FEVectorBlock with the specified operator (possibly postprocessed by an action) at arbitrary points inside entities of the given assembly type\n\n\n\n\n\n","category":"method"},{"location":"pointevaluators/#GradientRobustMultiPhysics.evaluate!-Union{Tuple{ACT}, Tuple{AT}, Tuple{FEOP}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}, Tuple{T}, Tuple{Any, PointEvaluator{T, Tv, Ti, FEType, FEOP, AT, ACT}, Any, Any}} where {T, Tv, Ti, FEType, FEOP, AT, ACT}","page":"Point Evaluators","title":"GradientRobustMultiPhysics.evaluate!","text":"function evaluate!(\n    result,                     # target for result\n    PE::PointEvaluator,         \n    xref,                       # local coordinates inside item\n    item                        # item number\n    ) where  {T, Tv, Ti, FEType, FEOP, AT, ACT}\n\nEvaluates the PointEvaluator at the point with the given local coordinates insides the item with the specified item number. (To get the local coordinates, currently a CellFinder has to be maintained manually, this might change in future.)\n\n\n\n\n\n","category":"method"},{"location":"pointevaluators/#GradientRobustMultiPhysics.evaluate-Tuple{PointEvaluator}","page":"Point Evaluators","title":"GradientRobustMultiPhysics.evaluate","text":"function evaluate(PE::PointEvaluator)\n\nReturns the function     (result,xref,cell) –> evaluate!(result,PE,xref,cell)\n\n(e.g. to be used as a callback function in vectorplot!)\n\n\n\n\n\n","category":"method"},{"location":"pointevaluators/#Noteworthy-Examples","page":"Point Evaluators","title":"Noteworthy Examples","text":"","category":"section"},{"location":"pointevaluators/","page":"Point Evaluators","title":"Point Evaluators","text":"Example 224 uses PointEvaluator to evaluate the pressure difference in a flow around an obstacle and to offer a callback function for a quiver plot.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/#A06-:-Local-Equilibrated-Fluxes-2D","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"","category":"section"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"(source code)","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This example computes a local equilibration error estimator for the H^1 error of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"eta^2(sigma_h) =  sigma_h - nabla u_h ^2_L^2(T)","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"where sigma_h discretisates the exact sigma in the dual mixed problem","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"sigma - nabla u = 0\nquad textand quad\nmathrmdiv(sigma) + f = 0","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"by some local equilibration strategy, see reference below for details.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This examples demonstrates the use of low-level structures to assemble individual problems and a strategy to solve several small problems in parallel by use of non-overlapping node patch groups.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"reference: Reference\n''A posteriori error estimates for efficiency and error control in numerical simulations'' Lecture Notes by M. Vohralik >Link<","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"module ExampleA06_LocalEquilibratedFluxes2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\nusing GridVisualize\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x)\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, order = 2, nlevels = 16, theta = 1//2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite elements for primal and dual problem (= for equilibrated fluxes)\n    # (local equilibration for Pk needs at least BDMk)\n    if order == 1\n        FEType = H1P1{1}\n        FETypeDual = HDIVBDM1{2}\n    elseif order == 2\n        FEType = H1P2{1,2}\n        FETypeDual = HDIVBDM2{2}\n    else\n        @error \"order must be 1 or 2\"\n    end\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_function!, [1,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 5)\n    ∇u = ∇(u)\n\n    # setup Poisson problem\n    Problem = PoissonProblem()\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = u)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # define error estimator : || sigma_h - nabla u_h ||^2_{L^2(T)}\n    # this can be realised via a kernel function\n    function eqestimator_kernel(result, input)\n        # input = [Identity(sigma_h), Divergence(sigma_h), Gradient(u_h)]\n        result[1] = (input[1] - input[4])^2 + (input[2] - input[5])^2 + input[3]^2\n        return nothing\n    end\n    estimator_action = Action(eqestimator_kernel, [1,5]; name = \"estimator kernel\", dependencies = \"\", bonus_quadorder = 3)\n    EQIntegrator = ItemIntegrator([Identity, Divergence, Gradient],estimator_action)\n\n    # setup exact error evaluations\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(∇u, Gradient)\n    L2ErrorDual = L2ErrorIntegrator(∇u, Identity)\n\n    # refinement loop (only uniform for now)\n    NDofs = zeros(Int, nlevels)\n    NDofsDual = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 4)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n        solve!(Solution, Problem)\n        NDofs[level] = length(Solution[1])\n\n        # evaluate eqilibration error estimator adn append it to Solution vector (for plotting etc.)\n        DualSolution = get_local_equilibration_estimator(xgrid, Solution, FETypeDual)\n        NDofsDual[level] = length(DualSolution.entries)\n        error4cell = zeros(Float64,1,num_sources(xgrid[CellNodes]))\n        evaluate!(error4cell, EQIntegrator, [DualSolution[1], DualSolution[1], Solution[1]])\n\n        if verbosity > 0\n            println(\"\\n  SOLVE LEVEL $level\")\n            println(\"    ndofs = $(NDofs[level])\")\n            println(\"    ndofsDual = $(NDofsDual[level])\")\n        end\n\n        # calculate L2 error, H1 error, estimator, dual L2 error and write to results\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1Error,Solution[1]))\n        Results[level,3] = sqrt(sum(view(error4cell,1,:)))\n        Results[level,4] = sqrt(evaluate(L2ErrorDual,DualSolution[1]))\n        if verbosity > 0\n            println(\"  ESTIMATE\")\n            println(\"    estim H1 error = $(Results[level,3])\")\n            println(\"    exact H1 error = $(Results[level,2])\")\n            println(\"     dual L2 error = $(Results[level,4])\")\n        end\n\n        if level == nlevels\n            break;\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, error4cell[:], theta)\n            xgrid = RGB_refine(xgrid, facemarker)\n        end\n    end\n\n    # plot\n    p=GridVisualizer(; Plotter=Plotter, layout=(2,2), clear = true, resolution=(1000,1000))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels=11, title = \"u_h\")\n    convergencehistory!(p[1,2], NDofs, Results; add_h_powers = [order,order+1], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\", \"|| ∇u - σ_h ||\"])\n    gridplot!(p[2,1], xgrid; linewidth = 1)\n    gridplot!(p[2,2], xgrid; linewidth = 1, xlimits = [-0.001,0.001], ylimits = [-0.001,0.001])\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\", \"|| ∇u - σ_h ||\"])\nend\n\n\n# this function computes the local equilibrated fluxes\n# by solving local problems on (disjunct group of) node patches\nfunction get_local_equilibration_estimator(xgrid::ExtendableGrid{Tv,Ti}, Solution::FEVector{T,Tv,Ti}, FETypeDual) where {T,Tv,Ti}\n    # needed grid stuff\n    xCellNodes::Array{Ti,2} = xgrid[CellNodes]\n    xCellVolumes::Array{Tv,1} = xgrid[CellVolumes]\n    xNodeCells::Adjacency{Ti} = atranspose(xCellNodes)\n    nnodes::Int = num_sources(xNodeCells)\n    ncells = size(xCellNodes,2)\n\n    # get node patch groups that can be solved in parallel\n    group4node = xgrid[NodePatchGroups]\n\n    # init equilibration space (and Lagrange multiplier space)\n    FESDual = FESpace{FETypeDual}(xgrid)\n    xItemDofs::Union{VariableTargetAdjacency{Ti},SerialVariableTargetAdjacency{Ti},Array{Ti,2}} = FESDual[CellDofs]\n    xItemDofs_uh::Union{VariableTargetAdjacency{Ti},SerialVariableTargetAdjacency{Ti},Array{Ti,2}} = Solution[1].FES[CellDofs]\n    DualSolution = FEVector{T}(\"σ_h\",FESDual)\n\n    # partition of unity and their gradients\n    POUFEType = H1P1{1}\n    POUFES = FESpace{POUFEType}(xgrid)\n    POUqf = QuadratureRule{Tv,Triangle2D}(0)\n\n    # quadrature formulas\n    qf = QuadratureRule{Tv,Triangle2D}(2*get_polynomialorder(FETypeDual, Triangle2D))\n    weights::Array{Tv,1} = qf.w\n\n    # some constants\n    div_penalty::T = 1e5\n    bnd_penalty::T = 1e30\n    maxdofs::Int = max_num_targets_per_source(xItemDofs)\n    maxdofs_uh::Int = max_num_targets_per_source(xItemDofs_uh)\n\n    # redistribute groups for more equilibrated thread load (first groups are larger)\n    maxgroups = maximum(group4node)\n    groups = Array{Int,1}(1 : maxgroups)\n    for j::Int = 1 : floor(maxgroups/2)\n        a = groups[j]\n        groups[j] = groups[2*j]\n        groups[2*j] = a\n    end\n    X = Array{Array{T,1},1}(undef,maxgroups)\n\n    Threads.@threads for group in groups\n        grouptime = @elapsed begin\n        @info \"  Starting equilibrating patch group $group on thread $(Threads.threadid())... \"\n        # temporary variables\n        localnode::Int = 0\n        graduh = zeros(T,2)\n        gradphi = zeros(Tv,2)\n        coeffs_uh = zeros(Tv, maxdofs_uh)\n        eval_i = zeros(Tv,2)\n        eval_j = zeros(Tv,2)\n        eval_phi = zeros(Tv,1)\n        cell::Int = 0\n        dofi::Int = 0\n        dofj::Int = 0\n        weight::Tv = 0\n        temp::Tv = 0\n        temp2::Tv = 0\n        temp3::Tv = 0\n        Alocal = zeros(Tv,maxdofs,maxdofs)\n        blocal = zeros(Tv,maxdofs)\n\n        # init FEBasiEvaluators\n        FEBasis_gradphi = FEBasisEvaluator{Tv,Triangle2D,Gradient,ON_CELLS}(POUFES, POUqf)\n        FEBasis_xref = FEBasisEvaluator{Tv,Triangle2D,Identity,ON_CELLS}(POUFES, qf)\n        FEBasis_graduh = FEBasisEvaluator{Tv,Triangle2D,Gradient,ON_CELLS}(Solution[1].FES, qf)\n        FEBasis_div = FEBasisEvaluator{Tv,Triangle2D,Divergence,ON_CELLS}(FESDual, qf)\n        FEBasis_id = FEBasisEvaluator{Tv,Triangle2D,Identity,ON_CELLS}(FESDual, qf)\n\n        # init system\n        A = ExtendableSparseMatrix{Tv,Int64}(FESDual.ndofs,FESDual.ndofs)\n        b = zeros(Tv,FESDual.ndofs)\n\n        # find dofs at boundary of current node patches\n        # and in interior of cells outside of current node patch group\n        is_noninvolveddof = zeros(Bool,FESDual.ndofs)\n        outside_cell::Bool = false\n        for cell = 1 : ncells\n            outside_cell = true\n            for k = 1 : 3\n                if group4node[xCellNodes[k,cell]] == group\n                    outside_cell = false\n                    break\n                end\n            end\n            if (outside_cell) # mark interior dofs of outside cell\n                for j = 1 : maxdofs\n                    is_noninvolveddof[xItemDofs[j,cell]] = true\n                end\n            end\n        end\n\n\n        for node = 1 : nnodes\n        if group4node[node] == group\n            for c = 1 : num_targets(xNodeCells,node)\n                cell = xNodeCells[c,node]\n\n                # find local node number of global node z\n                # and evaluate (constant) gradient of nodal basis function phi_z\n                localnode = 1\n                while xCellNodes[localnode,cell] != node\n                    localnode += 1\n                end\n                update_febe!(FEBasis_gradphi,cell)\n                eval_febe!(gradphi, FEBasis_gradphi, localnode, 1)\n\n                # read coefficients for discrete flux\n                for j=1:maxdofs_uh\n                    coeffs_uh[j] = Solution[1].entries[xItemDofs_uh[j,cell]]\n                end\n\n                # update other FE evaluators\n\n                update_febe!(FEBasis_graduh,cell)\n                update_febe!(FEBasis_div,cell)\n                update_febe!(FEBasis_id,cell)\n\n                # assembly on this cell\n                for i in eachindex(weights)\n                    weight = weights[i] * xCellVolumes[cell]\n\n                    # evaluate grad(u_h) and nodal basis function at quadrature point\n                    fill!(graduh,0)\n                    eval_febe!(graduh, FEBasis_graduh, coeffs_uh, i)\n                    eval_febe!(eval_phi, FEBasis_xref, localnode, i)\n\n                    # compute residual -f*phi_z + grad(u_h) * grad(phi_z) at quadrature point i ( f = 0 in this example !!! )\n                    temp2 = div_penalty * sqrt(xCellVolumes[cell]) * weight\n                    temp = temp2*( graduh[1] * gradphi[1] + graduh[2] * gradphi[2] )\n                    for dof_i = 1 : maxdofs\n                        eval_febe!(eval_i, FEBasis_id, dof_i, i)\n                        eval_i .*= weight\n                        # right-hand side for best-approximation (grad(u_h)*phi)\n                        blocal[dof_i] += (graduh[1]*eval_i[1] + graduh[2]*eval_i[2]) * eval_phi[1]\n                        # mass matrix Hdiv\n                        for dof_j = dof_i : maxdofs\n                            eval_febe!(eval_j, FEBasis_id, dof_j, i)\n                            Alocal[dof_i,dof_j] += (eval_i[1]*eval_j[1] + eval_i[2]*eval_j[2])\n                        end\n                        # div-div matrix Hdiv * penalty (quick and dirty to avoid Lagrange multiplier)\n                        eval_febe!(eval_i, FEBasis_div, dof_i, i)\n                        blocal[dof_i] += temp * eval_i[1]\n                        temp3 = temp2 * eval_i[1]\n                        for dof_j = dof_i : maxdofs\n                            eval_febe!(eval_j, FEBasis_div, dof_j, i)\n                            Alocal[dof_i,dof_j] += temp3*eval_j[1]\n                        end\n                    end\n                end\n\n                # write into global A and b\n                for dof_i = 1 : maxdofs\n                    dofi = xItemDofs[dof_i,cell]\n                    b[dofi] += blocal[dof_i]\n                    for dof_j = 1 : maxdofs\n                        dofj = xItemDofs[dof_j,cell]\n                        if dof_j < dof_i # use that Alocal is symmetric\n                            _addnz(A,dofi,dofj,Alocal[dof_j,dof_i],1)\n                        else\n                            _addnz(A,dofi,dofj,Alocal[dof_i,dof_j],1)\n                        end\n                    end\n                end\n\n                # reset local A and b\n                fill!(Alocal,0)\n                fill!(blocal,0)\n            end\n        end\n        end\n\n        # penalize dofs that are not involved\n        for j = 1 : FESDual.ndofs\n            if is_noninvolveddof[j]\n                A[j,j] = bnd_penalty\n                b[j] = 0\n            end\n        end\n\n        # solve local problem\n        X[group] = A\\b\n    end\n\n    @info \"Finished equilibration patch group $group on thread $(Threads.threadid()) in $(grouptime)s \"\n    end\n\n    # write local solutions to global vector\n    for group = 1 : maxgroups\n        DualSolution[1].entries .+= X[group]\n    end\n\n    return DualSolution\nend\n\nend","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"Default output:","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"julia> ExampleA06_LocalEquilibratedFluxes2D.main()\n\n    ndofs   |   || u - u_h ||    order | || ∇(u - u_h) ||   order |         η          order |  || ∇u - σ_h ||    order |\n============|==========================|==========================|==========================|==========================|\n        21  |     2.513e-02      0.00  |     2.076e-01      0.00  |     2.530e-01      0.00  |     1.278e-01      0.00  |\n        43  |     1.682e-02      1.12  |     1.477e-01      0.95  |     1.819e-01      0.92  |     8.682e-02      1.08  |\n        66  |     6.141e-03      4.70  |     9.466e-02      2.08  |     1.177e-01      2.03  |     5.751e-02      1.92  |\n        92  |     2.769e-03      4.80  |     6.249e-02      2.50  |     7.659e-02      2.59  |     3.658e-02      2.72  |\n       118  |     1.868e-03      3.16  |     4.365e-02      2.88  |     5.180e-02      3.14  |     2.309e-02      3.70  |\n       144  |     1.670e-03      1.13  |     3.336e-02      2.70  |     3.784e-02      3.15  |     1.499e-02      4.34  |\n       209  |     1.406e-03      0.92  |     2.648e-02      1.24  |     2.894e-02      1.44  |     9.960e-03      2.19  |\n       308  |     7.717e-04      3.10  |     1.970e-02      1.53  |     2.120e-02      1.60  |     7.038e-03      1.79  |\n       376  |     3.861e-04      6.94  |     1.378e-02      3.58  |     1.468e-02      3.68  |     4.506e-03      4.47  |\n       504  |     2.808e-04      2.17  |     1.009e-02      2.13  |     1.058e-02      2.24  |     2.909e-03      2.99  |\n       797  |     1.446e-04      2.90  |     6.601e-03      1.85  |     6.922e-03      1.85  |     1.880e-03      1.91  |\n      1092  |     7.878e-05      3.86  |     4.609e-03      2.28  |     4.808e-03      2.31  |     1.273e-03      2.47  |\n      1540  |     4.139e-05      3.74  |     3.177e-03      2.16  |     3.295e-03      2.20  |     8.058e-04      2.66  |\n      2168  |     2.488e-05      2.98  |     2.156e-03      2.27  |     2.227e-03      2.29  |     5.414e-04      2.33  |\n      3228  |     1.311e-05      3.22  |     1.451e-03      1.99  |     1.494e-03      2.01  |     3.478e-04      2.22  |\n      4776  |     6.827e-06      3.33  |     9.602e-04      2.11  |     9.893e-04      2.11  |     2.199e-04      2.34  |","category":"page"},{"location":"examples/ExampleA06_LocalEquilibratedFluxes2D/","page":"A06 : Local Equilibrated Fluxes 2D","title":"A06 : Local Equilibrated Fluxes 2D","text":"(Image: )","category":"page"},{"location":"pdeoperators/#PDE-Operators","page":"PDE Operators","title":"PDE Operators","text":"","category":"section"},{"location":"pdeoperators/#Purpose","page":"PDE Operators","title":"Purpose","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"The PDEDescription consists of PDEOperators characterising some feature of the model (like friction, convection, exterior forces, optimality conditions etc.) and describe the continuous weak form of the PDE. They can be separated roughly into two categories: linear operators and nonlinear operators.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"GradientRobustMultiPhysics.PDEOperator","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.PDEOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.PDEOperator","text":"mutable struct PDEOperator{T<:Real, APT<:AssemblyPatternType, AT<:AssemblyType} <: AbstractPDEOperator\n\ncommon structures for all finite element operators that are assembled with GradientRobustMultiPhysics; better look at the AssemblyPatternType and the constructors\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"The following table lists all available operators and available physics-motivated constructors for them. Click on them or scroll down to find out more details.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Main constructors Special constructors Mathematically\nLinearForm  (mathrmA() mathrmFO(v))\nBilinearForm  (mathrmA(mathrmFO_1(u)) mathrmFO_2(v)) or (mathrmFO_1(u) mathrmA(mathrmFO_2(v)))\n LaplaceOperator (kappa nabla u nabla v)\n ReactionOperator (alpha u v)\n LagrangeMultiplier (mathrmFO_1(u) v) (automatically assembles 2nd transposed block)\n ConvectionOperator (beta cdot nabla u v) (beta is function or registered unknown)\n HookStiffnessOperator2D (mathbbC epsilon(u) epsilon(v)) (also 1D or 3D variants exist)\n ConvectionRotationFormOperator ((a times nabla) u v) (a is registered unknown, only 2D for now)\nNonlinearForm  ","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Legend: mathrmFO  are placeholders for Function Operators, and mathrmA stands for a (linear) Action (its role is explained in the main constructors).","category":"page"},{"location":"pdeoperators/#Assembly-Type","page":"PDE Operators","title":"Assembly Type","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Many PDE operators need a specification that decides on which set of entities of the mesh (e.g. cells, faces, bfaces, edges) a PDEOperator lives and has to be assembled. This can be steered by the AssemblyType of ExtendableGrids. The AssemblyType can be also used as an argument for Finite Element Interpolations. The following AssemblyTypes are available. ","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"AssemblyType Description\nAT_NODES interpolate at vertices of the mesh (only for H1-conforming FEM)\nON_CELLS assemble/interpolate on the cells of the mesh\nON_FACES assemble/interpolate on all faces of the mesh\nON_IFACES assemble/interpolate on the interior faces of the mesh\nON_BFACES assemble/interpolate on the boundary faces of the mesh\nON_EDGES (*) assemble/interpolate on all edges of the mesh (in 3D)\nON_BEDGES (*) assemble/interpolate on the boundary edges of the mesh (in 3D)","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"note: Note\n(*) = only reasonable in 3D and still experimental, might have some issues","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"assemblytypes.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdeoperators/#Custom-Linear-Operators","page":"PDE Operators","title":"Custom Linear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"It is possible to define custom linearforms and bilinearforms by specifying Function Operators an Action that determines how the operators are combined for the dot-product with the test function operator.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"LinearForm\nBilinearForm","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.LinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.LinearForm","text":"LinearForm(operator::Type{<:??}, action::AbstractAction; name, AT, regions, factor, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\n\n\ngenerates a LinearForm L(v) = (f,operator(v)) from an action\n\noperator : operator applied to test function\naction   : action that computes a result to be multiplied with test function operator\n\nOptional arguments:\n\nregions           : specifies in which regions the operator should assemble, default [0] means all regions\nname              : name for this LinearForm that is used in print messages\nAT                : specifies on which entities of the grid the LinearForm is assembled (default: ON_CELLS)\nfactor            : additional factor that is multiplied during assembly\nstore             : stores a vector of the discretised LinearForm with the latest assembly result\n\nDetails on the action: The action is an Action consisting of a kernel function with interface (result, input, ...) and additional argument information. During assembly input is ignored (only in this constructor for LinearForms). The result computed by the kernel function is multiplied (dot product) with the operator evaluation of the test function.\n\n\n\n\n\nLinearForm(operator::Type{<:??}, f::GradientRobustMultiPhysics.AbstractUserDataType; name, kwargs...) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\n\n\ngenerates a LinearForm L(v) = (f,operator(v)) from a DataFunction\n\noperator : operator applied to test function\naction   : DataFunction, evaluation is multiplied with test function operator\n\nOptional arguments:\n\nregions           : specifies in which regions the operator should assemble, default [0] means all regions\nname              : name for this LinearForm that is used in print messages\nAT                : specifies on which entities of the grid the LinearForm is assembled (default: ON_CELLS)\nfactor            : additional factor that is multiplied during assembly\nstore             : stores a vector of the discretised LinearForm with the latest assembly result\n\n\n\n\n\nLinearForm(operator_test::Type{<:??})\nLinearForm(operator_test::Type{<:??}, operators_current::Vector{DataType}) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\nLinearForm(operator_test::Type{<:??}, operators_current::Vector{DataType}, coeff_from::Vector{Int64}) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\nLinearForm(operator_test::Type{<:??}, operators_current::Vector{DataType}, coeff_from::Vector{Int64}, action::AbstractAction; regions, name, AT, factor, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, LinearForm, ON_CELLS}\n\n\nCreates a (PDE description level) LinearForm based on:\n\noperator_test     : operator for the test function (assumes linearity for that part)\noperators_current : additional operators for other unknowns\ncoefffrom        : either PDE unknown ids or block ids for CurrentSolution given to assemblyoperator! that should be used for operators_current\naction            : an Action with kernel of interface (result, input, kwargs) that takes input (= all but last operator evaluations) and computes result to be dot-producted with test function evaluation                     (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\nregions: specifies in which regions the operator should assemble, default [0] means all regions\nname : name for this LinearForm that is used in print messages\nAT : specifies on which entities of the grid the LinearForm is assembled (default: ON_CELLS)\nfactor : additional factor that is multiplied during assembly\nstore : stores a vector of the LinearForm with the latest assembly result (e.g. when the operators sits in a system block that has to be reassembled in an iterative scheme)\n\nDetails on the action: The action is an Action consisting of a kernel function with interface (result, input, ...) and additional argument information. During assembly input will be filled with the operator evaluations of the other unknowns (i.e. operatorscurrent). The result computed by the kernel function is multiplied (dot product) with the operator evaluation of the test function (i.e. operatortest). If no action is given, the assembly tries to multiply the operator evaluations (that would have been given as input) directly.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.BilinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.BilinearForm","text":"BilinearForm(operators_linear::Vector{DataType}, operators_current::Vector{DataType}, coeff_from::Vector{Int64}, action::AbstractAction; name, AT, APT, apply_action_to, factor, regions, transposed_assembly, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\ngenerates a BilinearForm defined by the following arguments:\n\noperators_linear  : operator for the two linear arguments (usually ansatz and test function)\noperators_current : additional operators for other unknowns\ncoefffrom        : either PDE unknown ids or block ids for CurrentSolution given to assemblyoperator! that should be used for operators_current\naction            : tells how to further combine the operatorscurrent+operatoransatz evaluations (=input of action) to a result that is multiplied with the test function operator                     (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\napplyactionto   : specifies which of the two linear arguments is part of the action input ([1] = ansatz, [2] = test)\nregions           : specifies in which regions the operator should assemble, default [0] means all regions\nname              : name for this BilinearForm that is used in print messages\nAT                : specifies on which entities of the grid the BilinearForm is assembled (default: ON_CELLS)\nAPT               : specifies the subtype of the APT_BilinearForm AssemblyPattern used for assembly (e.g. for lumping (wip))\nfactor            : additional factor that is multiplied during assembly\ntransposed_assembly : transposes the resulting assembled matrix\nstore             : stores a matrix of the BilinearForm with the latest assembly result                     (e.g. when the operators sits in a system block that has to be reassembled in an iterative scheme)\n\nDetails on the action: The action is an Action consisting of a kernel function with interface (result, input, ...) and additional argument information. During assembly input will be filled with the operator evaluations of the other unknowns (i.e. operatorcurrent, if specified) and appended to that the operator evaluation of one of the two linear argument (decided by applyaction_to). The result computed by the kernel function is multiplied (dot product) with the operator evaluation of the other linear argument. If no action is given, the assembly tries to multiply the operator evaluations (that would have been given as input) directly.\n\n\n\n\n\nBilinearForm(operators_linear::Vector{DataType}) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\nBilinearForm(operators_linear::Vector{DataType}, action::AbstractAction; kwargs...) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nsame as other constructor but with operators_current = \n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Special-Linear-Operators","page":"PDE Operators","title":"Special Linear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Below you find special constructors of available common linear and bilinear forms.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"LaplaceOperator\nReactionOperator\nLagrangeMultiplier\nConvectionOperator\nConvectionRotationFormOperator\nHookStiffnessOperator1D\nHookStiffnessOperator2D\nHookStiffnessOperator3D","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.LaplaceOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.LaplaceOperator","text":"LaplaceOperator() -> GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}\nLaplaceOperator(κ; name, AT, ∇, regions, store) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}}\n\n\nconstructor for a bilinearform that describes a(u,v) = κ (∇u,∇v) where kappa is some constant (diffusion) coefficient.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ReactionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ReactionOperator","text":"ReactionOperator() -> GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}\nReactionOperator(α) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}, GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}}\nReactionOperator(α, ncomponents; name, AT, id, regions, store) -> Union{Nothing, GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}, GradientRobustMultiPhysics.PDEOperator{Float64, SymmetricBilinearForm, ON_CELLS}}\n\n\nconstructor for a bilinearform a(u,v) = (αu,v) or (u,αv) with some coefficient α that can be a number or an AbstractDataFunction.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.LagrangeMultiplier","page":"PDE Operators","title":"GradientRobustMultiPhysics.LagrangeMultiplier","text":"LagrangeMultiplier(operator::Type{<:??}; name, AT, action, regions, store, factor) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = (A(operator(u)), id(v)) and assembles a second transposed block at the block of the transposed PDE coordinates. It is intended to use to render one unknown of the PDE the Lagrange multiplier for another unknown by putting this operator on the coressponding subdiagonal block of the PDE description.\n\nExample: LagrangeMultiplier(Divergence) is used to render the pressure the LagrangeMultiplier for the velocity divergence constraint in the Stokes prototype.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ConvectionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ConvectionOperator","text":"ConvectionOperator(a_from::Int64, a_operator::Type{<:??}, xdim::Int64, ncomponents::Int64; name, AT, a_to, factor, ansatz_operator, test_operator, regions, newton, store, transposed_assembly, bonus_quadorder) -> Union{GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}, GradientRobustMultiPhysics.PDEOperator{Float64, NonlinearForm, ON_CELLS}}\n\n\nconstructs a convection term of the form c(a,u,v) = (aoperator(a)*ansatzoperator(u),test_operator(v)) as a BilinearForm (or NonlinearForm, see newton argument)\n\na_from      : id of registered unknown to be used in the spot a\na_operator  : operator applied to a\nxdim        : expected space dimension\nncomponents : expected numer of components of a\n\noptional arguments:\n\nnewton          : generates a NonlinearForm instead of a BilinearForm that triggers assembly of Newton terms for c(u,u,v)\nato            : position of a argument, set ato = 2 to trigger assembly of c(u,a,v)\nansatz_operator : operator used in the spot u (default: Gradient)\ntest_operator   : operator used in the spot v (default: Identity)\nfactor          : additional factor multiplied in assemblxy (default: 1)\nregions         : specifies in which regions the operator should assemble, default [0] means all regions\nname            : name for this operator that is used in print messages\nAT              : specifies on which entities of the grid the operator is assembled (default: ON_CELLS)\nstore           : stores a matrix of the operator with the latest assembly result\n\n\n\n\n\nConvectionOperator(β::GradientRobustMultiPhysics.AbstractUserDataType, ncomponents::Int64; name, store, AT, ansatz_operator, test_operator, transposed_assembly, regions) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform that describes a(u,v) = ((β ⋅ ∇) u,v) with some user-specified DataFunction β. The user also has to specify the number of components (ncomponents) the convection is applied to. The operators for u and v can be changed (if this leads to something reasonable).\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.ConvectionRotationFormOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.ConvectionRotationFormOperator","text":"ConvectionRotationFormOperator(beta::Int64, beta_operator::Type{<:??}, xdim::Int64, ncomponents::Int64; name, AT, factor, ansatz_operator, test_operator, regions)\n\n\nconstructor for a bilinearform a(u,v) = (beta x curl(u),v) where beta is the id of some unknown vector field of the PDEDescription, u and v are also vector-fields and x is the cross product (so far this is only implemented in 2D)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator1D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator1D","text":"HookStiffnessOperator1D(μ; name, regions, ∇, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform a(u,v) = (μ ∇u,∇v) where C is the 1D stiffness tensor for given μ.\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator2D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator2D","text":"HookStiffnessOperator2D(μ, λ; name, AT, regions, ϵ, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform a(u,v) = (C ϵ(u), ϵ(v)) where C is the 2D stiffness tensor for isotropic media in Voigt notation, i.e. C ϵ(u) = 2 μ ϵ(u) + λ tr(ϵ(u)) for Lame parameters μ and λ\n\nIn Voigt notation C is a 3 x 3 matrix\nC = [c11,c12,  0\n     c12,c11,  0\n       0,  0,c33]\n\nwhere c33 = μ, c12 = λ and c11 = 2*c33 + c12\n\nNote: ϵ is the symmetric part of the gradient (in Voigt notation)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#GradientRobustMultiPhysics.HookStiffnessOperator3D","page":"PDE Operators","title":"GradientRobustMultiPhysics.HookStiffnessOperator3D","text":"HookStiffnessOperator3D(μ, λ; name, AT, regions, ϵ, store) -> GradientRobustMultiPhysics.PDEOperator{Float64, BilinearForm, ON_CELLS}\n\n\nconstructor for a bilinearform a(u,v) = (C ϵ(u), ϵ(v)) where C is the 3D stiffness tensor for isotropic media in Voigt notation, i.e. C ϵ(u) = 2 μ ϵ(u) + λ tr(ϵ(u)) for Lame parameters μ and λ\n\nIn Voigt notation C is a 6 x 6 matrix\nC = [c11,c12,c12,  0,  0,  0\n     c12,c11,c12,  0,  0,  0\n     c12,c12,c11,  0,  0,  0\n       0,  0,  0,c44,  0,  0\n       0,  0,  0,  0,c44,  0\n       0,  0,  0,  0,  0,c44]   \n\nwhere c44 = μ, c12 = λ and c11 = 2*c44 + c12\n\nNote: ϵ is the symmetric part of the gradient (in Voigt notation)\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Examples","page":"PDE Operators","title":"Examples","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Below some examples for operators for custom forms are given:","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"# Example 1 : div-div bilinearform with a factor λ (e.g. for divergence-penalisation)\noperator = BilinearForm([Divergence,Divergence]; factor = λ, name = \"λ (div(u),div(v))\")\n\n# Example 2 : Gradient jump stabilisation with an item-dependent action and a factor s (e.g. for convection stabilisation)\nxFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\nfunction stabilisation_kernel(result, input, item)\n    result .= input \n    result .*= xFaceVolumes[item]^2\nend\naction = Action(stabilisation_kernel, [2,2]; dependencies = \"I\", quadorder = 0 )\noperator = BilinearForm([Jump(Gradient), Jump(Gradient)], action; AT = ON_IFACES, factor = s, name = \"s |F|^2 [∇(u)]⋅[∇(v)]\")\n","category":"page"},{"location":"pdeoperators/#Nonlinear-Operators","page":"PDE Operators","title":"Nonlinear Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"Nonlinear Operators can be used to auotmatically setup the required Newton terms for the fixpoint algorithms. If the user does not define the jacobian for the kernel function, automatic differentation is used to compute them (with optional sparsity detection), see below for details.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"NonlinearForm","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.NonlinearForm","page":"PDE Operators","title":"GradientRobustMultiPhysics.NonlinearForm","text":"NonlinearForm(operator_test::Type{<:??}, operators_current::Vector{DataType}, coeff_from::Vector{Int64}, action_kernel, argsizes::Vector{Int64}; name, AT, newton, sparse_jacobian, jacobian, dependencies, bonus_quadorder, store, factor, regions) -> GradientRobustMultiPhysics.PDEOperator{Float64, NonlinearForm, ON_CELLS}\n\n\ngenerates a NonlinearForm defined by the following arguments:\n\noperator_test     : operator for the test function\noperators_current : additional operators for other unknowns\ncoefffrom        : either PDE unknown ids or block ids for CurrentSolution given to assemblyoperator! that should be used for operators_current\naction_kernel     : function of interface (result, input, ...) that computes the nonlinear quantity that should be multiplied with the testfunction operator\nargsizes          : dimensions of [result, input] of kernel function\n\nOptional arguments:\n\ndependencies      : code String for additional dependencies of the kernel/jacobians (substring of \"XTI\")\njacobian          : default = \"auto\" triggers automatic computation of jacobians by ForwardDiff, otherwise user can specify a function of interface (jacobian, input, ...) with matching dimensions and dependencies\nsparse_jacobian   : use sparsity detection and sparse matrixes for local jacobians ?\nregions           : specifies in which regions the operator should assemble, default [0] means all regions\nname              : name for this NonlinearForm that is used in print messages\nAT                : specifies on which entities of the grid the NonlinearForm is assembled (default: ON_CELLS)\nfactor            : additional factor that is multiplied during assembly\nstore             : stores a matrix of the discretised NonlinearForm with the latest assembly result\nbonus_quadorder   : increases the quadrature order in assembly accordingly (additional to usual quadorder based on used FESpaces)\n\nSome details: Given some operator G(u), the Newton iteration reads DG u_next = DG u - G(u) which is added to the rest of the (linear) operators in the PDEDescription. The local jacobians (= jacobians of the operator kernel) to build DG needed for this are computed by automatic differentation (ForwardDiff). The user can also specify a jacobian kernel function by hand (which may improve assembly times).\n\nFor default dependencies both the kernel functions for the operator and its jacobian have to satisfy the interface\n\nfunction name(result,input,...)\n\nwhere input is a vector of the operators of the solution and result is either what then is multiplied with operator2 of the testfunction (or the jacobian).\n\n\n\n\n\n","category":"function"},{"location":"pdeoperators/#Other-Operators","page":"PDE Operators","title":"Other Operators","text":"","category":"section"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"There are some more operators that do not fit into the structures above. Also, in the future, the goal is to open up the operator level for exterior code to setup operators that are assembled elsewhere.","category":"page"},{"location":"pdeoperators/","page":"PDE Operators","title":"PDE Operators","text":"FVConvectionDiffusionOperator\nDiagonalOperator\nCopyOperator","category":"page"},{"location":"pdeoperators/#GradientRobustMultiPhysics.FVConvectionDiffusionOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.FVConvectionDiffusionOperator","text":"FVConvectionDiffusionOperator(beta_from::Int64; μ) -> FVConvectionDiffusionOperator{Float64}\n\n\nfinite-volume convection diffusion operator (for cell-wise P0 rho)\n\ndiv(μ ∇ρ + β ρ)\n\nFor μ = 0, the upwind divergence div_upw(β ρ) is generated  For μ > 0, TODO\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.DiagonalOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.DiagonalOperator","text":"DiagonalOperator() -> DiagonalOperator{Float64}\nDiagonalOperator(value::Real; name, onlynz, regions) -> DiagonalOperator\n\n\nputs value on the diagonal entries of the cell dofs within given regions\n\nif onlyz == true only values that are zero are changed\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"type"},{"location":"pdeoperators/#GradientRobustMultiPhysics.CopyOperator","page":"PDE Operators","title":"GradientRobustMultiPhysics.CopyOperator","text":"CopyOperator(copy_from, factor) -> CopyOperator\n\n\ncopies entries from TargetVector to rhs block\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdeprototypes/#PDE-Prototypes","page":"PDE Prototypes","title":"PDE Prototypes","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Below all available prototypes (i.e. pre-defined constructors for PDEDescription) are listed. They can be used as a point of deperature for more complex models. Also have a look in to the examples for more complex model problems.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"note: Note\nFor most prototypes boundary data and right-hand side data or other modifications to the weak form of the PDE have to be added after a proto-type constructor has been called, see the examples for further assistance.","category":"page"},{"location":"pdeprototypes/#Poisson-equation","page":"PDE Prototypes","title":"Poisson equation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Poisson equation seeks a function u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mu Delta u = f","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some diffusion coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mu nabla unabla v)  = (fv) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"PoissonProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.PoissonProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.PoissonProblem","text":"function PoissonProblem(diffusion = 1.0)\n\nCreates a PDEDescription for a Poisson problem with globally constant diffusion parameter.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"dual weak formulations are also possible but are not available as a prototype currently","category":"page"},{"location":"pdeprototypes/#Incompressible-Navier–Stokes-equations","page":"PDE Prototypes","title":"Incompressible Navier–Stokes equations","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier–Stokes equations in d dimensions seek a (vector-valued) velocity mathbfu and a pressure p such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some viscosity coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The weak formulation (for homogeneous Dirichlet boundary data) seeks (mathbfup) such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n(mu nabla mathbfunabla mathbfv) + ((u cdot nabla) mathbfu mathbfv) + (mathrmdiv mathbfv p)  = (mathbffmathbfv)  textfor all  mathbfvin H^1_0(Omega)^d\n(mathrmdiv mathbfu q)  = 0  textfor all  q in L^2_0(Omega)\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"IncompressibleNavierStokesProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","text":"function IncompressibleNavierStokesProblem(\n    dimension::Int = 2;\n    viscosity = 1.0,\n    nonlinear::Bool = false,\n    newton::Bool = false,\n    nopressureconstraint::Bool = false,\n    pmean = 0)\n\nCreates a PDEDescription for the incompressible (Navier-)Stokes equations of the specified dimension and globally constant viscosity parameter. If nonlinear = true the nonlinear convection term is added to the PDEDescription. If also newton = true, a Newton iteration is devised for the convection term.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"if nonlinear == false the nonlinear convection term is not added to the equation resulting in the plain Stokes equations.\nif nopressureconstraint == true removes the integral mean constraint on the pressure.","category":"page"},{"location":"pdeprototypes/#Navier-Lame-equations-(linear-elasticity)","page":"PDE Prototypes","title":"Navier-Lame equations (linear elasticity)","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier-Lame equations seek a displacement mathbfu such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mathrmdiv( mathbbC epsilon( mathbfu)) = mathbff","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where epsilon( mathbfu) is the symmetric part of the gradient, mathbbC is the stiffness tensor (according to Hooke's law) and mathbff some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"In 1D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = mu nabla u","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is the elasticity modulus. In 2D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu and lambda are the Lame coefficients.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mathbbC epsilon(mathbfu)epsilon(mathbfv)) = (mathbffmathbfv) quad textfor all  vin H^1_0(Omega)^d","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"LinearElasticityProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.LinearElasticityProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.LinearElasticityProblem","text":"function LinearElasticityProblem(\n    dimension::Int = 2;\n    elasticity_modulus = 1.0,\n    shear_modulus = 1.0,\n    lambda = 1.0)\n\nCreates a PDEDescription for the linear elasticity problem of the specified dimension.\n\nIf dimension == 1, only the elasticitymodulus is used as a parameter in the Hookian stiffness operator. If dimension == 2, shearmodulus and lambda are used as Lame parameters in the Hookian stiffness operator.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/#L2-Bestapproximation","page":"PDE Prototypes","title":"L2-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an L2-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(uv) = (u_textexactv) quad textfor all  vin L^2(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Of course, on the continuous level, it holds u = u_textexact, but if the weak formulation is assembled for a finite element space one obtains a discrete L2-bestapproximation for this space.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"L2BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.L2BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.L2BestapproximationProblem","text":"function L2BestapproximationProblem(\n    uexact::AbstractUserDataType;\n    bonus_quadorder::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an L2-Bestapproximation problem for the given exact function. Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/#H1-Bestapproximation","page":"PDE Prototypes","title":"H1-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an H1-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(nabla unabla v) = (nabla u_textexact nabla v) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"H1BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.H1BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.H1BestapproximationProblem","text":"function H1BestapproximationProblem(\n    exact_function_gradient::AbstractUserDataType,\n    exact_function_boundary::AbstractUserDataType;\n    bonus_quadorder::Int = 0,\n    bonus_quadorder_boundary::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an H1-Bestapproximation problem for the given exact function (only used on the boundary) and its exact gradient (used in the right-hand side). Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example202_LinearElasticity2D/#:-Linear-Elasticity","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"","category":"section"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"(source code)","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"This example computes the solution mathbfu of the linear elasticity problem","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"beginaligned\n-mathrmdiv (mathbbC epsilon(mathbfu))  = mathbff quad textin  Omega\nmathbbC epsilon(mathbfu) cdot mathbfn  = mathbfg quad textalong  Gamma_N\nendaligned","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"with exterior force mathbff, Neumann boundary force mathbfg, and the stiffness tensor","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"mathbbC epsilon(mathbfu) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"for isotropic media.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"The domain will be the Cook membrane and the displacement has homogeneous boundary conditions on the left side of the domain and Neumann boundary conditions (i.e. a constant force that pulls the domain upwards) on the right side.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"module Example202_LinearElasticity2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\nconst g = DataFunction([0,10]; name = \"g\")\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, E = 1000, ν = 0.4, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_cookmembrane.sg\")\n    xgrid = uniform_refine(xgrid,2)\n\n    # compute Lame' coefficients from E and ν\n    μ = (1/(1+ν))*E\n    λ = (ν/(1-2*ν))*μ\n\n    # PDE description via prototype and add data\n    Problem = LinearElasticityProblem(2; shear_modulus = μ, lambda = λ)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, g; regions = [2], AT = ON_BFACES))\n    add_boundarydata!(Problem, 1, [4], HomogeneousDirichletBoundary)\n\n    # show and solve PDE\n    @show Problem\n    FEType = H1P1{2} # P1-Courant FEM will be used\n    Solution = FEVector(\"u_h\",FESpace{FEType}(xgrid))\n    solve!(Solution, Problem)\n\n    # plot stress on displaced mesh\n    displace_mesh!(xgrid, Solution[1]; magnify = 4)\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]; abs = true),1,:), levels = 7, title = \"u_h\")\n    vectorplot!(p[1,1], xgrid, evaluate(PointEvaluator(Solution[1], Identity)), spacing = 5, clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], SymmetricGradient{1/√2}; abs = true),1,:), levels = 7, title = \"ϵ(u_h) (abs)\")\nend\n\nend","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"Default output:","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"julia> Example202_LinearElasticity2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = linear elasticity problem\n\n     id   | unknown name / equation name\n    [1]   | u / displacement equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (C(μ,λ) ϵ(u),ϵ(v)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (g, id(v)) (APT = LinearForm, AT = ON_BFACES, regions = [2])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [4]\n                          \n\n","category":"page"},{"location":"examples/Example202_LinearElasticity2D/","page":"202 : Linear Elasticity","title":"202 : Linear Elasticity","text":"(Image: )","category":"page"},{"location":"examples/Example227_FlowTransport2D/#:-Flow-Transport-2D","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"","category":"section"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"(source code)","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"This example solve the Stokes problem in a Omega-shaped pipe and then uses the velocity in a transport equation for a species with a certain inlet concentration. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a species concentration mathbfc such that","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"beginaligned\n- mu Delta mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\n- kappa Delta mathbfc + mathbfu cdot nabla mathbfc  = 0\nendaligned","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"with some viscosity parameter  and diffusion parameter kappa.","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"The diffusion coefficient for the species is chosen (almost) zero such that the isolines of the concentration should stay parallel from inlet to outlet. For the discretisation of the convection term in the transport equation two three possibilities can be chosen:","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"Classical finite element discretisations mathbfu_h cdot nabla mathbfc_h\nPressure-robust finite element discretisation Pi_textreconst mathbfu_h cdot nabla mathbfc_h with some divergence-free reconstruction operator Pi_textreconst\nUpwind finite volume discretisation for kappa = 0 based on normal fluxes along the faces (also divergence-free in finite volume sense)","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"Observe that a pressure-robust Bernardi–Raugel discretisation preserves this much better than a classical Bernardi–Raugel method. For comparison also a Taylor–Hood method can be switched on which is comparable to the pressure-robust lowest-order method in this example.","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"Note, that the transport equation is very convection-dominated and no stabilisation in the finite element discretisations was used here (but instead a nonzero kappa). The results are very sensitive to kappa and may be different if a stabilisation is used (work in progress). Also note, that only the finite volume discretisation perfectly obeys the maximum principle for the concentration but the isolines do no stay parallel until the outlet is reached, possibly due to articifial diffusion.","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"module Example227_FlowTransport2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# boundary data\nfunction inlet_velocity!(result,x)\n    result[1] = 4*x[2]*(1-x[2]);\n    result[2] = 0;\nend\nfunction inlet_concentration!(result,x)\n    result[1] = 1-x[2];\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nrefinements = 5, Plotter = nothing, FVtransport = true, viscosity = 1)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_upipe.sg\")\n    xgrid = uniform_refine(xgrid,nrefinements)\n\n    # choose one of these (inf-sup stable) finite element type pairs for the flow\n    #FETypes = [H1P2{2,2}, H1P1{1}]; postprocess_operator = Identity # Taylor--Hood\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = Identity # Bernardi--Raugel\n    FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVRT0{2}} # Bernardi--Raugel pressure-robust (RT0 reconstruction)\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVBDM1{2}} # Bernardi--Raugel pressure-robust (BDM1 reconstruction)\n\n    #####################################################################################\n\n    # negotiate data functions to the package\n    u_inlet = DataFunction(inlet_velocity!, [2,2]; name = \"u (inlet)\", dependencies = \"X\", bonus_quadorder = 2)\n    c_inlet = DataFunction(inlet_concentration!, [1,2]; name = \"c (inlet)\", dependencies = \"X\", bonus_quadorder = 1)\n\n    # load Stokes problem prototype and assign boundary data\n    # (inlet profile in bregion 2, zero Dirichlet at walls 1 and nothing at outlet region 2)\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false, no_pressure_constraint = true)\n    Problem.name = \"Stokes + Transport\"\n    add_boundarydata!(Problem, 1, [1,3], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], BestapproxDirichletBoundary; data = u_inlet)\n\n    # add transport equation of species\n    add_unknown!(Problem; unknown_name = \"c\", equation_name = \"transport equation\")\n    if FVtransport == true\n        # finite volume upwind discretisation\n        FETypeTransport = H1P0{1}\n        add_operator!(Problem, [3,3], FVConvectionDiffusionOperator(1))\n    else\n        # finite element convection and diffusion (very small) operators\n        FETypeTransport = H1P1{1}\n        diffusion_FE = 1e-7 # diffusion coefficient for transport equation\n        add_operator!(Problem, [3,3], LaplaceOperator(diffusion_FE))\n        add_operator!(Problem, [3,3], ConvectionOperator(1, postprocess_operator, 2, 1))\n    end\n    # with boundary data (i.e. inlet concentration)\n    add_boundarydata!(Problem, 3, [4], InterpolateDirichletBoundary; data = c_inlet)\n    @show Problem\n\n    # generate FESpaces and a solution vector for all 3 unknowns\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true), FESpace{FETypeTransport}(xgrid)]\n    Solution = FEVector([\"v_h\", \"p_h\", \"c_h\"],FES)\n\n    # first solve the decoupled flow problem equations [1,2]\n    solve!(Solution, Problem; subiterations = [[1,2]], maxiterations = 5, target_residual = 1e-12)\n\n    # then solve the transport equation [3] by finite volumes or finite elements\n    if FVtransport == true\n        # pseudo-timestepping until stationarity detected, the matrix stays the same in each iteration\n        TCS = TimeControlSolver(Problem, Solution, BackwardEuler; subiterations = [[3]], skip_update = [-1], timedependent_equations = [3], T_time = Int)\n        advance_until_stationarity!(TCS, 10000; maxtimesteps = 100, stationarity_threshold = 1e-12)\n    else\n        # solve directly\n        solve!(Solution, Problem; subiterations = [[3]], maxiterations = 5, target_residual = 1e-12)\n    end\n\n    # print minimal and maximal concentration to check max principle (shoule be in [0,1])\n    println(\"\\n[min(c),max(c)] = [$(minimum(Solution[3][:])),$(maximum(Solution[3][:]))]\")\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (2,1), clear = true, resolution = (800,800))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 0, colorbarticks = 7)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.25, clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[2,1],xgrid,view(nodevalues(Solution[3]),1,:), levels = 11, title = \"c_h\")\nend\n\nend","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"Default output:","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"julia> Example227_FlowTransport2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = Stokes + Transport\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n    [3]   | c / transport equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,3]   | none\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | none\n    [3,2]   | none\n    [3,3]   | FVConvectionDiffusionOperator{Float64}\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [4]\n                         HomogeneousDirichletBoundary -> [1, 3]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : InterpolateDirichletBoundary -> [4]\n                         \n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 8.348798e-14 | 8.348798e-14\n\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE                      \n\t        |            |  (total)   |    (s)    |      u           p           c     \n\t     1  | 1.0000e+04 | 1.7754e-16 | 1.332e+00 | 0.0000e+00  0.0000e+00  7.9759e+01 \n\t     2  | 2.0000e+04 | 2.0807e-16 | 2.365e-02 | 0.0000e+00  0.0000e+00  4.3757e-01 \n\t     3  | 3.0000e+04 | 2.1475e-16 | 5.680e-03 | 0.0000e+00  0.0000e+00  1.9895e-02 \n\t     4  | 4.0000e+04 | 2.2396e-16 | 5.566e-03 | 0.0000e+00  0.0000e+00  1.0653e-03 \n\t     5  | 5.0000e+04 | 2.2312e-16 | 5.578e-03 | 0.0000e+00  0.0000e+00  5.5956e-05 \n\t     6  | 6.0000e+04 | 2.0946e-16 | 5.518e-03 | 0.0000e+00  0.0000e+00  2.9128e-06 \n\t     7  | 7.0000e+04 | 2.1246e-16 | 5.526e-03 | 0.0000e+00  0.0000e+00  1.5116e-07 \n\t     8  | 8.0000e+04 | 2.1139e-16 | 5.506e-03 | 0.0000e+00  0.0000e+00  7.8373e-09 \n\t     9  | 9.0000e+04 | 2.1109e-16 | 5.514e-03 | 0.0000e+00  0.0000e+00  4.0622e-10 \n\t    10  | 1.0000e+05 | 2.2521e-16 | 5.554e-03 | 0.0000e+00  0.0000e+00  2.1060e-11 \n\t    11  | 1.1000e+05 | 2.1056e-16 | 5.509e-03 | 0.0000e+00  0.0000e+00  1.0860e-12 \n\t    12  | 1.2000e+05 | 2.1067e-16 | 5.509e-03 | 0.0000e+00  0.0000e+00  7.5286e-14 \n\n[min(c),max(c)] = [0.020833333333327934,0.9895833333333334]","category":"page"},{"location":"examples/Example227_FlowTransport2D/","page":"227 : Flow + Transport 2D","title":"227 : Flow + Transport 2D","text":"(Image: )","category":"page"},{"location":"examples/Example221_StokesIterated2D/#:-Stokes-iterated-penalty-method-2D","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"","category":"section"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"(source code)","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbf0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"with some μ parameter mu.","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"Here we solve the simple Hagen-Poiseuille flow on the two-dimensional unit square domain with the iterated penalty method for the Bernardi–Raugel finite element method. Given intermediate solutions  mathbfu_h and  p_h the next approximations are computed by the two equations","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"beginaligned\n(nabla mathbfu_h^next nabla mathbfv_h) + ((mathbfu_h^next cdot nabla) mathbfu_h^next mathbfv_h) + lambda (mathrmdiv_h(mathbfu_h) mathrmdiv_h(mathbfv_h))  = (mathbffmathbfv_h) + (p_hmathrmdiv(mathbfv_h))\n textfor all  mathbfv_h in mathbfV_h\n(p^next_hq_h)  = (p_hq_h) - (mathrmdiv(mathbfu_h^next)q_h)  textfor all  q_h in Q_h\nendaligned","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This is done consecutively until the residual of both equations is small enough. The convection term is linearised by auto-differentiated Newton terms. The discrete divergence is computed via a RT0 reconstruction operator that preserves the disrete divergence. (another way would be to compute Binv(M)B' where M is the mass matrix of the pressure and B is the matrix for the div-pressure block).","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"module Example221_StokesIterated2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\nusing GridVisualize\n\n# data for Hagen-Poiseuille flow\nfunction exact_pressure!(μ)\n    function closure(result,x)\n        result[1] = μ*(-2*x[1]+1.0)\n    end\nend\nfunction exact_velocity!(result,x)\n    result[1] = x[2]*(1.0-x[2]);\n    result[2] = 0.0;\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, λ = 1e4, μ = 1.0)\n\n    # set verbosity level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), 4)\n\n    # Bernardi--Raugel element\n    FETypes = [H1BR{2}, H1P0{1}]; PenaltyDivergence = ReconstructionDivergence{HDIVRT0{2}}\n\n    # FE spaces\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_velocity!, [2,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 2)\n    p = DataFunction(exact_pressure!(μ), [1,2]; name = \"p\", dependencies = \"X\", bonus_quadorder = 1)\n\n    # generate Stokes problem\n    Problem = PDEDescription(\"NSE (iterated penalty)\")\n    add_unknown!(Problem; equation_name = \"velocity update\", unknown_name = \"u\")\n    add_unknown!(Problem; equation_name = \"pressure update\", unknown_name = \"p\")\n    add_constraint!(Problem, FixedIntegralMean(2,0))\n\n    # add boundary data\n    add_boundarydata!(Problem, 1, [1,2,3,4], InterpolateDirichletBoundary; data = u)\n\n    # velocity update equation\n    add_operator!(Problem, [1,1], LaplaceOperator(μ; store = true))\n    add_operator!(Problem, [1,2], BilinearForm([Divergence, Identity]; name = \"(div(v),p)\", store = false, factor = -1))\n    add_operator!(Problem, [1,1], ConvectionOperator(1, Identity, 2, 2; newton = false))\n\n    # add penalty for discrete divergence\n    add_operator!(Problem, [1,1], BilinearForm([PenaltyDivergence, PenaltyDivergence]; name = \"ϵ (div_h(u),div_h(v))\", store = true, factor = λ))\n\n    # pressure update equation\n    add_operator!(Problem, [2,2], BilinearForm([Identity, Identity]; name = \"(p,q)\", store = false))\n    rhs_action = Action((result,input) -> (result[1] = input[1] - λ*input[2]), [1, 3]; name = \"p_h - λdiv(u)\")\n    add_rhsdata!(Problem, 2, LinearForm(Identity, [Identity, Divergence], [2, 1], rhs_action))\n\n    # show and solve problem\n    @show Problem\n    Solution = FEVector([\"u_h\",\"p_h\"],[FES[1],FES[2]])\n    solve!(Solution, Problem; subiterations = [[1],[2]], maxiterations = 20, show_solver_config = true, show_statistics = true)\n\n    # calculate L2 error\n    L2ErrorV = L2ErrorIntegrator(u, Identity)\n    L2ErrorP = L2ErrorIntegrator(p, Identity)\n    println(\"|| u - u_h || = $(sqrt(evaluate(L2ErrorV,Solution[1])))\")\n    println(\"|| p - p_h || = $(sqrt(evaluate(L2ErrorP,Solution[2])))\")\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 3)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = [0.25,0.1], clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[2]),1,:), levels = 11, title = \"p_h\")\nend\nend","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"Default output:","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"julia> Example221_StokesIterated2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = NSE (iterated penalty)\n\n     id   | unknown name / equation name\n    [1]   | u / velocity update \n    [2]   | p / pressure update \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((id(a) ⋅ ∇) u, id(v)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n            | ϵ (div_h(u),div_h(v)) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),p) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | (p,q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | (p_h - λdiv(u), id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : InterpolateDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = false\n  anderson_iterations = 0\n  subiterations = [[1], [2]]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = true\n  anderson_metric = l2\n  skip_update = [1, 1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0\n  time = 0\n  parallel_storage = false\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 1.0e-10\n  maxiterations = 20\n  AssemblyTriggers = \n         LHS_AT[1] :  A  T \n         LHS_AT[2] :  N  I \n         RHS_AT[1] :  N \n         RHS_AT[2] :  A \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2]; [2, 1] [2]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.10e+01/1.74e-05/1.10e+01\n\t      1   | 1.999226e-11 | 1.145706e-01 | 1.15e+00/1.69e-04/1.26e+00\n\t      2   | 2.056966e-11 | 4.877746e-05 | 5.04e-02/1.42e-04/8.68e-02\n\t      3   | 2.154922e-11 | 1.108026e-07 | 5.06e-02/1.55e-04/6.45e-02\n\t      4   | 2.122571e-11 | 1.205713e-10 | 5.06e-02/1.37e-04/6.45e-02\n\t      5   | 1.976741e-11 | 3.431195e-11 | 5.07e-02/1.37e-04/6.41e-02\n\t    total |                             | 1.23e+01/7.57e-04/1.25e+01\n\n|| u - u_h || = 0.0001582612282625443\n|| p - p_h || = 0.020919592761401175","category":"page"},{"location":"examples/Example221_StokesIterated2D/","page":"221 : Stokes iterated penalty method 2D","title":"221 : Stokes iterated penalty method 2D","text":"(Image: )","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/#:-Robin-Boundary-Conditions-1D","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"","category":"section"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"(source code)","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"This demonstrates the assignment of a mixed Robin boundary condition for a nonlinear 1D convection-diffusion-reaction PDE on the unit interval, i.e.","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"beginaligned\n-partial^2 u  partial x^2 + u partial u  partial x + u  = f  textin  Omega\nu + partial u  partial_x  = g  textat  Gamma_1 =  0 \nu  = u_D  textat  Gamma_2 =  1 \nendaligned","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"tested with data f(x) = e^2x, g = 2 and u_D = e such that u(x) = e^x is the exact solution.","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"module Example102_RobinBoundaryCondition1D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# data and exact solution\nconst f = DataFunction((result,x) -> (result[1] = exp(2*x[1]);), [1,1]; name = \"f\", dependencies = \"X\", bonus_quadorder = 4)\nconst u = DataFunction((result,x) -> (result[1] = exp(x[1]);), [1,1]; name = \"u\", dependencies = \"X\", bonus_quadorder = 4)\nconst g = DataFunction([2]; name = \"g\")\nconst uD = DataFunction([exp(1)]; name = \"u_D\")\n\n# kernel for the (nonlinear) reaction-convection-diffusion oeprator\nfunction operator_kernel!(result, input)\n    # input = [u,∇u] as a vector of length 2\n    result[1] = input[1] * input[2] + input[1] # convection + reaction (will be multiplied with v)\n    result[2] = input[2]                       # diffusion (will be multiplied with ∇v)\n    return nothing\nend\n\n# kernel for Robin boundary condition\nfunction robin_kernel!(result, input)\n    # input = [u]\n    eval_data!(g)\n    result[1] = g.val[1] - input[1] # = g - u (will be multiplied with v)\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, h = 1e-1, h_fine = 1e-3)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate coarse and fine mesh\n    xgrid = simplexgrid(0:h:1)\n\n    # setup a problem description with one unknown\n    Problem = PDEDescription(\"reaction-convection-diffusion problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"reaction-convection-diffusion equation\")\n\n    # add nonlinear operator\n    add_operator!(Problem, [1,1], NonlinearForm(OperatorPair{Identity, Gradient}, [OperatorPair{Identity, Gradient}], [1], operator_kernel!, [2,2]; name = \"∇u ⋅ ∇v + (u ∇u + u) ⋅ v\", bonus_quadorder = 4, newton = true) )\n\n    # right-hand side data\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n\n    # Robin boundary data right\n    add_operator!(Problem, [1,1], BilinearForm([Identity, Identity], Action(robin_kernel!, [1,1]); name = \"(g - u) ⋅ v\", AT = ON_BFACES, regions = [1]) )\n\n    # Dirichlet boundary data left\n    add_boundarydata!(Problem, 1, [2], InterpolateDirichletBoundary; data = uD)\n\n    # choose some finite element type and generate a FESpace for the grid\n    # (here it is a one-dimensional H1-conforming P2 element H1P2{1,1})\n    FEType = H1P2{1,1}\n    FES = FESpace{FEType}(xgrid)\n\n    # generate a solution vector and solve\n    Solution = FEVector(\"u_h\",FES)\n    solve!(Solution, Problem; show_statistics = true)\n\n    # compute L2 error\n    L2error = L2ErrorIntegrator(u)\n    println(\"L2error = $(sqrt(evaluate(L2error,Solution[1])))\")\n\n    # plot discrete and exact solution (on finer grid)\n    p=GridVisualizer(Plotter = Plotter, layout = (1,1))\n    scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], color=(0,0.7,0), label = \"u_h\", markershape = :x, markersize = 10, markevery = 1)\n    xgrid_fine = simplexgrid(0:h_fine:1)\n    scalarplot!(p[1,1], xgrid_fine, view(nodevalues(xgrid_fine,u),1,:), clear = false, color = (1,0,0), label = \"u\", legend = :rb, markershape = :none)\nend\n\nend","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"Default output:","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"julia> Example102_RobinBoundaryCondition1D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.04e+01/2.70e-06/1.04e+01\n\t      1   | 6.620478e-14 | 6.400322e-01 | 1.25e+00/9.38e-05/1.55e+00\n\t      2   | 5.702604e-14 | 5.344356e-02 | 3.11e-04/7.18e-05/4.48e-04\n\t      3   | 6.275400e-14 | 4.413179e-05 | 1.48e-04/3.42e-05/1.99e-04\n\t      4   | 4.832791e-14 | 4.724639e-11 | 1.30e-04/2.51e-05/1.66e-04\n\t    total |                             | 1.17e+01/2.28e-04/1.20e+01\n\nL2error = 1.0271403975426135e-5","category":"page"},{"location":"examples/Example102_RobinBoundaryCondition1D/","page":"102 : Robin-Boundary Conditions 1D","title":"102 : Robin-Boundary Conditions 1D","text":"(Image: )","category":"page"},{"location":"examples/Example212_WaveEquation2D/#:-Wave-Equation-2D","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"","category":"section"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"(source code)","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"This example computes the transient solution of the wave equation","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"fracpartial^2 upartial t^2 = c Delta u + f","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"with propagation speed c and source term f.","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"The equation can be rewritten into the system of two PDEs","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"beginaligned\nu_t  = v\nv_t  = c Delta u + f\nendaligned","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"Here, we solve the equations on a circle domain with c = 1 and f = 0 for some given initial state and homogeneous Dirichlet boundary conditions.","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"module Example212_WaveEquation2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\nusing SimplexGridFactory\nusing Triangulate\n\nconst u0 = DataFunction((result,x) -> (result[1] = 1 - x[1]^2 - x[2]^2), [1,2]; dependencies = \"X\", bonus_quadorder = 2)\nconst v0 = DataFunction([0.0])\nconst f = DataFunction([0.0])\nconst c = 1\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, order = 1, reflevel = 2, T = 0.65, timestep = 1//100, plot_step = 1//20, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid and final time\n    xgrid = grid_circle([0,0],1.0, 2^(3+reflevel); maxvol = 4.0^-(2+reflevel))\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"Wave equation\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"2nd order to 1st order substitution\")\n    add_unknown!(Problem; unknown_name = \"v\", equation_name = \"wave equation\")\n    add_operator!(Problem, [1,2], ReactionOperator(-1))\n    add_operator!(Problem, [2,1], LaplaceOperator(c))\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n    add_boundarydata!(Problem, 1, [1], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 2, [1], HomogeneousDirichletBoundary)\n\n    # generate FESpace and solution vector\n    FEType = H1Pk{1,2,order}\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector([\"u_h\",\"v_h\"],[FES, FES])\n\n    # set initial solution\n    interpolate!(Solution[1], u0)\n\n    # prepare time-dependent solver\n    sys = TimeControlSolver(Problem, Solution, BackwardEuler; skip_update = [-1], timedependent_equations = [1,2], T_time = typeof(timestep))\n\n    # prepare plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    node_views = [nodevalues_view(Solution[1])[1], nodevalues_view(Solution[2])[1]]\n\n    # this function is called after each timestep\n    plot_step_count = Int(ceil(plot_step/timestep))\n    function do_after_each_timestep(step, statistics)\n        if mod(step,plot_step_count) == 0\n            scalarplot!(p[1,1], xgrid, node_views[1], levels = 7, title = \"u_h (t = $(Float64(sys.ctime)))\")\n            scalarplot!(p[1,2], xgrid, node_views[2], levels = 7, title = \"v_h (t = $(Float64(sys.ctime)))\")\n        end\n        return nothing\n    end\n\n    # use time control solver by GradientRobustMultiPhysics\n    advance_until_time!(sys, timestep, T; do_after_each_timestep = do_after_each_timestep)\nend\n\nfunction grid_circle(center, radius, n; maxvol = 0.1)\n\tbuilder=SimplexGridBuilder(Generator=Triangulate)\n    points = [point!(builder, center[1]+radius*sin(t),center[2]+radius*cos(t)) for t in range(0,2π,length=n)]\n    for i=1:n-1\n        facet!(builder,points[i],points[i+1])\n    end\n    facet!(builder,points[end],points[1])\n    simplexgrid(builder,maxvolume = maxvol)\nend\n\nend","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"Default output:","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"julia> Example212_WaveEquation2D.main()\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)          u           v     \n\t     1  | 1.0000e-02 | 5.9599e-15 | 1.736e+00 | 1.1819e-02  1.1819e+00 \n\t     2  | 2.0000e-02 | 6.3311e-15 | 1.806e-02 | 2.2487e-02  1.0776e+00 \n\t     3  | 3.0000e-02 | 6.4865e-15 | 1.532e-03 | 3.2291e-02  1.0138e+00 \n\t     4  | 4.0000e-02 | 6.1480e-15 | 1.388e-03 | 4.1618e-02  9.8501e-01 \n\t     5  | 5.0000e-02 | 6.2240e-15 | 1.362e-03 | 5.0719e-02  9.6744e-01 \n\t     6  | 6.0000e-02 | 6.0839e-15 | 1.364e-03 | 5.9698e-02  9.5118e-01 \n\t     7  | 7.0000e-02 | 5.7714e-15 | 1.353e-03 | 6.8584e-02  9.3756e-01 \n\t     8  | 8.0000e-02 | 6.4347e-15 | 1.346e-03 | 7.7380e-02  9.2783e-01 \n\t     9  | 9.0000e-02 | 6.0465e-15 | 1.357e-03 | 8.6082e-02  9.1989e-01 \n\t    10  | 1.0000e-01 | 6.2807e-15 | 1.352e-03 | 9.4676e-02  9.1108e-01 \n\t    11  | 1.1000e-01 | 6.2539e-15 | 1.346e-03 | 1.0315e-01  9.0044e-01 \n\t    12  | 1.2000e-01 | 5.9915e-15 | 1.356e-03 | 1.1148e-01  8.8843e-01 \n\t    13  | 1.3000e-01 | 6.2111e-15 | 1.344e-03 | 1.1968e-01  8.7591e-01 \n\t    14  | 1.4000e-01 | 5.7026e-15 | 1.342e-03 | 1.2773e-01  8.6349e-01 \n\t    15  | 1.5000e-01 | 6.1269e-15 | 1.358e-03 | 1.3563e-01  8.5141e-01 \n\t    16  | 1.6000e-01 | 5.8371e-15 | 1.345e-03 | 1.4339e-01  8.3969e-01 \n\t    17  | 1.7000e-01 | 5.3006e-15 | 1.520e-03 | 1.5101e-01  8.2821e-01 \n\t    18  | 1.8000e-01 | 5.7503e-15 | 1.356e-03 | 1.5850e-01  8.1685e-01 \n\t    19  | 1.9000e-01 | 5.7426e-15 | 1.341e-03 | 1.6584e-01  8.0552e-01 \n\t    20  | 2.0000e-01 | 6.0855e-15 | 1.341e-03 | 1.7305e-01  7.9416e-01 \n\t    21  | 2.1000e-01 | 5.4475e-15 | 1.354e-03 | 1.8011e-01  7.8276e-01 \n\t    22  | 2.2000e-01 | 5.7705e-15 | 1.339e-03 | 1.8703e-01  7.7132e-01 \n\t    23  | 2.3000e-01 | 5.7962e-15 | 1.339e-03 | 1.9380e-01  7.5984e-01 \n\t    24  | 2.4000e-01 | 5.6711e-15 | 1.350e-03 | 2.0043e-01  7.4833e-01 \n\t    25  | 2.5000e-01 | 5.3216e-15 | 1.345e-03 | 2.0692e-01  7.3680e-01 \n\t    26  | 2.6000e-01 | 5.4556e-15 | 1.556e-03 | 2.1325e-01  7.2528e-01 \n\t    27  | 2.7000e-01 | 5.6047e-15 | 1.359e-03 | 2.1945e-01  7.1378e-01 \n\t    28  | 2.8000e-01 | 5.3305e-15 | 1.346e-03 | 2.2549e-01  7.0235e-01 \n\t    29  | 2.9000e-01 | 5.6565e-15 | 1.342e-03 | 2.3138e-01  6.9100e-01 \n\t    30  | 3.0000e-01 | 5.2805e-15 | 1.351e-03 | 2.3712e-01  6.7978e-01 \n\t    31  | 3.1000e-01 | 5.0194e-15 | 1.340e-03 | 2.4272e-01  6.6868e-01 \n\t    32  | 3.2000e-01 | 5.4699e-15 | 1.346e-03 | 2.4816e-01  6.5770e-01 \n\t    33  | 3.3000e-01 | 4.9692e-15 | 1.351e-03 | 2.5345e-01  6.4686e-01 \n\t    34  | 3.4000e-01 | 4.9957e-15 | 1.342e-03 | 2.5860e-01  6.3613e-01 \n\t    35  | 3.5000e-01 | 5.0394e-15 | 1.351e-03 | 2.6359e-01  6.2552e-01 \n\t    36  | 3.6000e-01 | 4.3395e-15 | 1.341e-03 | 2.6843e-01  6.1500e-01 \n\t    37  | 3.7000e-01 | 4.6596e-15 | 1.340e-03 | 2.7312e-01  6.0458e-01 \n\t    38  | 3.8000e-01 | 4.6372e-15 | 1.464e-03 | 2.7766e-01  5.9423e-01 \n\t    39  | 3.9000e-01 | 5.1378e-15 | 1.383e-03 | 2.8205e-01  5.8396e-01 \n\t    40  | 4.0000e-01 | 4.5386e-15 | 1.348e-03 | 2.8629e-01  5.7375e-01 \n\t    41  | 4.1000e-01 | 4.9630e-15 | 1.356e-03 | 2.9038e-01  5.6361e-01 \n\t    42  | 4.2000e-01 | 4.2879e-15 | 1.342e-03 | 2.9432e-01  5.5354e-01 \n\t    43  | 4.3000e-01 | 4.2338e-15 | 1.340e-03 | 2.9811e-01  5.4351e-01 \n\t    44  | 4.4000e-01 | 4.4189e-15 | 1.358e-03 | 3.0174e-01  5.3353e-01 \n\t    45  | 4.5000e-01 | 4.2251e-15 | 1.341e-03 | 3.0522e-01  5.2358e-01 \n\t    46  | 4.6000e-01 | 4.2762e-15 | 1.340e-03 | 3.0854e-01  5.1366e-01 \n\t    47  | 4.7000e-01 | 4.1773e-15 | 1.356e-03 | 3.1170e-01  5.0376e-01 \n\t    48  | 4.8000e-01 | 3.6826e-15 | 1.341e-03 | 3.1471e-01  4.9390e-01 \n\t    49  | 4.9000e-01 | 3.9616e-15 | 1.338e-03 | 3.1756e-01  4.8410e-01 \n\t    50  | 5.0000e-01 | 3.8060e-15 | 1.349e-03 | 3.2024e-01  4.7438e-01 \n\t    51  | 5.1000e-01 | 3.7929e-15 | 1.383e-03 | 3.2277e-01  4.6478e-01 \n\t    52  | 5.2000e-01 | 3.9133e-15 | 1.341e-03 | 3.2513e-01  4.5533e-01 \n\t    53  | 5.3000e-01 | 3.4689e-15 | 1.524e-03 | 3.2732e-01  4.4609e-01 \n\t    54  | 5.4000e-01 | 3.4774e-15 | 1.353e-03 | 3.2935e-01  4.3708e-01 \n\t    55  | 5.5000e-01 | 3.5695e-15 | 1.345e-03 | 3.3121e-01  4.2836e-01 \n\t    56  | 5.6000e-01 | 3.5725e-15 | 1.353e-03 | 3.3291e-01  4.1997e-01 \n\t    57  | 5.7000e-01 | 3.4568e-15 | 1.339e-03 | 3.3444e-01  4.1195e-01 \n\t    58  | 5.8000e-01 | 3.3054e-15 | 1.357e-03 | 3.3580e-01  4.0434e-01 \n\t    59  | 5.9000e-01 | 3.0953e-15 | 1.349e-03 | 3.3700e-01  3.9717e-01 \n\t    60  | 6.0000e-01 | 3.1556e-15 | 1.385e-03 | 3.3803e-01  3.9047e-01 \n\t    61  | 6.1000e-01 | 3.2908e-15 | 1.343e-03 | 3.3889e-01  3.8423e-01 \n\t    62  | 6.2000e-01 | 3.4483e-15 | 1.528e-03 | 3.3959e-01  3.7844e-01 \n\t    63  | 6.3000e-01 | 2.9697e-15 | 1.516e-03 | 3.4012e-01  3.7309e-01 \n\t    64  | 6.4000e-01 | 2.9015e-15 | 1.525e-03 | 3.4048e-01  3.6813e-01 \n\t    65  | 6.5000e-01 | 3.1148e-15 | 1.342e-03 | 3.4067e-01  3.6355e-01 ","category":"page"},{"location":"examples/Example212_WaveEquation2D/","page":"212 : Wave Equation 2D","title":"212 : Wave Equation 2D","text":"(Image: )","category":"page"},{"location":"meshing/#Meshing","page":"Meshing","title":"Meshing","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Meshes are stored as an ExtendableGrid, see ExtendableGrids.jl for details and constructors. Grid generators for simplex grids can be found e.g. in the external module SimplexGridFactory.jl","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Cells, faces and edges of the mesh are associated to AbstractElementGeometries (defined by ExtendableGrids.jl) that are used to dispatch functionality (local/global transformation, enumeration rules, set of basis functions, volume calculation, refinements etc.). See further below for a list of recognized element geometries.","category":"page"},{"location":"meshing/#Recognized-Geometries-and-Reference-Domains","page":"Meshing","title":"Recognized Geometries and Reference Domains","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"The following list contains all subtypes of ExtendableGrids.AbstractElementGeometries and their reference domains for which the package offers finite elements on them.","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Edge1D-:-AbstractElementGeometry1D","page":"Meshing","title":"Edge1D <: AbstractElementGeometry1D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[1]-----[2]               [1] = [0]\n                          [2] = [1]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Triangle2D","page":"Meshing","title":"Triangle2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[3]                 \n | \\   \n |   \\                    [1] = [0,0]\n |     \\                  [2] = [1,0]\n |       \\                [3] = [0,1]\n |         \\ \n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelogram2D-:-Quadrilateral2D","page":"Meshing","title":"Parallelogram2D <: Quadrilateral2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]--------[3]               \n |          |             [1] = [0,0]\n |          |             [2] = [1,0]\n |          |             [3] = [1,1]\n |          |             [4] = [0,1]\n[1]--------[2]\n\nNote: most finite elements only work as intended on Parallelogram2D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Tetrahedron3D","page":"Meshing","title":"Tetrahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]                 \n |\\\\   \n | \\ \\                    [1] = [0,0,0]\n |  \\  \\                  [2] = [1,0,0]\n |   \\   \\                [3] = [0,1,0]\n | _-[3]-_ \\              [4] = [0,0,1]\n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelepiped3D-:-Hexahedron3D","page":"Meshing","title":"Parallelepiped3D <: Hexahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"    [8]--------[7]        [1] = [0,0,0]\n   / |        / |         [2] = [1,0,0]\n[5]--------[6]  |         [3] = [1,1,0]\n |   |      |   |         [4] = [0,1,0]\n |   |      |   |         [5] = [0,0,1]\n |  [4]-----|--[3]        [6] = [1,0,1]\n | /        | /           [7] = [1,1,1]\n[1]--------[2]            [8] = [0,1,1]\n\nNote: most finite elements only work as intended on Parallelepiped3D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"export/#Data-Export","page":"Data Export","title":"Data Export","text":"","category":"section"},{"location":"export/","page":"Data Export","title":"Data Export","text":"Data export is possible into VTK (based on WriteVTK.jl) or CSV files.","category":"page"},{"location":"export/","page":"Data Export","title":"Data Export","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dataexport.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"export/#GradientRobustMultiPhysics.writeCSV!-Tuple{String, Vector{<:FEVectorBlock}}","page":"Data Export","title":"GradientRobustMultiPhysics.writeCSV!","text":"writeCSV!(filename::String, Data::Vector{<:FEVectorBlock}; operators, names, seperator)\n\n\nWrites the specified FEVectorBlocks into a CSV datafile with the given filename. First d colomuns are the grid coordinates, the remaining columns are filled with the evaluations of the operators where operator[j] is applied to Data[j].\n\n\n\n\n\n","category":"method"},{"location":"export/#GradientRobustMultiPhysics.writeVTK!-Tuple{String, Vector{<:FEVectorBlock}}","page":"Data Export","title":"GradientRobustMultiPhysics.writeVTK!","text":"writeVTK!(filename::String, Data::Vector{<:FEVectorBlock}; xgrid, operators, names, vectorabs, add_regions, caplength)\n\n\nWrites the specified FEVector into a vtk datafile with the given filename. Each FEVectorBlock in the Data array is saved as separate VTKPointData. Vector-valued quantities also generate a data field that represents the absolute value of the vector field at each grid point (if vectorabs is true).\n\n\n\n\n\n","category":"method"},{"location":"examples/Example260_CahnHilliard2D/#:-Cahn-Hilliard-Equations-2D","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"","category":"section"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"(source code)","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"This example studies the mixed form of the Cahn-Hilliard equations that seeks (cmu) such that","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"beginaligned\nc_t - mathbfdiv (M nabla mu)  = 0\nmu - partial f  partial c + lambda nabla^2c  = 0\nendaligned","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"with f(c) = 100c^2(1-c)^2, constant parameters M and lambda and (random) initial concentration as defined in the code below.","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"module Example260_CahnHilliard2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\nusing ForwardDiff\nusing DifferentialEquations","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"parameters and initial condition","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"const f = (c) -> 100*c^2*(1-c)^2\nconst dfdc = (c) -> ForwardDiff.derivative(f, c)\nconst M = 1.0\nconst λ = 1e-2\nconst c0 = DataFunction((result, x) -> (result[1] = 0.63 + 0.02 * (0.5 - rand());), [1,2]; dependencies = \"X\", bonus_quadorder = 10)\n\n# everything is wrapped in a main function\nfunction main(;\n    verbosity = 0,                          # larger numbers increase talkativity\n    order = 1,                              # finite element order for c and μ\n    nref = 5,                               # refinement level\n    τ = 1//100000,                          # time step (for main evolution phase)\n    use_diffeq = false,                     # use DifferentialEquations.jl or internal evolution\n    time_integration_rule = BackwardEuler,  # time integration scheme for internal evolution\n    use_newton = true,                      # use newton or fixed-point iteration with constant system matrix ?\n    Plotter = nothing,                      # Plotter (e.g. PyPlot)\n    )\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D; scale = [1,1]), nref)\n\n    # define main level set problem\n    Problem = PDEDescription(\"Cahn-Hilliard equation\")\n    add_unknown!(Problem; unknown_name = \"c\", equation_name = \"concentration equation\")\n    add_unknown!(Problem; unknown_name = \"μ\", equation_name = \"chemical potential equation\")\n    add_operator!(Problem, [1,2], LaplaceOperator(M; store = true))\n    add_operator!(Problem, [2,2], ReactionOperator(1; store = true))\n    add_operator!(Problem, [2,1], LaplaceOperator(-λ; store = true))\n\n    # add nonlinear reaction part (= -df/dc times test function)\n    function dfdc_kernel(result, input)\n        result[1] = -dfdc(input[1])\n    end\n    if use_newton # ... either as nonlinear operator with AD-Newton\n        add_operator!(Problem, 2, NonlinearForm(Identity, [Identity], [1], dfdc_kernel, [1,1]; name = \"(-∂f/∂c, μ)\", newton = true, bonus_quadorder = 2))\n    else # ... or as a simple LinearForm that is iterated in fixpoint iteration (with constant matrix)\n        add_rhsdata!(Problem, 2, LinearForm(Identity, [Identity], [1], Action(dfdc_kernel, [1,1]; bonus_quadorder = 2); factor = -1, name = \"(-∂f/∂c, μ)\"))\n    end\n\n    # print problem definition\n    @show Problem\n\n    # generate FESpace and solution vector and interpolate initial state\n    FES = FESpace{H1Pk{1,2,order}}(xgrid)\n    Solution = FEVector([\"c_h\",\"μ_h\"], [FES, FES])\n    interpolate!(Solution[1], c0)\n\n    # generate time-dependent solver\n    TProblem = TimeControlSolver(Problem, Solution, time_integration_rule;\n                    timedependent_equations = [1],              # only 1st unknown c has a time derivative\n                    skip_update = use_newton ? [1] : [-1],      # matrix will be only updated if Newton ist used\n                    maxiterations = 50,                         # maximum number of fixed-point iterations (in each timestep)\n                    target_residual = 1e-6,                     # stop if this nonlinear residual is reached (in each timestep)\n                    T_time = use_diffeq ? Float64 : typeof(τ))\n\n    # init plot (if order > 1, solution is upscaled to finer grid for plotting)\n    p = GridVisualizer(; Plotter = Plotter, layout = (7,3), clear = true, resolution = (900,2100))\n    if order > 1\n        xgrid_upscale = uniform_refine(xgrid, order-1)\n        SolutionUpscaled = FEVector{Float64}(\"c_h (upscaled)\",FESpace{H1P1{1}}(xgrid_upscale))\n        interpolate!(SolutionUpscaled[1], Solution[1])\n    else\n        xgrid_upscale = xgrid\n        SolutionUpscaled = Solution\n    end\n    nodevals = nodevalues_view(SolutionUpscaled[1])\n    scalarplot!(p[1,1], xgrid_upscale, nodevals[1]; limits = (0.61, 0.65), xlabel = \"\", ylabel = \"\", levels = 1, title = \"c (t = 0)\")\n\n    # prepare mass calculation\n    total_mass_integrator = ItemIntegrator([Identity])\n    mass = evaluate(total_mass_integrator, Solution[1])\n    @info \"mass (t = 0) = $mass\"\n\n    # advance in time, plot from time to time\n    τstep = τ\n    for j = 1 : 20\n        if j < 3 # start with slightly smaller timestep\n            τstep = τ//2\n        elseif j < 9\n            τstep = τ\n        else # increase timestep a bit later\n            τstep = τ*2\n        end\n        if use_diffeq\n            advance_until_time!(DifferentialEquations, TProblem, τstep, TProblem.ctime+10*τstep; solver = ImplicitEuler(autodiff = false), abstol = 1e-3, reltol = 1e-3, adaptive = true)\n        else\n            advance_until_time!(TProblem, τstep, TProblem.ctime+10*τstep)\n        end\n        if order > 1\n            interpolate!(SolutionUpscaled[1], Solution[1])\n        end\n        mass = evaluate(total_mass_integrator, Solution[1])\n        @info \"mass (t = $(Float64(TProblem.ctime))) = $mass\"\n        scalarplot!(p[1+Int(floor((j)/3)),1 + (j) % 3], xgrid_upscale, nodevals[1]; xlabel = \"\", ylabel = \"\", limits = (-0.1,1.1), levels = 1, title = \"c (t = $(Float64(TProblem.ctime)))\")\n    end\nend\nend","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example260_CahnHilliard2D/","page":"260 : Cahn-Hilliard Equations 2D","title":"260 : Cahn-Hilliard Equations 2D","text":"(Image: )","category":"page"},{"location":"interpolations/#Finite-Element-Interpolations","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"","category":"section"},{"location":"interpolations/#Standard-Interpolations","page":"Finite Element Interpolations","title":"Standard Interpolations","text":"","category":"section"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"Each finite element has its standard interpolator that can be applied to some user-defined DataFunction. Instead of interpolating on the full cells, the interpolation can be restricted to faces or edges, by specifying an Assembly Type in the call. ","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"It is also possible to interpolate finite element functions on one grid onto a finite element function on another grid (experimental feature, does not work for all finite elements yet and shall be extended to interpolations of operator evaluations as well in future).","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"interpolate!","category":"page"},{"location":"interpolations/#GradientRobustMultiPhysics.interpolate!","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.interpolate!","text":"function interpolate!(target::FEVectorBlock,\n     AT::Type{<:AssemblyType},\n     source::UserData{AbstractDataFunction};\n     items = [],\n     time = 0)\n\nInterpolates the given source into the finite elements space assigned to the target FEVectorBlock with the specified AssemblyType (usualy ON_CELLS). The optional time argument is only used if the source depends on time.\n\n\n\n\n\nfunction interpolate!(target::FEVectorBlock,\n     source::UserData{AbstractDataFunction};\n     items = [],\n     time = 0)\n\nInterpolates the given source into the finite element space assigned to the target FEVectorBlock. The optional time argument is only used if the source depends on time.\n\n\n\n\n\nfunction interpolate!(\n    target::FEVectorBlock{T1,Tv,Ti},\n    source::FEVectorBlock{T2,Tv,Ti};\n    operator = Identity,\n    postprocess = NoAction(),\n    xtrafo = nothing,\n    items = [],\n    not_in_domain_value = 1e30,\n    use_cellparents::Bool = false) where {T1,T2,Tv,Ti}\n\nInterpolates (operator-evaluations of) the given finite element function into the finite element space assigned to the target FEVectorBlock.  (Currently not the most efficient way as it is based on the PointEvaluation pattern and cell search. If CellParents are available in the grid components of the target grid, these parent cell information can be used to improve the search. To activate this put 'use_cellparents' = true). By some action with kernel (result,input) the operator evaluation (=input) can be further postprocessed (done by the called point evaluator).\n\nNote: discontinuous quantities at vertices of the target grid will be evaluted in the first found cell of the source grid. No averaging is performed.\n\n\n\n\n\n","category":"function"},{"location":"interpolations/#Nodal-Evaluations","page":"Finite Element Interpolations","title":"Nodal Evaluations","text":"","category":"section"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"Usually, Plotters need nodal values, so there is a gengeric function that evaluates any finite element function at the nodes of the grids (possibly by averaging if discontinuous). In case of Identity evaluations of an H1-conforming finite element, the function nodevalues_view can generate a view into the coefficient field that avoids further allocations.","category":"page"},{"location":"interpolations/","page":"Finite Element Interpolations","title":"Finite Element Interpolations","text":"nodevalues!\nnodevalues\nnodevalues_view","category":"page"},{"location":"interpolations/#GradientRobustMultiPhysics.nodevalues!","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.nodevalues!","text":"function nodevalues!(\n    target::AbstractArray{<:Real,2},\n    source::AbstractArray{T,1},\n    FE::FESpace{Tv,Ti,FEType,AT},\n    operator::Type{<:AbstractFunctionOperator} = Identity;\n    regions::Array{Int,1} = [0],\n    abs::Bool = false,\n    factor = 1,\n    target_offset::Int = 0,   # start to write into target after offset\n    zero_target::Bool = true, # target vector is zeroed\n    continuous::Bool = false)\n\nEvaluates the finite element function with the coefficient vector source (interpreted as a coefficient vector for the FESpace FE) and the specified FunctionOperator at all the nodes of the (specified regions of the) grid and writes the values into target. Discontinuous (continuous = false) quantities are averaged.\n\n\n\n\n\nfunction nodevalues!(\n    target::AbstractArray{<:Real,2},\n    source::FEVectorBlock,\n    operator::Type{<:AbstractFunctionOperator} = Identity;\n    regions::Array{Int,1} = [0],\n    abs::Bool = false,\n    factor = 1,\n    target_offset::Int = 0,   # start to write into target after offset\n    zero_target::Bool = true, # target vector is zeroed\n    continuous::Bool = false)\n\nEvaluates the finite element function with the coefficient vector source and the specified FunctionOperator at all the nodes of the (specified regions of the) grid and writes the values into target. Discontinuous (continuous = false) quantities are averaged.\n\n\n\n\n\n","category":"function"},{"location":"interpolations/#GradientRobustMultiPhysics.nodevalues","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.nodevalues","text":"function nodevalues(nodevals, xgrid::ExtendableGrid{Tv,Ti}, UD::UserData; time = 0) where {Tv,Ti}\n\nReturns a 2D array with the node values of the data function for the given grid.\n\n\n\n\n\nfunction nodevalues(\n    source::FEVectorBlock,\n    operator::Type{<:AbstractFunctionOperator} = Identity;\n    regions::Array{Int,1} = [0],\n    abs::Bool = false,\n    factor = 1,\n    target_offset::Int = 0,   # start to write into target after offset\n    zero_target::Bool = true, # target vector is zeroed\n    continuous::Bool = false)\n\nEvaluates the finite element function with the coefficient vector source and the specified FunctionOperator at all the nodes of the (specified regions of the) grid and returns an array with the values. Discontinuous (continuous = false) quantities are averaged.\n\n\n\n\n\n","category":"function"},{"location":"interpolations/#GradientRobustMultiPhysics.nodevalues_view","page":"Finite Element Interpolations","title":"GradientRobustMultiPhysics.nodevalues_view","text":"function nodevalues_view(\n    source::FEVectorBlock,\n    operator::Type{<:AbstractFunctionOperator} = Identity)\n\nReturns a vector of views of the nodal values of the source block (currently works for unbroken H1-conforming elements) that directly accesses the coefficients.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example240_CompressibleStokes2D/#:-Compressible-Stokes-2D","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"","category":"section"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"(source code)","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"This example solves the compressible Stokes equations where one seeks a (vector-valued) velocity mathbfu, a density varrho and a pressure p such that","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"beginaligned\n- mu Delta mathbfu + lambda nabla(mathrmdiv(mathbfu)) + nabla p  = mathbff + varrho mathbfg\nmathrmdiv(varrho mathbfu)  = 0\n        p  = eos(varrho)\n        int_Omega varrho  dx  = M\n        varrho  geq 0\nendaligned","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"Here eos eos is some equation of state function that describes the dependence of the pressure on the density (and further physical quantities like temperature in a more general setting). Moreover, mu and lambda are Lame parameters and mathbff and mathbfg are given right-hand side data.","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"In this example we solve a analytical toy problem with the prescribed solution","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"beginaligned\nmathbfu(mathbfx)  =0\nvarrho(mathbfx)  = 1 - (x_2 - 05)c\np = eos(varrho) = c varrho^gamma\nendaligned","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"such that mathbff = 0 and mathbfg nonzero to match the prescribed solution.","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"This example is designed to study the well-balanced property of a discretisation. The gradient-robust discretisation approximates the well-balanced state much better, i.e. has a much smaller L2 velocity error. For larger c the problem gets more incompressible which reduces the error further as then the right-hand side is a perfect gradient also when evaluated with the (now closer to a constant) discrete density. See reference below for more details.","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"reference: Reference\n\"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\nM. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\nComputer Methods in Applied Mechanics and Engineering 367 (2020),\n>Journal-Link< >Preprint-Link<","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"module Example240_CompressibleStokes2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# the equation of state\nfunction equation_of_state!(c,γ)\n    function closure(pressure,density)\n        for j = 1 : length(density)\n            pressure[j] = c*density[j]^γ\n        end\n    end\nend\n\n# the exact density (used for initial value of density if configured so)\nfunction ϱ_exact!(M,c)\n    function closure(result,x)\n        result[1] = M*(1.0 - (x[2] - 0.5)/c)\n    end\nend\n\n# gravity right-hand side (just gravity but with opposite sign!)\nfunction gravity!(γ,c)\n    function closure(result,x)\n        result[2] = - (1.0 - (x[2] - 0.5)/c)^(γ-2) * γ # = - ϱ^(γ-2) * γ\n    end\nend\n# gravity right-hand side (just gravity but with opposite sign!)\nfunction rhs!(γ,c)\n    function closure(result,x)\n        result[2] = - (1.0 - (x[2] - 0.5)/c)^(γ-1) * γ # = - ϱ^(γ-2) * γ\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; use_gravity = true, verbosity = 0, c = 10, γ = 1.4, M = 1, μ = 1e-3, λ = -2/3*μ, Plotter = nothing, nlevels = 4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and exact solution\n    xgrid = simplexgrid(\"assets/2d_mountainrange.sg\")\n    u = DataFunction([0,0]; name = \"u\")\n    ∇u = DataFunction([0,0,0,0]; name = \"∇u\")\n    ϱ = DataFunction(ϱ_exact!(M,c), [1,2]; name = \"ϱ\", dependencies = \"X\", bonus_quadorder = 2)\n\n    # compute mass of exact density on grid (bit smaller than M due to mountains)\n    Mreal = integrate(xgrid, ON_CELLS, ϱ, 1)\n\n    # prepare error calculation\n    VeloError = L2ErrorIntegrator(u, Identity; quadorder = 4)\n    VeloGradError = L2ErrorIntegrator(∇u, Gradient; quadorder = 2)\n    DensityError = L2ErrorIntegrator(ϱ, Identity; quadorder = 2)\n    Results = zeros(Float64,6,nlevels)\n    NDoFs = zeros(Int,nlevels)\n\n    # set finite element types [velocity, density,  pressure]\n    FETypes = [H1BR{2}, H1P0{1}, H1P0{1}] # Bernardi--Raugel x P0\n\n    # solve\n    Solution = [nothing, nothing]\n    for lvl = 1 : nlevels\n        if lvl > 1\n            xgrid = uniform_refine(xgrid)\n        end\n\n        # generate FESpaces and solution vector\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid)]\n        Solution = [FEVector([\"u_h (BR)\", \"ϱ_h (BR)\", \"p_h (BR)\"],FES),FEVector([\"u_h (BR+)\", \"ϱ_h (BR+)\", \"p_h (BR+)\"],FES)]\n        NDoFs[lvl] = length(Solution[1].entries)\n\n        # solve with and without reconstruction\n        for reconstruct in [true, false]\n            Target = Solution[reconstruct+1]\n            setup_and_solve!(Target, xgrid; use_gravity = use_gravity, reconstruct = reconstruct, c = c, M = Mreal, λ = λ, μ = μ, γ = γ)\n            Results[reconstruct ? 2 : 1,lvl] = sqrt(evaluate(VeloError,Target[1]))\n            Results[reconstruct ? 4 : 3,lvl] = sqrt(evaluate(VeloGradError,Target[1]))\n            Results[reconstruct ? 6 : 5,lvl] = sqrt(evaluate(DensityError,Target[2]))\n\n            # check error in mass constraint\n            Md = sum(Target[2][:] .* xgrid[CellVolumes])\n            println(\"\\tmass_error = $Mreal - $Md = $(abs(Mreal-Md))\")\n        end\n    end\n\n    # print convergence history tables\n    print_convergencehistory(NDoFs, Results[1:2,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_h|| (BR)\",\"||u-u_h|| (BR+)\"], xlabel = \"ndof\")\n    print_convergencehistory(NDoFs, Results[3:4,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_h)|| (BR)\",\"||∇(u-u_h)|| (BR+)\"], xlabel = \"ndof\")\n    print_convergencehistory(NDoFs, Results[5:6,:]'; X_to_h = X -> X.^(-1/2), ylabels = [\"||ϱ-ϱ_h|| (BR)\",\"||ϱ-ϱ_h|| (BR+)\"], xlabel = \"ndof\")\n\n    # plot everything\n    p = GridVisualizer(; Plotter = Plotter, layout = (2,3), clear = true, resolution = (1500,1000))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1][1]; abs = true),1,:), levels = 0, title = \"u_h (BR) (abs + quiver)\")\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1][1], Identity)), spacing = 0.1, clear = false)\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[1][2]),1,:), levels = 11, title = \"p_h (BR)\")\n    scalarplot!(p[2,1],xgrid,view(nodevalues(Solution[2][1]; abs = true),1,:), levels = 0, title = \"u_h (BR+) (abs + quiver)\")\n    vectorplot!(p[2,1],xgrid,evaluate(PointEvaluator(Solution[2][1], Identity)), spacing = 0.1, clear = false)\n    scalarplot!(p[2,2],xgrid,view(nodevalues(Solution[2][2]),1,:), levels = 11, title = \"p_h (BR+)\")\n    convergencehistory!(p[1,3], NDoFs, Results[[1,3,5],:]'; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h || (BR)\", \"|| ∇(u - u_h) || (BR)\", \"|| ϱ - ϱ_h || (BR)\"], legend = :lb, fontsize = 20)\n    convergencehistory!(p[2,3], NDoFs, Results[[2,4,6],:]'; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h || (BR+)\", \"|| ∇(u - u_h) || (BR+)\", \"|| ϱ - ϱ_h || (BR+)\"], legend = :lb, fontsize = 20)\nend\n\nfunction setup_and_solve!(Solution, xgrid;\n    c = 1, γ = 1, M = 1, μ = 1, λ = 0,\n    use_gravity = true,\n    reconstruct = true,\n    timestep = μ / (M*c),\n    maxtimesteps = 500,\n    stationarity_threshold = c*1e-14/μ)\n\n    # generate empty PDEDescription for three unknowns (u, ϱ. p)\n    Problem = PDEDescription(\"compressible Stokes problem\")\n    add_unknown!(Problem; unknown_name = \"v\", equation_name = \"momentum equation\")\n    add_unknown!(Problem; unknown_name = \"ϱ\", equation_name = \"continuity equation\")\n    add_unknown!(Problem; unknown_name = \"p\", equation_name = \"equation of state\")\n    add_boundarydata!(Problem, 1,  [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # momentum equation\n    hdiv_space = HDIVBDM1{2} # HDIVRT0{2} also works\n    VeloIdentity = reconstruct ? ReconstructionIdentity{hdiv_space} : Identity\n    VeloDivergence = reconstruct ? ReconstructionDivergence{hdiv_space} : Divergence\n    add_operator!(Problem, [1,1], LaplaceOperator(2*μ; store = true))\n    if λ != 0\n        add_operator!(Problem, [1,1], BilinearForm([VeloDivergence,VeloDivergence]; name = \"λ (div(u),div(v))\", factor = λ, store = true))\n    end\n    add_operator!(Problem, [1,3], BilinearForm([Divergence,Identity]; name = \"(div(v),p)\", factor = -1, store = true))\n\n    if use_gravity\n        # discrete gravity term for right-hand side (assembled as bilinearform for faster evaluation in fixpoint iteration)\n        g = DataFunction(gravity!(γ,c), [2,2]; name = \"g\", dependencies = \"X\", bonus_quadorder = 4)\n        add_operator!(Problem, [1,2], BilinearForm([VeloIdentity,Identity], fdotv_action(g); factor = -1, name = \"(g ⋅ v) ϱ\", store = true))\n    else\n        # exact gravity term for right-hand side\n        f = DataFunction(rhs!(γ,c), [2,2]; name = \"f\", dependencies = \"X\", bonus_quadorder = 4)\n        add_rhsdata!(Problem, 1,  LinearForm(VeloIdentity, f; store = true))\n    end\n\n    # continuity equation (by FV upwind on triangles)\n    add_operator!(Problem, [2,2], FVConvectionDiffusionOperator(1))\n\n    # equation of state (by best-approximation, P0 mass matrix is diagonal)\n    eos_action = Action( equation_of_state!(c,γ),[1,1]; dependencies = \"\", bonus_quadorder = 1)\n    add_operator!(Problem, [3,2], BilinearForm([Identity,Identity],eos_action; name = \"(p,eos(ϱ))\", apply_action_to = [2])) # cannot be stored if eos is nonlinear!\n    add_operator!(Problem, [3,3], BilinearForm([Identity,Identity]; name = \"(p,q)\", factor = -1, store = true))\n\n    # initial values for density (constant) and pressure (by equation of state)\n    fill!(Solution[2], M/sum(xgrid[CellVolumes]))\n    equation_of_state!(c,γ)(Solution[3],Solution[2])\n\n    # time-dependent solver with three equations [1] velocity, [2] density, [3] pressure\n    # solved iteratively [1] => [2] => [3] in each pseudo time step until stationarity\n    TCS = TimeControlSolver(Problem, Solution, BackwardEuler;\n                                        subiterations = [[1],[2],[3]], # solve [1], then [2], then [3]\n                                        skip_update = [-1,1,-1], # only matrix of eq [2] changes\n                                        timedependent_equations = [2], # only eq [2] is time-dependent\n                                        maxiterations = 1,\n                                        check_nonlinear_residual = false,\n                                        show_iteration_details = false)\n    advance_until_stationarity!(TCS, timestep; maxtimesteps = maxtimesteps, stationarity_threshold = stationarity_threshold)\nend\nend","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"Default output:","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"julia> Example240_CompressibleStokes2D.main()\n\tmass_error = 0.8902625 - 0.8902625000000041 = 4.107825191113079e-15\n\tmass_error = 0.8902625 - 0.8902625000000027 = 2.7755575615628914e-15\n\tmass_error = 0.8902625 - 0.8902625000000008 = 8.881784197001252e-16\n\tmass_error = 0.8902625 - 0.8902625000000008 = 8.881784197001252e-16\n\tmass_error = 0.8902625 - 0.8902624999999934 = 6.5503158452884236e-15\n\tmass_error = 0.8902625 - 0.8902624999999929 = 7.105427357601002e-15\n\tmass_error = 0.8902625 - 0.8902624999999655 = 3.441691376337985e-14\n\tmass_error = 0.8902625 - 0.8902624999999653 = 3.4638958368304884e-14\n\n    ndof    |  ||u-u_h|| (BR)    order |  ||u-u_h|| (BR+)   order |\n============|==========================|==========================|\n       167  |     4.716e-01      0.00  |     1.287e-03      0.00  |\n       602  |     1.638e-01      1.65  |     3.848e-04      1.88  |\n      2282  |     4.544e-02      1.92  |     9.328e-05      2.13  |\n      8882  |     1.179e-02      1.99  |     2.321e-05      2.05  |\n\n    ndof    | ||∇(u-u_h)|| (BR)  order |||∇(u-u_h)|| (BR+)  order |\n============|==========================|==========================|\n       167  |     9.542e+00      0.00  |     2.474e-02      0.00  |\n       602  |     6.818e+00      0.52  |     9.945e-03      1.42  |\n      2282  |     3.771e+00      0.89  |     2.467e-03      2.09  |\n      8882  |     1.961e+00      0.96  |     6.074e-04      2.06  |\n\n    ndof    |  ||ϱ-ϱ_h|| (BR)    order |  ||ϱ-ϱ_h|| (BR+)   order |\n============|==========================|==========================|\n       167  |     6.249e-03      0.00  |     5.640e-03      0.00  |\n       602  |     2.947e-03      1.17  |     2.820e-03      1.08  |\n      2282  |     1.448e-03      1.07  |     1.410e-03      1.04  |\n      8882  |     7.198e-04      1.03  |     7.050e-04      1.02  |","category":"page"},{"location":"examples/Example240_CompressibleStokes2D/","page":"240 : Compressible Stokes 2D","title":"240 : Compressible Stokes 2D","text":"(Image: )","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/#:-Nonlinear-Poisson-Problem-2D","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"","category":"section"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"This example computes the solution u of the nonlinear Poisson problem","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"beginaligned\n-mathrmdiv(q(u) nabla u)  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"with some right-hand side f on a series of uniform refinements of the unit square Omega. The quantity q(u) makes the problem nonlinear and we consider the two possibilites","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"beginaligned\n    q_1(u) = 1 + u^2\n    q_2(u) = (kappa + lvert nabla u rvert)^p-2\nendaligned","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"where the second one is known is the p-Laplacian (plus some small regularisation kappa geq 0 to make it solvable with the Newton solver).","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"This example demonstrates the automatic differentation feature and explains how to setup a nonlinear expression (either via a function (q = 1) or a callable struct (q = 2)) and how to assign it to the problem description. The setup is tested with some manufactured quadratic solution.","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"Also the factorization in the linear solver can be changed to anything <:ExtendableSparse.AbstractFactorization (but not every one will work in this example).","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"module Example205_NonlinearPoisson2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableSparse\nusing ExtendableGrids\nusing GridVisualize\n\n# problem data\nfunction exact_function!(result,x)\n    result[1] = x[1]*x[2]\n    return nothing\nend\nfunction rhs!(q,p,κ)\n    function closure(result,x)\n        if q == 1\n            result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div((1+u^2)*grad(u))\n        elseif q == 2\n            result[1] = -2*(p-2) * (κ + x[1]^2+x[2]^2)^((p-2)/2-1) * x[1] * x[2] # = -div((κ + |grad(u)|)^p-2*grad(u))\n        end\n        return nothing\n    end\n    return closure\nend\n\n# for kernels withouts parameters, closures should work fine\nfunction diffusion_kernel1!(result, input)\n    # input[1,2:3] = [u, grad(u)]\n    result[1] = (1+input[1]^2)*input[2]\n    result[2] = (1+input[1]^2)*input[3]\n    return nothing\nend\nfunction jac_diffusion_kernel1!(jacobian, input)\n    jacobian[1,1] = 2*input[1]*input[2]\n    jacobian[1,2] = (1+input[1]^2)\n    jacobian[2,1] = 2*input[1]*input[3]\n    jacobian[2,3] = (1+input[1]^2)\n    return nothing\nend\n\n# alternatively callable structs are possible\n# (and currently suggested if kernel should depend on parameters)\nmutable struct diffusion_kernel2{T}\n    p::T\n    κ::T\nend\n\n(DK::diffusion_kernel2)(result,input) = (\n    result[1] = (DK.κ + input[1]^2 + input[2]^2)^((DK.p-2)/2);\n    result[2] = result[1] * input[2];\n    result[1] = result[1] * input[1];\n    return nothing\n)\n\n# needs to be initialized as const currently to avoid some internal allocations\n# (but parameters can be changed in main)\nconst DK = diffusion_kernel2(0.0,1.0)\n\n# everything is wrapped in a main function\n# default argument trigger P1-FEM calculation, you might also want to try H1P2{1,2}\nfunction main(;\n    q::Int = 1,           # which nonlinear operator should be used?\n    p::Float64 = 2.7,     # coefficient for diffusion kernel 2\n    κ::Float64 = 0.0001,  # coefficient for diffusion kernel 2\n    nlevels = 6,          # number of levels in refinement loop\n    FEType = H1P1{1},     # FEType to be used (H1P2{1,2} should give exact solution)\n    autodiff = false,     # only for q = 1: use jacobians from automatic differentiation or the ones provided above? (q = 2 always uses autodiff)\n    Plotter = nothing,\n    verbosity = 0,\n    testmode = false,\n    factorization = ExtendableSparse.LUFactorization)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = grid_unitsquare(Triangle2D)\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", bonus_quadorder = 2)\n    ∇u = ∇(u)\n    f = DataFunction(rhs!(q,p,κ), [1,2]; dependencies = \"X\", name = \"f\", bonus_quadorder = 4)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    if q == 1\n        nonlin_diffusion = NonlinearForm(Gradient, [Identity, Gradient], [1,1], diffusion_kernel1!, [2,3]; name = \"(1+u^2) ∇u ⋅ ∇v\", bonus_quadorder = 2, jacobian = autodiff ? \"auto\" : jac_diffusion_kernel1!, sparse_jacobian = true)\n    elseif q == 2\n        DK.κ = κ\n        DK.p = p\n        nonlin_diffusion = NonlinearForm(Gradient, [Gradient], [1], DK, [2,2]; name = \"(κ+|∇u|^2) ∇u ⋅ ∇v\", bonus_quadorder = 4, jacobian = \"auto\", sparse_jacobian = true)\n    else\n        @error \"only q ∈ [1,2] !\"\n    end\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f; store = true))\n    @show Problem\n\n    # prepare error calculation\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(∇u, Gradient)\n    NDofs = zeros(Int,nlevels)\n    Results = zeros(Float64,nlevels,2)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # create finite element space and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"u_h\",FES)\n\n        # solve\n        @show Solution\n        GradientRobustMultiPhysics.solve!(Solution, Problem; linsolver = factorization, maxiterations = 10, show_statistics = true)\n\n        # calculate L2 and H1 error and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1Error,Solution[1]))\n    end\n\n    if testmode == true\n        return Results[end,2]\n    else\n        # plot\n        p = GridVisualizer(; Plotter = Plotter, layout = (1,3), clear = true, resolution = (1500,500))\n        scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], levels = 7, title = \"u_h\")\n        scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels = 7, title = \"∇u_h (abs + quiver)\")\n        vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), spacing = 0.1, clear = false)\n        convergencehistory!(p[1,3], NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n\n        # print/plot convergence history\n        print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    end\nend\n\n# test function that is called by test unit\n# tests if the above problem is solved exactly by P2-FEM\nfunction test()\n    return main(; FEType = H1P2{1,2}, q = 1, nlevels = 1, testmode = true, autodiff = true) + main(; FEType = H1P2{1,2}, q = 1, nlevels = 1, testmode = true, autodiff = false)\nend\n\nend","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"julia> Example205_NonlinearPoisson2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = nonlinear Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | u / nonlinear Poisson equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (1+u^2) ∇u ⋅ ∇v [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |      13 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 9.68e+00/6.30e-06/9.69e+00\n\t      1   | 1.244445e-16 | 1.879348e-01 | 2.79e-04/8.34e-05/1.07e-02\n\t      2   | 4.755326e-16 | 2.427676e-03 | 1.35e-04/6.47e-05/2.20e-04\n\t      3   | 5.394962e-16 | 3.580510e-07 | 1.16e-04/2.66e-05/1.56e-04\n\t      4   | 5.383795e-16 | 8.272291e-15 | 1.08e-04/2.12e-05/1.41e-04\n\t    total |                             | 9.68e+00/2.02e-04/9.70e+00\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |      41 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.91e-03/2.30e-06/1.92e-03\n\t      1   | 4.017305e-16 | 1.552235e-01 | 4.79e-04/1.83e-04/5.49e-03\n\t      2   | 1.944857e-15 | 1.898915e-03 | 3.86e-04/1.44e-04/5.57e-04\n\t      3   | 1.002450e-15 | 4.461316e-07 | 3.73e-04/7.44e-05/4.67e-04\n\t      4   | 1.204291e-15 | 2.421832e-14 | 3.70e-04/5.59e-05/4.44e-04\n\t    total |                             | 3.52e-03/4.60e-04/8.88e-03\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |     145 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 3.48e-03/2.00e-06/3.48e-03\n\t      1   | 1.613098e-15 | 9.834582e-02 | 1.49e-03/4.36e-04/1.99e-03\n\t      2   | 1.859460e-15 | 1.307935e-03 | 1.43e-03/4.99e-04/1.97e-03\n\t      3   | 2.793298e-15 | 4.214647e-07 | 1.43e-03/3.18e-04/1.78e-03\n\t      4   | 2.926989e-15 | 3.068455e-14 | 1.42e-03/3.01e-04/1.75e-03\n\t    total |                             | 9.25e-03/1.56e-03/1.10e-02\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |     545 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.01e-02/3.00e-06/1.01e-02\n\t      1   | 2.179695e-15 | 5.522608e-02 | 5.69e-03/1.51e-03/7.31e-03\n\t      2   | 3.937254e-15 | 8.487585e-04 | 5.86e-03/1.86e-03/7.81e-03\n\t      3   | 4.376811e-15 | 2.555420e-07 | 5.63e-03/1.41e-03/7.12e-03\n\t      4   | 4.880589e-15 | 2.224762e-14 | 5.63e-03/1.35e-03/7.07e-03\n\t    total |                             | 3.29e-02/6.13e-03/3.94e-02\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    2113 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 3.59e-02/3.50e-06/3.60e-02\n\t      1   | 4.878624e-15 | 2.924738e-02 | 2.27e-02/5.72e-03/2.86e-02\n\t      2   | 9.482721e-15 | 4.905172e-04 | 2.29e-02/6.78e-03/2.99e-02\n\t      3   | 9.458354e-15 | 1.346748e-07 | 2.26e-02/5.42e-03/2.83e-02\n\t      4   | 9.123255e-15 | 1.889654e-14 | 2.28e-02/5.51e-03/2.85e-02\n\t    total |                             | 1.27e-01/2.34e-02/1.51e-01\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    8321 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.38e-01/2.80e-06/1.38e-01\n\t      1   | 9.739382e-15 | 1.504798e-02 | 8.92e-02/2.44e-02/1.14e-01\n\t      2   | 1.887126e-14 | 2.640269e-04 | 9.06e-02/3.22e-02/1.23e-01\n\t      3   | 1.879077e-14 | 6.824839e-08 | 8.98e-02/4.57e-02/1.36e-01\n\t      4   | 1.874480e-14 | 3.214605e-14 | 8.95e-02/2.63e-02/1.16e-01\n\t    total |                             | 4.98e-01/1.29e-01/6.28e-01\n\n\n    ndofs   |   || u - u_h ||    order | || ∇(u - u_h) ||   order |\n============|==========================|==========================|\n        13  |     6.623e-03      0.00  |     1.444e-01      0.00  |\n        41  |     1.658e-03      2.41  |     7.217e-02      1.21  |\n       145  |     4.147e-04      2.19  |     3.609e-02      1.10  |\n       545  |     1.037e-04      2.09  |     1.804e-02      1.05  |\n      2113  |     2.592e-05      2.05  |     9.021e-03      1.02  |\n      8321  |     6.481e-06      2.02  |     4.511e-03      1.01  |","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205 : Nonlinear Poisson Problem 2D","title":"205 : Nonlinear Poisson Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/#:-Lagrange-Multiplier-on-Faces","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"","category":"section"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"(source code)","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"This code demonstrates the novel feature of finite element spaces on faces by providing AT = ON_FACES in the finite element space constructor. It is used here to solve a bestapproximation into an Hdiv-conforming space by using a broken Hdiv space and setting the normal jumps on interior faces to zero by using a Lagrange multiplier on the faces of the grid (a broken H1-conforming space). Then the solution is compared to the solution of the same problem using the continuous Hdiv-conforming space.","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"module Example209_FaceLagrangeMultiplier2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[2]\n    result[2] = x[2] + 1\n    return nothing\nend\nconst u = DataFunction(exact_function!, [2,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 3)\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),3)\n\n    # define bestapproximation problem\n    Problem = L2BestapproximationProblem(u; name = \"constrained L2-bestapproximation problem\", bestapprox_boundary_regions = [])\n\n    # we want to use a broken space and constrain the normal jumps on interior faces\n    # in form of a Lagrange multiplier which needs an additional unknown\n    add_unknown!(Problem; unknown_name = \"LM face jumps\", equation_name = \"face jump constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(NormalFluxDisc{Jump}; AT = ON_IFACES))\n    # the diagonal operator sets the Lagrange multiplier on all boundary face regions to zero\n    add_operator!(Problem, [2,2], DiagonalOperator(1; regions = [1,2,3,4]))\n\n    # choose some (inf-sup stable) finite element types\n    # first space is the Hdiv element that lives ON_CELLS\n    # second will be used for the Lagrange multiplier space that lives ON_FACES\n    FEType = [HDIVRT1{2}, H1P1{1}]\n    FES = [FESpace{FEType[1], ON_CELLS}(xgrid; broken = true),FESpace{FEType[2], ON_FACES}(xgrid; broken = true)]\n\n    # solve\n    Solution = FEVector([\"u_h (Hdiv-broken)\", \"LM face jumps\"],FES)\n    solve!(Solution, Problem)\n\n    # solve again with the (unbroken) Hdiv-continuous element to test that we get the same result\n    # note: for an FESpace living ON_CELLS and broken = false is the default\n    Problem = L2BestapproximationProblem(u; bestapprox_boundary_regions = [])\n    Solution2 = FEVector(\"u_h (Hdiv-cont.)\",FESpace{FEType[1]}(xgrid))\n    solve!(Solution2, Problem)\n\n    # calculate L2 error of both solutions and their difference\n    L2Error = L2ErrorIntegrator(u, Identity)\n    L2Diff = L2DifferenceIntegrator(2, Identity)\n    println(\"\\tL2error(Hdiv-broken) = $(sqrt(evaluate(L2Error,Solution[1])))\")\n    println(\"\\tL2error(Hdiv-cont.) = $(sqrt(evaluate(L2Error,Solution2[1])))\")\n    println(\"\\tL2error(difference) = $(sqrt(evaluate(L2Diff,[Solution[1], Solution2[1]])))\")\n\n    # plot both solutions\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 7, title = \"u_1 (abs + quiver)\")\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.1, clear = false)\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution2[1]; abs = true),1,:), levels = 7, title = \"u_2 (abs + quiver)\")\n    vectorplot!(p[1,2],xgrid,evaluate(PointEvaluator(Solution2[1], Identity)), spacing = 0.1, clear = false)\n\nend\nend","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"Default output:","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"julia> Example209_FaceLagrangeMultiplier2D.main()\n\tL2error(Hdiv-broken) = 0.0004715248381994804\n\tL2error(Hdiv-cont.) = 0.0004715248381994811\n\tL2error(difference) = 5.775617893755897e-16","category":"page"},{"location":"examples/Example209_FaceLagrangeMultiplier2D/","page":"209 : Lagrange Multiplier on Faces","title":"209 : Lagrange Multiplier on Faces","text":"(Image: )","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/#A07-:-Interpolation-Between-Meshes","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"","category":"section"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"(source code)","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"This example demonstrates the interpolation between meshes feature. Here, we interpolate a function withe the P2 element of a coarse triangulation and then interpolate this P2 function on two uniform refinements into some P1 function. Then, both finite element functions are plotted.","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"module ExampleA07_InterpolationBetweenMeshes\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# function to interpolate\nfunction exact_u(result,x)\n    result[1] = sin(4*pi*x[1])*sin(4*pi*x[2]);\n    result[2] = cos(4*pi*x[1])*cos(4*pi*x[2]);\nend\nconst u = DataFunction(exact_u, [2,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 5)\n\n# everything is wrapped in a main function\nfunction main(; ν = 1e-3, nrefinements = 4, verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate two grids\n    xgrid1 = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n    xgrid2 = uniform_refine(xgrid1, 2; store_parents = true)\n\n    @show xgrid1 xgrid2\n\n    # set finite element types for the two grids\n    FEType1 = H1P2{2,2}\n    FEType2 = H1P2{2,2}\n\n    # generate coressponding finite element spaces and FEVectors\n    FES1 = FESpace{FEType1}(xgrid1)\n    FES2 = FESpace{FEType2}(xgrid2)\n    FEFunction1 = FEVector(\"$FEType1 on grid 1\",FES1)\n    FEFunction2 = FEVector(\"$FEType2 on grid 2\",FES2)\n\n    # interpolate function onto first grid\n    interpolate!(FEFunction1[1], u)\n\n    # interpolate onto other grid\n    @time interpolate!(FEFunction2[1], FEFunction1[1])\n    @time interpolate!(FEFunction2[1], FEFunction1[1], use_cellparents = true)\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid1, view(nodevalues(FEFunction1[1]),1,:), levels = 11, title = \"u_h ($FEType1, coarse grid)\")\n    scalarplot!(p[1,2], xgrid2, view(nodevalues(FEFunction2[1]),1,:), levels = 11, title = \"u_h ($FEType2, fine grid)\")\nend\n\nend","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"Default output:","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"julia> ExampleA07_InterpolationBetweenMeshes.main()\nxgrid1 = ExtendableGrid{Float64, Int32};\ndim: 2 nodes: 545 cells: 1024 bfaces: 64\n\n\nxgrid2 = ExtendableGrid{Float64, Int32};\ndim: 2 nodes: 8321 cells: 16384 bfaces: 256\n\n\n  1.855794 seconds (6.71 M allocations: 246.273 MiB, 5.41% gc time, 83.41% compilation time)\n  1.351051 seconds (5.18 M allocations: 155.608 MiB, 2.19% gc time, 81.15% compilation time)","category":"page"},{"location":"examples/ExampleA07_InterpolationBetweenMeshes/","page":"A07 : Interpolation Between Meshes","title":"A07 : Interpolation Between Meshes","text":"(Image: )","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/#:-Obstacle-Problem-2D","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"","category":"section"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"This example computes the solution u of the nonlinear obstacle problem that seeks the minimiser of the energy functional","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"beginaligned\n    E(u) = frac12 int_Omega lvert nabla u rvert^2 dx - int_Omega f u dx\nendaligned","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"with some right-hand side f within the set of admissible functions that lie above an obstacle  chi","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"beginaligned\n    mathcalK = lbrace u in H^1_0(Omega)  u geq chi rbrace\nendaligned","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"The obstacle constraint is realised via a penalty term \\begin{aligned}     \\frac{1}{\\epsilon} \\| min(0, u - \\chi) \\|^2_{L^2} \\end{aligned} that is added to the energy above and is automatically differentiated for a Newton scheme.","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"module Example208_ObstacleProblem2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# define obstacle and penalty kernel\nconst f = DataFunction([-1])\nconst χ! = (result,x) -> (result[1] = (cos(4*x[1]*π)*cos(4*x[2]*π) - 1)/20)\nfunction obstacle_penalty_kernel!(result, input, x)\n    χ!(result, x) # eval obstacle\n    result[1] = min(0, input[1] - result[1])\n    return nothing\nend\n\nfunction main(; Plotter = nothing, verbosity = 0, ϵ = 1e-4, nrefinements = 6, FEType = H1P1{1})\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), nrefinements)\n\n    # generate problem description\n    Problem = PDEDescription(\"obstacle problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"obstacle problem\")\n    add_operator!(Problem, [1,1], LaplaceOperator(1.0; store = true))\n    add_operator!(Problem, [1,1], NonlinearForm(Identity, [Identity], [1], obstacle_penalty_kernel!, [1,1]; name = \"eps^{-1} ||(u-χ)_||\", dependencies = \"X\", factor = 1/ϵ, newton = true) )\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f; store = true))\n\n    # create finite element space and solution vector\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector(\"u_h\",FES)\n\n    # solve\n    @show Problem Solution\n    solve!(Solution, Problem; show_statistics = true, maxiterations = 20)\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], levels = 6, title = \"u_h\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels = 0, colorbarticks = 8, title = \"∇u_h (abs + quiver)\")\n    vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), spacing = 0.1, clear = false)\nend\nend","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"julia> Example208_ObstacleProblem2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = obstacle problem\n\n     id   | unknown name / equation name\n    [1]   | u / obstacle problem \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | eps^{-1} ||(u-χ)_|| [AD-Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (Constant([-1]), id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    8321 | u_h (H1P1{1})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 4.41e+00/3.50e-06/4.41e+00\n\t      1   | 1.293652e-15 | 1.741413e+00 | 7.97e-02/2.55e-02/1.06e-01\n\t      2   | 1.171333e-15 | 6.073690e-02 | 6.82e-02/2.82e-02/9.70e-02\n\t      3   | 9.629393e-16 | 4.050710e-02 | 6.78e-02/2.16e-02/8.98e-02\n\t      4   | 7.331473e-16 | 2.865242e-02 | 6.81e-02/2.20e-02/9.06e-02\n\t      5   | 5.371653e-16 | 1.847692e-02 | 6.84e-02/2.17e-02/9.07e-02\n\t      6   | 5.054443e-16 | 9.456218e-03 | 6.72e-02/4.19e-02/1.10e-01\n\t      7   | 4.875791e-16 | 2.891193e-03 | 6.70e-02/2.10e-02/8.85e-02\n\t      8   | 4.940293e-16 | 3.887883e-04 | 6.71e-02/2.11e-02/8.86e-02\n\t      9   | 4.874620e-16 | 4.874621e-16 | 6.70e-02/2.11e-02/8.87e-02\n\t    total |                             | 5.03e+00/2.24e-01/5.26e+00\n","category":"page"},{"location":"examples/Example208_ObstacleProblem2D/","page":"208 : Obstacle Problem 2D","title":"208 : Obstacle Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/Example301_Poisson3D/#:-Poisson-Problem-3D","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"","category":"section"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"(source code)","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"This example computes the solution u of the three dimensional Poisson problem","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"beginaligned\n-Delta u  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"with some right-hand side f on the unit cube domain Omega on a series of uniform refined meshes (tetrahedra or parallelepipeds).","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"module Example301_Poisson3D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# problem data\nfunction exact_function!(result,x)\n    result[1] = x[1]*(x[3] - x[2]) + x[2]*x[2]\n    return nothing\nend\n\n# negotiate data functions to the package\nconst u = DataFunction(exact_function!, [1,3]; name = \"u\", dependencies = \"X\", bonus_quadorder = 2)\nconst f = DataFunction([-2]; name = \"f\") # = -Δu = -2\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, nlevels = 4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    # (replace Parallelepiped3D by Tetrahedron3D to change the cell geometries)\n    xgrid = grid_unitcube(Tetrahedron3D)\n\n    # set finite element type used for discretisation\n    FEType = H1P1{1}\n\n    # create Poisson problem via prototype and add data\n    Problem = PoissonProblem(1.0)\n    add_boundarydata!(Problem, 1, [1,2,3,4,5,6], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n\n    # prepare error calculation\n    L2Error = L2ErrorIntegrator(u)\n    H1Error = L2ErrorIntegrator(∇(u), Gradient)\n    Results = zeros(Float64, nlevels, 2); NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # create finite element space and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n\n        # solve the problem\n        solve!(Solution, Problem)\n\n        # calculate L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1Error,Solution[1]))\n    end\n\n    # plot (Plotter = GLMakie should work)\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels = 5, title = \"u_h\")\n    convergencehistory!(p[1,2], NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/3),  ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/3), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\nend\n\nend","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"Default output:","category":"page"},{"location":"examples/Example301_Poisson3D/","page":"301 : Poisson-Problem 3D","title":"301 : Poisson-Problem 3D","text":"julia> Example301_Poisson3D.main()\n\n    ndofs   |   || u - u_h ||    order | || ∇(u - u_h) ||   order |\n============|==========================|==========================|\n        27  |     3.386e-02      0.00  |     4.383e-01      0.00  |\n       125  |     8.973e-03      2.60  |     2.259e-01      1.30  |\n       729  |     2.281e-03      2.33  |     1.138e-01      1.17  |\n      4913  |     5.737e-04      2.17  |     5.702e-02      1.09  |","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/#:-Reaction-Convection-Diffusion-Problem-2D","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"","category":"section"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"This example computes the solution of some convection-diffusion problem","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"-nu Delta u + mathbfbeta cdot nabla u + alpha u = f quad textin  Omega","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"with some diffusion coefficient  nu, some vector-valued function  mathbfbeta, some scalar-valued function alpha and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"We prescribe an analytic solution with mathbfbeta = (10) and alpha = 01 and check the L2 and H1 error convergence of the method on a series of uniformly refined meshes. We also compare with the error of a simple nodal interpolation and plot the solution and the norm of its gradient.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"For small nu, the convection term dominates and pollutes the accuracy of the method. For demonstration some simple gradient jump (interior penalty) stabilisation is added to improve things.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"module Example203_ReactionConvectionDiffusion2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# coefficient functions\nconst β = DataFunction([1,0]; name = \"β\")\nconst α = DataFunction([0.01]; name = \"α\")\n\n# problem data and expected exact solution\nfunction exact_solution!(result,x)\n    result[1] = x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1]\nend\nfunction exact_solution_rhs!(ν)\n    function closure(result,x)\n        # diffusion part\n        result[1] = -ν*(2*x[2]*(x[2]-1) + 2*x[1]*(x[1]-1))\n        # convection part (beta * grad(u))\n        eval_data!(β)\n        result[1] += β.val[1] * (x[2]*(2*x[1]-1)*(x[2]-1) + 1)\n        result[1] += β.val[2] * (x[1]*(2*x[2]-1)*(x[1]-1))\n        # reaction part (alpha*u)\n        eval_data!(α)\n        result[1] += α.val[1] * (x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1])\n        return nothing\n    end\nend\n\n# custom bilinearform that can assemble the full PDE operator\nfunction ReactionConvectionDiffusionOperator(α, β, ν)\n    function action_kernel!(result, input)\n        # input = [u,∇u] as a vector of length 3\n        eval_data!(β)\n        eval_data!(α)\n        result[1] = α.val[1] * input[1] + β.val[1] * input[2] + β.val[2] * input[3]\n        result[2] = ν * input[2]\n        result[3] = ν * input[3]\n        # result will be multiplied with [v,∇v]\n        return nothing\n    end\n    action = Action(action_kernel!, [3,3]; bonus_quadorder = max(α.bonus_quadorder,β.bonus_quadorder))\n    return BilinearForm([OperatorPair{Identity,Gradient},OperatorPair{Identity,Gradient}], action; name = \"ν(∇u,∇v) + (αu + β⋅∇u, v)\", transposed_assembly = true)\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, ν = 1e-5, τ = 1e-2, nlevels = 5, order = 2)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load a mesh of the unit square\n    # with four boundary regions (1 = bottom, 2 = right, 3 = top, 4 = left)\n    xgrid = grid_unitsquare(Triangle2D); # initial grid\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_solution!, [1,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 4)\n    ∇u = ∇(u) # AD gradient of user-function u by ForwardDiff\n    f = DataFunction(exact_solution_rhs!(ν), [1,2]; name = \"f\", dependencies = \"X\", bonus_quadorder = 3)\n\n    # choose a finite element type, here we choose a second order H1-conforming one\n    FEType = H1Pk{1,2,order}\n\n    # create PDE description\n    Problem = PDEDescription(\"reaction-convection-diffusion problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"reaction-convection-diffusion equation\")\n    add_operator!(Problem, [1,1], ReactionConvectionDiffusionOperator(α,β,ν))\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n\n    # add boundary data to unknown 1 (there is only one in this example)\n    add_boundarydata!(Problem, 1, [1,3], BestapproxDirichletBoundary; data = u)   # u_h =  u in bregions 1 and 3\n    add_boundarydata!(Problem, 1, [2], InterpolateDirichletBoundary; data = u)    # u_h = Iu in bregion 2\n    add_boundarydata!(Problem, 1, [4], HomogeneousDirichletBoundary)              # u_h =  0 in bregion 4\n\n    # add a gradient jump (interior penalty) stabilisation for dominant convection\n    if τ > 0\n        # first we define an item-dependent action kernel...\n        xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n        stab_action = Action((result,input,item) -> (result .= input .* xFaceVolumes[item[1]]^2), [2,2]; name = \"stabilisation action\", dependencies = \"I\")\n        JumpStabilisation = BilinearForm([Jump(Gradient), Jump(Gradient)], stab_action; AT = ON_IFACES, factor = τ, name = \"τ |F|^2 [∇(u)]⋅[∇(v)]\")\n        add_operator!(Problem, [1,1], JumpStabilisation)\n    end\n\n    # finally we have a look at the defined problem\n    @show Problem\n\n    # define ItemIntegrators for L2/H1 error computation and some arrays to store the errors\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(∇u, Gradient)\n    Results = zeros(Float64,nlevels,4); NDofs = zeros(Int,nlevels)\n\n    # refinement loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n        xFaceVolumes = xgrid[FaceVolumes] # update xFaceVolumes used in stabilisation definition\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n\n        # solve PDE\n        solve!(Solution, Problem)\n\n        # interpolate (just for comparison)\n        Interpolation = FEVector(\"I(u)\",FES)\n        interpolate!(Interpolation[1], u)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2Error,Interpolation[1]))\n        Results[level,3] = sqrt(evaluate(H1Error,Solution[1]))\n        Results[level,4] = sqrt(evaluate(H1Error,Interpolation[1]))\n    end\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,3), clear = true, resolution = (1500,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels = 7, title = \"u_h\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels = 0, colorbarticks = 9, title = \"∇u_h (abs + quiver)\")\n    vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), vscale = 0.8, clear = false)\n    convergencehistory!(p[1,3], NDofs, Results; add_h_powers = [order,order+1], X_to_h = X -> X.^(-1/2), legend = :lb, fontsize = 20, ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\nend\n\nend","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"julia> Example203_ReactionConvectionDiffusion2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = reaction-convection-diffusion problem\n\n     id   | unknown name / equation name\n    [1]   | u / reaction-convection-diffusion equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ν(∇u,∇v) + (αu + β⋅∇u, v) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n            | τ |F|^2 [∇(u)]⋅[∇(v)] (APT = BilinearForm, AT = ON_IFACES, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 3]\n                         InterpolateDirichletBoundary -> [2]\n                         HomogeneousDirichletBoundary -> [4]\n                          \n\n\n\n    ndofs   |   || u - u_h ||    order |   || u - Iu ||     order | || ∇(u - u_h) ||   order |  || ∇(u - Iu) ||   order |\n============|==========================|==========================|==========================|==========================|\n        41  |     1.500e-03      0.00  |     7.662e-04      0.00  |     2.188e-02      0.00  |     1.451e-02      0.00  |\n       145  |     1.531e-04      3.61  |     9.342e-05      3.33  |     4.908e-03      2.37  |     3.575e-03      2.22  |\n       545  |     1.724e-05      3.30  |     1.160e-05      3.15  |     1.181e-03      2.15  |     8.906e-04      2.10  |\n      2113  |     1.965e-06      3.20  |     1.448e-06      3.07  |     2.855e-04      2.10  |     2.224e-04      2.05  |\n      8321  |     2.298e-07      3.13  |     1.809e-07      3.03  |     6.972e-05      2.06  |     5.560e-05      2.02  |","category":"page"},{"location":"examples/Example203_ReactionConvectionDiffusion2D/","page":"203 : Reaction-Convection-Diffusion-Problem 2D","title":"203 : Reaction-Convection-Diffusion-Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/#:-Flow-around-a-cylinder-2D","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"","category":"section"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"(source code)","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"This example solves the DFG Navier-Stokes benchmark problem","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"on a rectangular 2D domain with a circular obstacle, see here for details.","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"This script demonstrates the employment of external grid generators and the computation of drag and lift coefficients.","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"Note: This example needs the additional packages Triangulate and SimplexGridFactory to generate the mesh.","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"module Example230_FlowAroundCylinder2D\n\nusing GradientRobustMultiPhysics\nusing Triangulate\nusing SimplexGridFactory\nusing ExtendableGrids\nusing GridVisualize\n\n# inlet data for Karman vortex street example\n# as in DFG benchmark 2D-1 (Re = 20, laminar)\nconst umax = 0.3\nconst umean = 2//3 * umax\nconst L, W, H = 0.1, 2.2, 0.41\nfunction bnd_inlet!(result,x)\n    result[1] = 4*umax*x[2]*(H-x[2])/(H*H);\n    result[2] = 0.0;\nend\nconst inflow = DataFunction(bnd_inlet!, [2,2]; name = \"u_inflow\", dependencies = \"X\", bonus_quadorder = 2)\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, μ = 1e-3, maxvol = 1e-3)\n\n    # load grid (see function below)\n    xgrid = make_grid(W,H; n = Int(ceil(sqrt(1/maxvol))), maxvol = maxvol)\n\n    # Bernardi--Raugel element + reconstruction operator\n    FETypes = [H1P2B{2,2}, H1P1{1}];\n    VeloIdentity = ReconstructionIdentity{HDIVBDM2{2}} # div-free reconstruction operator for Identity\n\n    # PDE description\n    Problem = PDEDescription(\"NSE problem (μ = $μ)\")\n    add_unknown!(Problem; equation_name = \"momentum equation\", unknown_name = \"u\")\n    add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"p\")\n\n    # add operators (Laplacian, Div-LagrangeMultierplier, Convection)\n    add_operator!(Problem, [1,1], LaplaceOperator(μ; store = true))\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n    add_operator!(Problem, [1,1], ConvectionOperator(1, VeloIdentity, 2, 2; test_operator = VeloIdentity, newton = true))\n\n    # add boundary data (bregion 2 is outflow, 4 is inflow, 5 is cylinder)\n    add_boundarydata!(Problem, 1, [1,3,5], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], BestapproxDirichletBoundary; data = inflow)\n\n    # inspect problem\n    @show Problem\n\n    # generate FESpaces and Solution vector\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n    Solution = FEVector([\"u_h\",\"p_h\"],FES)\n\n    # solve\n    solve!(Solution, Problem; maxiterations = 50, target_residual = 1e-10, show_statistics = true)\n\n    # postprocess : compute drag/lift (see function below)\n    draglift = get_draglift(Solution, μ)\n    pdiff = get_pressure_difference(Solution)\n    println(\"[drag, lift] = $draglift\")\n    println(\"p difference = $pdiff\")\n\n    # plots via GridVisualize\n    p = GridVisualizer(; Plotter = Plotter, layout = (4,1), clear = true, resolution = (800,1200))\n    gridplot!(p[1,1],xgrid, linewidth = 1)\n    gridplot!(p[2,1],xgrid, linewidth = 1, xlimits = [0,0.3], ylimits = [0.1,0.3])\n    scalarplot!(p[3,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 0, colorbarticks = 7)\n    vectorplot!(p[3,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = [0.2,0.04], clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[4,1],xgrid,view(nodevalues(Solution[2]),1,:), levels = 11, title = \"p_h\")\nend\n\nfunction get_pressure_difference(Solution::FEVector)\n    xgrid = Solution[2].FES.xgrid\n    PE = PointEvaluator(Solution[2], Identity)\n    CF = CellFinder(xgrid)\n    xref = zeros(Float64,2)\n    p_left = zeros(Float64,1); x1 = [0.15,0.2]\n    p_right = zeros(Float64,1); x2 = [0.25,0.2]\n    cell::Int = gFindLocal!(xref, CF, x1; icellstart = 1)\n    if cell == 0\n        cell = gFindBruteForce!(xref, CF, x1)\n    end\n    evaluate!(p_left,PE,xref,cell)\n    cell = gFindLocal!(xref, CF, x2; icellstart = 1)\n    if cell == 0\n        cell = gFindBruteForce!(xref, CF, x2)\n    end\n    evaluate!(p_right,PE,xref,cell)\n    return p_left - p_right\nend\n\nfunction get_draglift(Solution::FEVector, μ)\n\n    # this function is interpolated for drag/lift test function creation\n    function circle_bnd_testfunction(component)\n        function closure!(result,x)\n            fill!(result,0)\n            if sqrt((x[1] - 0.2)^2 + (x[2] - 0.2)^2) <= 0.06\n                result[component] = 1\n            end\n        end\n    end\n\n    # drag lift calcuation by testfunctions\n    function draglift_kernel(result, input)\n        # input = [ u, grad(u), p , v , grad(v)]\n        #         [1:2,  3:6,   7 ,8:9,  10:13 ]\n        result[1] = μ * (input[3]*input[10] + input[4]*input[11] + input[5]*input[12] + input[6]*input[13])\n        result[1] += (input[1] * input[3] + input[2] * input[4]) * input[8]\n        result[1] += (input[1] * input[5] + input[2] * input[6]) * input[9]\n        result[1] -= input[7] * (input[10] + input[13])\n        result[1] *= -(2/(umean^2*L))\n        return nothing\n    end\n    draglift_action = Action(draglift_kernel, [1,13]; name = \"drag/lift by testfunction\", dependencies = \"\", bonus_quadorder = 4)\n    DLIntegrator = ItemIntegrator([Identity, Gradient, Identity, Identity, Gradient], draglift_action)\n\n    # test for drag\n    TestFunction = FEVector(\"drag testfunction\",Solution[1].FES)\n    xBFaceFaces = Solution[1].FES.xgrid[BFaceFaces]\n    dragtest = DataFunction(circle_bnd_testfunction(1), [2,2]; name = \"drag test\", dependencies = \"X\", bonus_quadorder = 0)\n    interpolate!(TestFunction[1], ON_FACES, dragtest; items = xBFaceFaces)\n    drag = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunction[1],TestFunction[1]])\n\n    # test for lift\n    lifttest = DataFunction(circle_bnd_testfunction(2), [2,2]; name = \"lift test\", dependencies = \"X\", bonus_quadorder = 0)\n    interpolate!(TestFunction[1], ON_FACES, lifttest; items = xBFaceFaces)\n    lift = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunction[1],TestFunction[1]])\n\n    return [drag,lift]\nend\n\n# grid generator script using SimplexGridBuilder/Triangulate\nfunction make_grid(W,H; n=20,maxvol=0.1)\n\tbuilder=SimplexGridBuilder(Generator=Triangulate)\n    function circlehole!(builder, center, radius; n=20)\n        points=[point!(builder, center[1]+radius*sin(t),center[2]+radius*cos(t)) for t in range(0,2π,length=n)]\n        for i=1:n-1\n            facet!(builder,points[i],points[i+1])\n        end\n        facet!(builder,points[end],points[1])\n        holepoint!(builder,center)\n    end\n    p1=point!(builder,0,0)\n    p2=point!(builder,W,0)\n    p3=point!(builder,W,H)\n    p4=point!(builder,0,H)\n\n    # heuristic refinement around cylinder\n    refine_radius = 0.25\n    maxrefinefactor = 1//20\n    function unsuitable(x1,y1,x2,y2,x3,y3,area)\n        if area>maxvol*min(max(4*maxrefinefactor,abs((x1+x2+x3)/3 - 0.2)),1/maxrefinefactor)\n            return true\n        end\n        dist = sqrt( ( (x1+x2+x3)/3 - 0.2 )^2 + ( (y1+y2+y3)/3 - 0.2)^2) - 0.05\n        myarea= dist < refine_radius ? maxvol*max(maxrefinefactor,1-(refine_radius - dist)/refine_radius) : maxvol\n        if area>myarea\n           return true\n        else\n            return false\n        end\n    end\n\n    facetregion!(builder,1); facet!(builder,p1,p2)\n    facetregion!(builder,2); facet!(builder,p2,p3)\n    facetregion!(builder,3); facet!(builder,p3,p4)\n    facetregion!(builder,4); facet!(builder,p4,p1)\n    facetregion!(builder,5); circlehole!(builder, (0.2,0.2),0.05,n=n)\n\n    simplexgrid(builder,maxvolume=16*maxvol, unsuitable = unsuitable)\nend\n\nend","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"Default output:","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"julia> Example230_FlowAroundCylinder2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = NSE problem (μ = 0.001)\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((R(u) ⋅ ∇) u, R(v)) [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [4]\n                         HomogeneousDirichletBoundary -> [1, 3, 5]\n                          \n   BoundaryOperator[2] : \n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.42e+01/2.90e-06/1.43e+01\n\t      1   | 2.527264e-17 | 1.899986e-03 | 3.75e-01/3.07e-01/6.92e-01\n\t      2   | 2.663442e-17 | 5.392003e-04 | 3.57e-01/2.64e-01/6.25e-01\n\t      3   | 2.666707e-17 | 2.926551e-05 | 3.56e-01/2.11e-01/5.70e-01\n\t      4   | 2.901607e-17 | 1.060798e-07 | 3.58e-01/2.22e-01/5.83e-01\n\t      5   | 2.861485e-17 | 1.119313e-12 | 3.57e-01/2.09e-01/5.69e-01\n\t    total |                             | 1.60e+01/1.21e+00/1.73e+01\n\n[drag, lift] = [5.558270082490451, 0.010488569316224895]\np difference = [0.11865484048663102]","category":"page"},{"location":"examples/Example230_FlowAroundCylinder2D/","page":"230 : Flow around a cylinder 2D","title":"230 : Flow around a cylinder 2D","text":"(Image: )","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/#:-Transient-Flow-around-a-cylinder-2D","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"","category":"section"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"(source code)","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"This example solves the time-dependent DFG Navier-Stokes benchmark problem","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"beginaligned\nmathbfu_t  - mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"on a rectangular 2D domain with a circular obstacle in the time interval [0,8], see here for details.","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"Note: This example needs the additional packages Triangulate and SimplexGridFactory to generate the mesh.","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"module Example231_TransientFlowAroundCylinder2D\n\nusing GradientRobustMultiPhysics\nusing Triangulate\nusing SimplexGridFactory\nusing GridVisualize\nusing ExtendableGrids\nusing Printf\n\n# inlet data for Karman vortex street example\n# as in DFG benchmark 2D-3 (Re = 100)\nconst L, W, H = 0.1, 2.2, 0.41\nfunction bnd_inlet!(result,x,t)\n    result[1] = 6*x[2]*(H-x[2])/(H*H) * max(sin(pi*t/8),0)\n    result[2] = 0.0\nend\nconst inflow = DataFunction(bnd_inlet!, [2,2]; name = \"u_inflow\", dependencies = \"XT\", bonus_quadorder = 2)\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, μ = 1e-3, maxvol = 6e-3, T = [1//1,2//1,3//1,6//1,8//1], timestep = [2//100,1//100,5//1000,2//1000,5//1000], TIR = CrankNicolson, plot_step = 1e-2)\n\n    # load grid, finer grid is used for plots\n    xgrid = make_grid(W,H; n = Int(ceil(sqrt(1/maxvol))), maxvol = maxvol)\n    xgrid_plot = uniform_refine(xgrid,2; store_parents = true)\n    nnodes_plot = size(xgrid_plot[Coordinates],2)\n\n    # P2-bubble element + reconstruction operator\n    FETypes = [H1P2B{2,2}, H1P1{1}];\n    VeloIdentity = ReconstructionIdentity{HDIVBDM2{2}} # div-free reconstruction operator for Identity\n\n    # PDE description\n    Problem = PDEDescription(\"NSE problem (μ = $μ)\")\n    add_unknown!(Problem; equation_name = \"momentum equation\", unknown_name = \"u\")\n    add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"p\", algebraic_constraint = true)\n    add_operator!(Problem, [1,1], LaplaceOperator(μ; store = true))\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n\n    # the convection operator is assembled to the right-hand side\n    # to keep the matrix constant in time (but we do subiterations in each timestep)\n    CO = ConvectionOperator(1, VeloIdentity, 2, 2; test_operator = VeloIdentity, newton = false)\n    add_rhsdata!(Problem, 1, restrict_operator(CO; fixed_arguments = [1,2], fixed_arguments_ids = [1,1], factor = -1))\n\n    # add boundary data (bregion 2 is outflow, 4 is inflow, 5 is cylinder)\n    add_boundarydata!(Problem, 1, [1,3,5], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], InterpolateDirichletBoundary; data = inflow)\n\n    # generate FESpaces and Solution vector and UpscaledSolution vector (for plot on finer grid)\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],FES)\n    UpscaledSolution = FEVector{Float64}([\"u_h (fine)\", \"p_h (fine)\"],[FESpace{H1P1{2}}(xgrid_plot),FESpace{H1P1{1}}(xgrid_plot)])\n\n    # prepare drag lift calculation by testfunctions\n    function circle_bnd_testfunction(component) # mask for drag/lift testfunction\n        function closure!(result,x)\n            fill!(result,0)\n            if sqrt((x[1] - 0.2)^2 + (x[2] - 0.2)^2) <= 0.06\n                result[component] = 1\n            end\n            return nothing\n        end\n    end\n\n    function draglift_kernel(result, input)\n        # input = [ u, grad(u), p , v , grad(v)]\n        #         [1:2,  3:6,   7 ,8:9,  10:13 ]\n        result[1] = μ * (input[3]*input[10] + input[4]*input[11] + input[5]*input[12] + input[6]*input[13])\n        result[1] += (input[1] * input[3] + input[2] * input[4]) * input[8]\n        result[1] += (input[1] * input[5] + input[2] * input[6]) * input[9]\n        result[1] -= input[7] * (input[10] + input[13])\n        result[1] *= -(2/L)\n        return nothing\n    end\n    drag::Float64 = 0\n    lift::Float64 = 0\n    draglift_action = Action{Float64}( draglift_kernel, [1,13]; name = \"drag/lift by testfunction\", dependencies = \"\", bonus_quadorder = 0)\n    DLIntegrator = ItemIntegrator([Identity, Gradient, Identity, Identity, Gradient], draglift_action)\n\n    # prepare drag/lift calculation\n    TestFunctionD = FEVector{Float64}(\"drag testfunction\",Solution[1].FES)\n    TestFunctionL = FEVector{Float64}(\"lift testfunction\",Solution[1].FES)\n    xBFaceFaces = Solution[1].FES.xgrid[BFaceFaces]\n    dragtest = DataFunction(circle_bnd_testfunction(1), [2,2]; name = \"drag test\", dependencies = \"X\", bonus_quadorder = 0)\n    lifttest = DataFunction(circle_bnd_testfunction(2), [2,2]; name = \"lift test\", dependencies = \"X\", bonus_quadorder = 0)\n    interpolate!(TestFunctionD[1], ON_FACES, dragtest; items = xBFaceFaces)\n    interpolate!(TestFunctionL[1], ON_FACES, lifttest; items = xBFaceFaces)\n\n    # prepare viewer\n    vis=GridVisualizer(Plotter=Plotter, resolution = (1200,300), isolines = 7, flimits = (-0.6,2.2))\n\n    # this function is called after each timestep\n    plot_step_count = Int(ceil(plot_step/timestep[1]))\n    function do_after_each_timestep(step, statistics)\n        if step == 0\n            @printf(\"|    DRAG        LIFT\")\n        else\n            drag = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunctionD[1],TestFunctionD[1]])\n            lift = evaluate(DLIntegrator,[Solution[1],Solution[1],Solution[2],TestFunctionL[1],TestFunctionL[1]])\n            @printf(\"| %.4e  %.4e\", drag, lift)\n            if mod(step,plot_step_count) == 0 && (step > 1) && Plotter !== nothing\n                interpolate!(UpscaledSolution[1], Solution[1], use_cellparents = true)\n                scalarplot!(vis, xgrid_plot, view(UpscaledSolution.entries,1:nnodes_plot), Plotter = Plotter, title = \"ux (T = $(Float64(TCS.ctime)))\")\n            end\n        end\n    end\n\n    # solve (after T[j] is reached the timestep is changed)\n    TCS = TimeControlSolver(Problem, Solution, TIR; timedependent_equations = [1], dt_operator = [VeloIdentity], show_iteration_details = true, maxiterations = 5, skip_update = [-1], target_residual = 1e-8, T_time = eltype(timestep))\n    for j = 1 : length(T)\n        plot_step_count = Int(ceil(plot_step/timestep[j]))\n        advance_until_time!(TCS, timestep[j], T[j]; do_after_each_timestep = do_after_each_timestep)\n    end\nend\n\n\n# grid generator script using SimplexGridBuilder/Triangulate\nfunction make_grid(W,H; n=20,maxvol=0.1)\n\tbuilder=SimplexGridBuilder(Generator=Triangulate)\n    function circlehole!(builder, center, radius; n=20)\n        points=[point!(builder, center[1]+radius*sin(t),center[2]+radius*cos(t)) for t in range(0,2π,length=n)]\n        for i=1:n-1\n            facet!(builder,points[i],points[i+1])\n        end\n        facet!(builder,points[end],points[1])\n        holepoint!(builder,center)\n    end\n    p1=point!(builder,0,0)\n    p2=point!(builder,W,0)\n    p3=point!(builder,W,H)\n    p4=point!(builder,0,H)\n\n    # heuristic refinement around cylinder\n    refine_radius = 0.25\n    maxrefinefactor = 1//20\n    function unsuitable(x1,y1,x2,y2,x3,y3,area)\n        if area>maxvol*min(max(4*maxrefinefactor,abs((x1+x2+x3)/3 - 0.2)),1/maxrefinefactor)\n            return true\n        end\n        dist = sqrt( ( (x1+x2+x3)/3 - 0.2 )^2 + ( (y1+y2+y3)/3 - 0.2)^2) - 0.05\n        myarea= dist < refine_radius ? maxvol*max(maxrefinefactor,1-(refine_radius - dist)/refine_radius) : maxvol\n        if area>myarea\n           return true\n        else\n            return false\n        end\n    end\n\n    facetregion!(builder,1); facet!(builder,p1,p2)\n    facetregion!(builder,2); facet!(builder,p2,p3)\n    facetregion!(builder,3); facet!(builder,p3,p4)\n    facetregion!(builder,4); facet!(builder,p4,p1)\n    facetregion!(builder,5); circlehole!(builder, (0.2,0.2),0.05,n=n)\n\n    simplexgrid(builder,maxvolume=16*maxvol, unsuitable = unsuitable)\nend\n\nend","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example231_TransientFlowAroundCylinder2D/","page":"231 : Transient Flow around a cylinder 2D","title":"231 : Transient Flow around a cylinder 2D","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/ExampleA05_DiffEQ/#A05-:-Comparison-with-DifferentialEquations.jl","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"","category":"section"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"(source code)","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"This example computes a transient velocity mathbfu solution of the nonlinear Poisson problem","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"beginaligned\nmathbfu_t - mathrmdiv((1+betamathbfu^2) nabla mathbfu)  = mathbff\nendaligned","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"with (some time-dependent) exterior force mathbff. The parameter beta steers the strength of the nonlinearity.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"The time integration will be performed by a solver from DifferentialEquations.jl or by the iternal backward Euler method of GradientRobustMultiPhysics.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"Note: To run this example the DifferentialEquations.jl package has to be installed.","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"module ExampleA05_DiffEQ\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing DifferentialEquations\n\n# problem data\nfunction exact_solution!(result,x, t)\n    result[1] = x[1]*x[2]*(1-t)\n    return nothing\nend\nfunction rhs!(beta)\n    function closure(result,x,t)\n        result[1] = -2*beta*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div(beta*u^2*grad(u))\n        result .*= (1-t)^3\n        result[1] += -x[1]*x[2] ## = u_t\n        return nothing\n    end\nend\n\n# everything is wrapped in a main function\n# the last four parametes steer the solver from DifferentialEquations.jl\n# for beta = 0, abstol and reltol can be choosen much larger\nfunction main(; verbosity = 0, nlevels = 3, timestep = 1e-1, T = 0.5, FEType = H1P1{1}, beta = 1,\n    use_diffeq::Bool = true,\n    solver = ImplicitEuler(autodiff = false),# Rosenbrock23(autodiff = false),\n    adaptive_timestep = true,\n    abstol = 1e-3,\n    reltol = 1e-3,\n    testmode = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),1);\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_solution!, [1,2]; name = \"u\", dependencies = \"XT\", bonus_quadorder = 5)\n    ∇u = ∇(u)\n    u_rhs = DataFunction(rhs!(beta), [1,1]; name = \"f\", dependencies = \"XT\", bonus_quadorder = 5)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    function diffusion_kernel!(result, input)\n        # input = [u, grad(u)]\n        result[1] = (1+beta*input[1]^2)*input[2]\n        result[2] = (1+beta*input[1]^2)*input[3]\n        return nothing\n    end\n    nonlin_diffusion = NonlinearForm(Gradient, [Identity, Gradient], [1,1], diffusion_kernel!, [2,3]; name = \"(1+ βu^2) ∇u ⋅ ∇v\", bonus_quadorder = 2, newton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(beta == 0 ? \"linear Poisson problem\" : \"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = beta == 0 ? \"linear Poisson problem\" : \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], beta == 0 ? LaplaceOperator() : nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1,  LinearForm(Identity, u_rhs))\n\n    # define error evaluators\n    L2Error = L2ErrorIntegrator(u, Identity; time = T)\n    H1Error = L2ErrorIntegrator(∇u, Gradient; time = T)\n    Results = zeros(Float64, nlevels, 2); NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n\n        # set initial solution\n        interpolate!(Solution[1], u)\n\n        # generate time-dependent solver\n        sys = TimeControlSolver(Problem, Solution, BackwardEuler; timedependent_equations = [1], skip_update = [beta == 0 ? -1 : 1], nonlinear_iterations = beta == 0 ? 1 : 5)\n\n        if use_diffeq == true\n            # use time integration by DifferentialEquations\n            advance_until_time!(DifferentialEquations, sys, timestep, T; solver = solver, abstol = abstol, reltol = reltol, adaptive = adaptive_timestep)\n        else\n            # use time control solver by GradientRobustMultiPhysics\n            advance_until_time!(sys, timestep, T)\n        end\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1Error,Solution[1]))\n    end\n\n    # print/plot convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n\nend\n\nfunction test()\n    return main(; use_diffeq = false, nlevels = 1, testmode = true)\nend\n\n\nend","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"","category":"page"},{"location":"examples/ExampleA05_DiffEQ/","page":"A05 : Comparison with DifferentialEquations.jl","title":"A05 : Comparison with DifferentialEquations.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example226_StokesTransient2D/#:-Stokes-Transient-2D","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"","category":"section"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"(source code)","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"beginaligned\nmathbfu_t - mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"with (possibly time-dependent) exterior force mathbff and some ν parameter mu.","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"In this example we solve an analytical toy problem with prescribed solution","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"beginaligned\nmathbfu(mathbfxt)  = (1+t)(cos(x_2) sin(x_1))^T\np(mathbfx) = sin(x_1+x_2) - 2sin(1) + sin(2)\nendaligned","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"with time-dependent right-hand side and inhomogeneous Dirichlet boundary data. The example showcases the benefits of pressure-robustness in time-dependent linear Stokes problem in presence of complicated pressures and small viscosities. The problem is solved on series of finer and finer unstructured simplex meshes and compares the error of the discrete Stokes solution, an interpolation into the same space and the best-approximations into the same space. While a pressure-robust variant shows optimally converging errors close to the best-approximations, a non pressure-robust discretisations show suboptimal (or no) convergence! Compare e.g. Bernardi–Raugel and Bernardi–Raugel pressure-robust by switching 'reconstruct'.","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"module Example226_StokesTransient2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# everything is wrapped in a main function\nfunction main(;\n    nlevels = 4,            # number of refinement levels\n    dt = 1e-3,              # time step\n    T = 1e-2,               # final time\n    ν = 1e-6,               # viscosity\n    reconstruct = true,     # use gradient-robust modification ?\n    graddiv = 0,            # factor for grad-div stabilisation\n    verbosity = 0           # higher number increases printed (debug) messages\n    )\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D);\n\n    # choose one of these (inf-sup stable) finite element type pairs\n    FETypes = [H1BR{2}, H1P0{1}]; # Bernardi--Raugel\n\n    #####################################################################################\n\n    # set testfunction operator for certain testfunctions\n    # (pressure-robustness chooses a reconstruction that can exploit the L2-orthogonality onto gradients)\n    test_operator = reconstruct ? ReconstructionIdentity{HDIVBDM1{2}} : Identity\n\n    # negotiate data functions to the package\n    # note that dependencies \"XT\" marks the function to be x- and t-dependent\n    # that causes the solver to automatically reassemble associated operators in each time step\n    u = DataFunction((result, x, t) -> (\n            result[1] = (1+t)*cos(x[2]);\n            result[2] = (1+t)*sin(x[1]);\n        ), [2,2]; name = \"u\", dependencies = \"XT\", bonus_quadorder = 5)\n    p = DataFunction((result, x) -> (\n            result[1] = sin(x[1]+x[2]) - 2*sin(1)+sin(2)\n        ), [1,2]; name = \"p\", dependencies = \"X\", bonus_quadorder = 5)\n    f = DataFunction((result, x, t) -> (\n            result[1] = ν*(1+t)*cos(x[2]) + cos(x[1]+x[2]) + cos(x[2]);\n            result[2] = ν*(1+t)*sin(x[1]) + cos(x[1]+x[2]) + sin(x[1]);\n        ), [2,2]; name = \"f\", dependencies = \"XT\", bonus_quadorder = 5)\n    ∇u = ∇(u)\n\n    # load Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = ν, nonlinear = false)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1, LinearForm(test_operator, f))\n\n    # add grad-div stabilisation\n    if graddiv > 0\n        add_operator!(Problem, [1,1], BilinearForm(\"graddiv-stabilisation (div x div)\", Divergence, Divergence; factor = graddiv))\n    end\n\n    # define bestapproximation problems\n    BAP_L2_p = L2BestapproximationProblem(p; bestapprox_boundary_regions = [])\n    BAP_L2_u = L2BestapproximationProblem(u; bestapprox_boundary_regions = [1,2,3,4])\n    BAP_H1_u = H1BestapproximationProblem(∇u, u; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation and arrays to store them\n    L2VelocityError = L2ErrorIntegrator(u, Identity; time = T)\n    L2PressureError = L2ErrorIntegrator(p, Identity)\n    H1VelocityError = L2ErrorIntegrator(∇u, Gradient; time = T)\n    Results = zeros(Float64, nlevels, 6)\n    NDofs = zeros(Int, nlevels)\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpaces\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid)]\n\n        # generate solution fector\n        Solution = FEVector([\"u_h\", \"p_h\"],FES)\n\n        # set initial solution ( = bestapproximation at time 0)\n        BA_L2_u = FEVector(\"L2-Bestapproximation velocity\",FES[1])\n        solve!(BA_L2_u, BAP_L2_u; time = 0)\n        Solution[1][:] = BA_L2_u[1][:]\n\n        # generate time-dependent solver and chance rhs data\n        TCS = TimeControlSolver(Problem, Solution, CrankNicolson; timedependent_equations = [1], skip_update = [-1], dt_operator = [test_operator])\n        advance_until_time!(TCS, dt, T)\n\n        # solve bestapproximation problems at final time for comparison\n        BA_L2_p = FEVector(\"L2-Bestapproximation pressure\",FES[2])\n        BA_H1_u = FEVector(\"H1-Bestapproximation velocity\",FES[1])\n        solve!(BA_L2_u, BAP_L2_u; time = T)\n        solve!(BA_L2_p, BAP_L2_p)\n        solve!(BA_H1_u, BAP_H1_u; time = T)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityError,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2VelocityError,BA_L2_u[1]))\n        Results[level,3] = sqrt(evaluate(L2PressureError,Solution[2]))\n        Results[level,4] = sqrt(evaluate(L2PressureError,BA_L2_p[1]))\n        Results[level,5] = sqrt(evaluate(H1VelocityError,Solution[1]))\n        Results[level,6] = sqrt(evaluate(H1VelocityError,BA_H1_u[1]))\n    end\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results[:,1:2]; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_h||\", \"||u-Πu||\"])\n    print_convergencehistory(NDofs, Results[:,3:4]; X_to_h = X -> X.^(-1/2), ylabels = [\"||p-p_h||\", \"||p-πp||\"])\n    print_convergencehistory(NDofs, Results[:,5:6]; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_h)||\", \"||∇(u-Su)||\"])\nend\n\nend","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"Default output:","category":"page"},{"location":"examples/Example226_StokesTransient2D/","page":"226 : Stokes Transient 2D","title":"226 : Stokes Transient 2D","text":"julia> Example226_StokesTransient2D.main()\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)          u           p     \n\t     1  | 1.0000e-03 | 1.4959e-13 | 2.850e+00 | 4.9651e-03  3.0773e+00 \n\t     2  | 2.0000e-03 | 1.6788e-13 | 1.723e-02 | 3.6022e-03  2.3073e+00 \n\t     3  | 3.0000e-03 | 1.6191e-13 | 8.695e-04 | 3.6022e-03  1.1206e-10 \n\t     4  | 4.0000e-03 | 1.8440e-13 | 7.620e-04 | 3.6022e-03  1.1177e-10 \n\t     5  | 5.0000e-03 | 1.3318e-13 | 7.329e-04 | 3.6022e-03  1.1203e-10 \n\t     6  | 6.0000e-03 | 1.2152e-13 | 7.181e-04 | 3.6022e-03  1.1173e-10 \n\t     7  | 7.0000e-03 | 1.6350e-13 | 7.531e-04 | 3.6022e-03  1.1215e-10 \n\t     8  | 8.0000e-03 | 1.2880e-13 | 7.264e-04 | 3.6022e-03  1.1180e-10 \n\t     9  | 9.0000e-03 | 1.3468e-13 | 7.103e-04 | 3.6022e-03  1.1220e-10 \n\t    10  | 1.0000e-02 | 1.4541e-13 | 7.023e-04 | 3.6022e-03  1.1171e-10 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)          u           p     \n\t     1  | 1.0000e-03 | 8.3580e-14 | 4.877e-03 | 5.6703e-03  2.8195e+00 \n\t     2  | 2.0000e-03 | 9.3733e-14 | 1.612e-03 | 6.4012e-03  1.1598e+00 \n\t     3  | 3.0000e-03 | 8.6380e-14 | 1.468e-03 | 6.4012e-03  1.4675e-10 \n\t     4  | 4.0000e-03 | 8.6871e-14 | 1.428e-03 | 6.4012e-03  1.4500e-10 \n\t     5  | 5.0000e-03 | 7.9804e-14 | 1.400e-03 | 6.4012e-03  1.4610e-10 \n\t     6  | 6.0000e-03 | 8.3389e-14 | 1.380e-03 | 6.4012e-03  1.4595e-10 \n\t     7  | 7.0000e-03 | 8.4232e-14 | 1.427e-03 | 6.4012e-03  1.4578e-10 \n\t     8  | 8.0000e-03 | 8.5133e-14 | 1.391e-03 | 6.4012e-03  1.4600e-10 \n\t     9  | 9.0000e-03 | 7.0033e-14 | 1.373e-03 | 6.4012e-03  1.4630e-10 \n\t    10  | 1.0000e-02 | 7.5425e-14 | 1.394e-03 | 6.4012e-03  1.4526e-10 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)          u           p     \n\t     1  | 1.0000e-03 | 4.4635e-14 | 1.604e-02 | 1.1430e-02  4.0417e+00 \n\t     2  | 2.0000e-03 | 4.3797e-14 | 4.028e-03 | 1.2040e-02  5.7953e-01 \n\t     3  | 3.0000e-03 | 4.1537e-14 | 3.902e-03 | 1.2040e-02  9.5464e-11 \n\t     4  | 4.0000e-03 | 4.5030e-14 | 3.848e-03 | 1.2040e-02  9.4401e-11 \n\t     5  | 5.0000e-03 | 4.7935e-14 | 3.837e-03 | 1.2040e-02  9.5615e-11 \n\t     6  | 6.0000e-03 | 4.1990e-14 | 3.826e-03 | 1.2040e-02  9.4612e-11 \n\t     7  | 7.0000e-03 | 4.1244e-14 | 3.792e-03 | 1.2040e-02  9.5592e-11 \n\t     8  | 8.0000e-03 | 4.5445e-14 | 3.815e-03 | 1.2040e-02  9.4657e-11 \n\t     9  | 9.0000e-03 | 4.5534e-14 | 3.809e-03 | 1.2040e-02  9.5726e-11 \n\t    10  | 1.0000e-02 | 4.0681e-14 | 3.826e-03 | 1.2040e-02  9.4794e-11 \n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE               \n\t        |            |  (total)   |    (s)          u           p     \n\t     1  | 1.0000e-03 | 2.2354e-14 | 6.443e-02 | 2.2994e-02  7.3187e+00 \n\t     2  | 2.0000e-03 | 2.2259e-14 | 1.343e-02 | 2.3341e-02  2.8899e-01 \n\t     3  | 3.0000e-03 | 2.2857e-14 | 1.342e-02 | 2.3341e-02  6.5750e-09 \n\t     4  | 4.0000e-03 | 2.2012e-14 | 1.398e-02 | 2.3341e-02  6.5539e-09 \n\t     5  | 5.0000e-03 | 2.1535e-14 | 1.335e-02 | 2.3341e-02  6.5257e-09 \n\t     6  | 6.0000e-03 | 2.3347e-14 | 1.324e-02 | 2.3341e-02  6.5039e-09 \n\t     7  | 7.0000e-03 | 2.1237e-14 | 1.342e-02 | 2.3341e-02  6.4744e-09 \n\t     8  | 8.0000e-03 | 2.2084e-14 | 1.329e-02 | 2.3341e-02  6.4547e-09 \n\t     9  | 9.0000e-03 | 2.2749e-14 | 1.323e-02 | 2.3341e-02  6.4238e-09 \n\t    10  | 1.0000e-02 | 2.2123e-14 | 1.319e-02 | 2.3341e-02  6.4075e-09 \n\n    ndofs   |     ||u-u_h||      order |     ||u-Πu||       order |\n============|==========================|==========================|\n        70  |     2.835e-03      0.00  |     2.165e-03      0.00  |\n       250  |     6.945e-04      2.21  |     5.111e-04      2.27  |\n       946  |     1.704e-04      2.11  |     1.213e-04      2.16  |\n      3682  |     4.223e-05      2.05  |     2.928e-05      2.09  |\n\n    ndofs   |     ||p-p_h||      order |     ||p-πp||       order |\n============|==========================|==========================|\n        70  |     6.985e-02      0.00  |     6.985e-02      0.00  |\n       250  |     3.497e-02      1.09  |     3.497e-02      1.09  |\n       946  |     1.749e-02      1.04  |     1.749e-02      1.04  |\n      3682  |     8.748e-03      1.02  |     8.748e-03      1.02  |\n\n    ndofs   |   ||∇(u-u_h)||     order |    ||∇(u-Su)||     order |\n============|==========================|==========================|\n        70  |     5.128e-02      0.00  |     4.815e-02      0.00  |\n       250  |     2.592e-02      1.07  |     2.389e-02      1.10  |\n       946  |     1.309e-02      1.03  |     1.187e-02      1.05  |\n      3682  |     6.529e-03      1.02  |     5.909e-03      1.03  |","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build status) (Image: ) (Image: ) (Image: DOI)","category":"page"},{"location":"#GradientRobustMultiPhysics.jl","page":"Home","title":"GradientRobustMultiPhysics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package offers (mostly low-order) finite element methods for multiphysics problems in Julia that focus on the preservation of structural and qualitative properties, in particular the gradient-robustness property for the discretisation of (nearly) incompressible flows and resulting qualitative properties in coupled processes. The code therefore offers several classical and novel non-standard finite element discretisations to play and compare with in these applications and a toolkit to setup multi-physics problems by defining PDE systems and generating fixed-point iterations to solve them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The implementation is based on ExtendableGrids.jl that allows to have unstructured grids with mixed element geometries in it, e.g. triangles and quads in the same mesh.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also note, that this package is part of the meta-package PDELIB.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe focus is (at least currently) not on high-performance, high-order or parallel-computing. Also, this package is still in an early development stage and features and interfaces might change in future updates.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"via Julia package manager in Julia 1.6 or above:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# latest stable version\n(@v1.6) pkg> add GradientRobustMultiPhysics\n# latest version\n(@v1.6) pkg> add GradientRobustMultiPhysics#master","category":"page"},{"location":"#Dependencies-on-other-Julia-packages","page":"Home","title":"Dependencies on other Julia packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExtendableGrids.jl\nGridVisualize.jl\nExtendableSparse.jl\nDocStringExtensions.jl\nForwardDiff.jl\nDiffResults.jl\nWriteVTK.jl\n","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The general work-flow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mesh the domain of computation, possibly using one of the constructors by ExtendableGrid.jl or via mesh generators in SimplexGridFactory.jl.\nDescribe your PDE system with the help of the PDE Description and PDE Operators. User parameters and customised operator actions are framed with the help of User Data and Actions.\nDiscretise, i.e. choose suitable finite element ansatz spaces for the unknowns of your PDE system.\nSolve (stationary, time-dependent, iteratively?)\nPostprocess (compute stuff, plot, export data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please have a look at the Examples.","category":"page"},{"location":"#What-is-gradient-robustness?","page":"Home","title":"What is gradient-robustness?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gradient-robustness is a feature of discretisations that exactly balance gradient forces in the momentum balance. In the case of the incompressible Navier–Stokes equations this means that the discrete velocity does not depend on the exact pressure. Divergence-free finite element methods have this property but are usually expensive and difficult to contruct. However, also non-divergence-free classical finite element methods can be made pressure-robust with the help of reconstruction operators applied to testfuntions in certain terms of the momentum balance, see e.g. references [1,2] below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Recently gradient-robustness was also connected to the design of well-balanced schemes e.g. in the context of (nearly) compressible flows, see e.g. reference [3] below.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]   \"On the divergence constraint in mixed finite element methods for incompressible flows\",\n      V. John, A. Linke, C. Merdon, M. Neilan and L. Rebholz,\n      SIAM Review 59(3) (2017), 492–544,\n      >Journal-Link<,       >Preprint-Link<\n[2]   \"Pressure-robustness and discrete Helmholtz projectors in mixed finite element methods for the incompressible Navier–Stokes equations\",\n      A. Linke and C. Merdon,       Computer Methods in Applied Mechanics and Engineering 311 (2016), 304–326,\n      >Journal-Link<       >Preprint-Link<\n[3]   \"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\n      M. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\n      Computer Methods in Applied Mechanics and Engineering 367 (2020),\n      >Journal-Link<       >Preprint-Link<","category":"page"},{"location":"package_index/","page":"Index","title":"Index","text":"Modules = [GradientRobustMultiPhysics]\nOrder   = [:function, :type]","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/#:-Stokes-Hdiv-DG-2D","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"","category":"section"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"(source code)","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"beginaligned\n- mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"with exterior force mathbff and some μ parameter mu and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"The problem will be solved by a dicontinuous Galerkin method with Hdiv-conforming ansatz space (e.g. BDM1). The normal components of the velocity are fixed by the boundary data, while the tangential boundary fluxes are handled by the DG discretisation of the Laplacian that involves several discontinuous terms on faces mathcalF, i.e.","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"beginaligned\na_h(u_hv_h) = mu Bigl( int nabla_h u_h  nabla_h v_h dx +  sum_F in mathcalF fraclambdah_F int_F u_h cdot v_h ds - int_F nabla_h u_h n_F cdot v_h ds\n - int_F u_h cdot nabla_h v_h n_F ds Bigr)\nendaligned","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"and similar terms on the right-hand side for the inhomogeneous Dirichlet data. The qunatity λ is the SIP parameter.","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"module Example223_StokesHdivDG2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# flow data for boundary condition, right-hand side and error calculation\nfunction get_flowdata(μ)\n    p! = (result,x,t) -> (result[1] = cos(t)*(sin(x[1])*cos(x[2]) + (cos(1) -1)*sin(1)))\n    u! = (result,x,t) -> (\n        result[1] = cos(t)*(sin(π*x[1]-0.7)*sin(π*x[2]+0.2));\n        result[2] = cos(t)*(cos(π*x[1]-0.7)*cos(π*x[2]+0.2)))\n    f! = (result,x,t) -> (## f= -μΔu + ∇p\n        result[1] = 2*π*π*μ*cos(t)*(sin(π*x[1]-0.7)*sin(π*x[2]+0.2)) + cos(t)*cos(x[1])*cos(x[2]);\n        result[2] = 2*π*π*μ*cos(t)*(cos(π*x[1]-0.7)*cos(π*x[2]+0.2)) - cos(t)*sin(x[1])*sin(x[2]);)\n    u = DataFunction(u!, [2,2]; dependencies = \"XT\", name = \"u\", bonus_quadorder = 5)\n    p = DataFunction(p!, [1,2]; dependencies = \"XT\", name = \"p\", bonus_quadorder = 4)\n    f = DataFunction(f!, [2,2]; dependencies = \"XT\", name = \"f\", bonus_quadorder = 5)\n    return u, p, ∇(u), f\nend\n\n# everything is wrapped in a main function\nfunction main(; μ = 1e-3, nlevels = 5, Plotter = nothing, verbosity = 0, T = 1, λ = 4)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # FEType (Hdiv-conforming)\n    FETypes = [HDIVBDM1{2}, H1P0{1}]\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D)\n    xBFaceFaces::Array{Int,1} = xgrid[BFaceFaces]\n    xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n    xFaceNormals::Array{Float64,2} = xgrid[FaceNormals]\n\n    # load exact flow data\n    u,p,∇u,f = get_flowdata(μ)\n\n    # prepare error calculation\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(u, Identity; time = T)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(p, Identity; time = T)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(∇u, Gradient; time = T)\n\n    # load Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = false)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n\n    # add boundary data (fixes normal components of along boundary)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n\n    # define additional operators for DG terms for Laplacian and Dirichlet data\n    # (in order of their appearance in the documentation above)\n    hdiv_laplace2_kernel = (result, input, item) -> (result .= input / xFaceVolumes[item[1]])\n    function hdiv_laplace3_kernel(result, input, item)\n        for j = 1 : 2, k = 1 : 2\n            result[(j-1)*2+k] = input[j] * xFaceNormals[k,item[1]]\n        end\n        return nothing\n    end\n    function hdiv_laplace4_kernel(result, input, item)\n        result[1] = input[1] * xFaceNormals[1,item[1]] + input[2] * xFaceNormals[2,item[1]]\n        result[2] = input[3] * xFaceNormals[1,item[1]] + input[4] * xFaceNormals[2,item[1]]\n        return nothing\n    end\n    HdivLaplace2 = BilinearForm([Jump(Identity), Jump(Identity)], Action( hdiv_laplace2_kernel, [2,2]; dependencies = \"I\"); name = \"μ/h_F [u] [v]\", factor = λ*μ, AT = ON_FACES)\n    HdivLaplace3 = BilinearForm([Jump(Identity), Average(Gradient)], Action( hdiv_laplace3_kernel, [4,2]; dependencies = \"I\"); name = \"-μ [u] {grad(v)*n}\", factor = -μ, AT = ON_FACES)\n    HdivLaplace4 = BilinearForm([Average(Gradient), Jump(Identity)], Action( hdiv_laplace4_kernel, [2,4]; dependencies = \"I\"); name = \"-μ {grad(u)*n} [v] \", factor = -μ, AT = ON_FACES)\n\n    # additional terms for tangential part at boundary\n    # note: we use average operators here to force evaluation of all basis functions and not only of the face basis functions\n    # (which in case of Hdiv would be only the ones with nonzero normal fluxes)\n    function hdiv_boundary_kernel(result, input, x, t, item)\n        eval_data!(u, x, t)\n        result .= u.val / xFaceVolumes[xBFaceFaces[item[1]]]\n        return nothing\n    end\n    function hdiv_boundary_kernel2(result, input, x, t, item)\n        eval_data!(u, x, t)\n        result[3] = xFaceNormals[1,xBFaceFaces[item[1]]] * u.val[2]\n        result[4] = xFaceNormals[2,xBFaceFaces[item[1]]] * u.val[2]\n        result[2] = xFaceNormals[2,xBFaceFaces[item[1]]] * u.val[1]\n        result[1] = xFaceNormals[1,xBFaceFaces[item[1]]] * u.val[1]\n        return nothing\n    end\n    HdivBoundary1 = LinearForm(Average(Identity), Action( hdiv_boundary_kernel, [2,0]; dependencies = \"XTI\", bonus_quadorder = u.bonus_quadorder); name = \"- μ λ/h_F u_D v\", factor = λ*μ, AT = ON_BFACES)\n    HdivBoundary2 = LinearForm(Average(Gradient), Action( hdiv_boundary_kernel2, [4,0]; dependencies = \"XTI\", bonus_quadorder = u.bonus_quadorder); name = \"- μ u_D grad(v)*n\", factor = -μ, AT = ON_BFACES)\n\n    # assign DG operators to problem descriptions\n    add_operator!(Problem, [1,1], HdivLaplace2)\n    add_operator!(Problem, [1,1], HdivLaplace3)\n    add_operator!(Problem, [1,1], HdivLaplace4)\n    add_rhsdata!(Problem, 1, HdivBoundary1)\n    add_rhsdata!(Problem, 1, HdivBoundary2)\n\n    # show final problem description\n    @show Problem\n\n    # loop over levels\n    Results = zeros(Float64,nlevels,3); NDofs = zeros(Int,nlevels)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # refine grid and update grid component references\n        xgrid = uniform_refine(xgrid)\n        xBFaceFaces = xgrid[BFaceFaces]\n        xFaceVolumes = xgrid[FaceVolumes]\n        xFaceNormals = xgrid[FaceNormals]\n\n        # generate FES spaces and solution vector\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid)]\n        Solution = FEVector([\"u_h\", \"p_h\"],FES)\n\n        # solve\n        solve!(Solution, Problem; time = T)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2PressureErrorEvaluator,Solution[2]))\n        Results[level,3] = sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1]))\n    end\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,3), clear = true, resolution = (1500,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]; abs = true),1,:), levels = 3, colorbarticks = 9, title = \"u_h (abs + quiver)\")\n    vectorplot!(p[1,1], xgrid, evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.05, clear = false)\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[2]),1,:), levels = 7, title = \"p_h\")\n    convergencehistory!(p[1,3], NDofs, Results; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_h) ||\"])\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_h) ||\"])\nend\nend","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"Default output:","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"julia> Example223_StokesHdivDG2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = incompressible Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | μ/h_F [u] [v] (APT = BilinearForm, AT = ON_FACES, regions = [0])\n            | -μ [u] {grad(v)*n} (APT = BilinearForm, AT = ON_FACES, regions = [0])\n            | -μ {grad(u)*n} [v]  (APT = BilinearForm, AT = ON_FACES, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n            | - μ λ/h_F u_D v (APT = LinearForm, AT = ON_BFACES, regions = [0])\n            | - μ u_D grad(v)*n (APT = LinearForm, AT = ON_BFACES, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\n\n    ndofs   |   || u - u_h ||    order |   || p - p_h ||    order | || ∇(u - u_h) ||   order |\n============|==========================|==========================|==========================|\n        72  |     1.029e-01      0.00  |     3.490e-02      0.00  |     1.495e+00      0.00  |\n       272  |     1.118e-02      3.34  |     1.747e-02      1.04  |     3.910e-01      2.02  |\n      1056  |     2.737e-03      2.08  |     8.742e-03      1.02  |     1.936e-01      1.04  |\n      4160  |     6.809e-04      2.03  |     4.372e-03      1.01  |     9.612e-02      1.02  |\n     16512  |     1.712e-04      2.00  |     2.186e-03      1.01  |     4.803e-02      1.01  |","category":"page"},{"location":"examples/Example223_StokesHdivDG2D/","page":"223 : Stokes Hdiv-DG 2D","title":"223 : Stokes Hdiv-DG 2D","text":"(Image: )","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/#:-Level-Set-Method-2D","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"","category":"section"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"(source code)","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"This example studies the level-set method of some level function mathbfphi convected in time via the equation","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"beginaligned\nphi_t + mathbfu cdot nabla phi  = 0\nendaligned","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"Here this is tested with the (conservative) initial level set function phi(x) = 05 tanh((lvert x - (025025) rvert - 01)(2ϵ) + 1) such that the level phi equiv 05 forms a circle which is then convected by the velocity mathbfu = (051)^T. No reinitialisation step is performed.","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"In each couple of timestep the plot is updated (where an upscaled P1 interpolation of the higher order solution is used).","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"module Example250_LevelSetMethod2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\nconst convection = DataFunction([0.5,1])\nconst ϵ = 0.05\nconst ϕ_0 = DataFunction((result,x) -> (result[1] = 1/2 * (tanh((sqrt((x[1]-0.25)^2 + (x[2]-0.25)^2) - 0.1)/(2*ϵ))+1)), [1, 2]; dependencies = \"X\", bonus_quadorder = 3)\nconst ϕ_bnd = DataFunction([1])\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, timestep = 1//500, T = 3//10, FEType = H1P3{1,2}, nref = 3, time_integration_rule = CrankNicolson)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nref)\n\n    # define main level set problem\n    Problem = PDEDescription(\"level set problem\")\n    add_unknown!(Problem; unknown_name = \"ϕ\", equation_name = \"convection equation\")\n    add_operator!(Problem, [1,1], ConvectionOperator(convection,1))\n    add_boundarydata!(Problem, 1, [1,2,3,4], InterpolateDirichletBoundary; data = ϕ_bnd)\n\n    # generate FESpace and solution vector and interpolate initial state\n    Solution = FEVector(\"u_h\",FESpace{FEType}(xgrid))\n    interpolate!(Solution[1], ϕ_0)\n\n    # generate time-dependent solver\n    TProblem = TimeControlSolver(Problem, Solution, time_integration_rule; timedependent_equations = [1], skip_update = [-1], T_time = typeof(timestep))\n\n    # init plot ans upscaling\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,3), clear = true, resolution = (1200,400))\n    xgrid_upscale = uniform_refine(xgrid,5-nref)\n    SolutionUpscaled = FEVector{Float16}(\"u_h (upscaled)\",FESpace{H1P1{1}}(xgrid_upscale))\n    nodevals = nodevalues_view(SolutionUpscaled[1])\n    gridplot!(p[1,1], xgrid, linewidth = 1, title = \"compute grid\")\n\n    # setup timestep-wise plot as a do_after_timestep callback function\n    plot_every::Int = ceil(1//100 / timestep)\n    function do_after_each_timestep(step, statistics)\n        if step % plot_every == 0\n            interpolate!(SolutionUpscaled[1],Solution[1])\n            scalarplot!((step == 0) ? p[1,2] : p[1,3], xgrid_upscale, nodevals[1], levels = [0.5], flimits = [-0.05,1.05], colorbarticks = [0, 0.25, 0.5, 0.75, 1], title = \"ϕ (t = $(Float64(TProblem.ctime)))\")\n        end\n    end\n\n    # plot initial state\n    do_after_each_timestep(0,nothing)\n\n    # use time control solver by GradientRobustMultiPhysics\n    advance_until_time!(TProblem, timestep, T; do_after_each_timestep = do_after_each_timestep)\nend\n\nend","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"Default output:","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"julia> Example250_LevelSetMethod2D.main()\n\n\t  STEP  |    TIME    | LSRESIDUAL |  RUNTIME  |   CHANGE        \n\t        |            |  (total)   |    (s)          ϕ     \n\t     1  | 2.0000e-03 | 8.3910e-15 | 1.611e+00 | 7.2315e-02 \n\t     2  | 4.0000e-03 | 8.6871e-15 | 1.735e-02 | 7.2223e-02 \n\t     3  | 6.0000e-03 | 8.1675e-15 | 8.191e-04 | 7.2140e-02 \n\t     4  | 8.0000e-03 | 8.5866e-15 | 7.973e-04 | 7.2067e-02 \n\t     5  | 1.0000e-02 | 8.1308e-15 | 7.556e-04 | 7.2003e-02 \n\t     6  | 1.2000e-02 | 8.2202e-15 | 7.978e-04 | 7.1944e-02 \n\t     7  | 1.4000e-02 | 7.9597e-15 | 5.773e-04 | 7.1888e-02 \n\t     8  | 1.6000e-02 | 8.2570e-15 | 8.036e-04 | 7.1832e-02 \n\t     9  | 1.8000e-02 | 8.3829e-15 | 7.473e-04 | 7.1775e-02 \n\t    10  | 2.0000e-02 | 8.4928e-15 | 7.448e-04 | 7.1715e-02 \n\t    11  | 2.2000e-02 | 8.5509e-15 | 7.776e-04 | 7.1652e-02 \n\t    12  | 2.4000e-02 | 7.9542e-15 | 7.533e-04 | 7.1589e-02 \n\t    13  | 2.6000e-02 | 8.5658e-15 | 7.460e-04 | 7.1528e-02 \n\t    14  | 2.8000e-02 | 8.5486e-15 | 7.879e-04 | 7.1473e-02 \n\t    15  | 3.0000e-02 | 8.2560e-15 | 7.604e-04 | 7.1429e-02 \n\t    16  | 3.2000e-02 | 8.1932e-15 | 7.895e-04 | 7.1398e-02 \n\t    17  | 3.4000e-02 | 8.3647e-15 | 7.960e-04 | 7.1384e-02 \n\t    18  | 3.6000e-02 | 7.6355e-15 | 7.848e-04 | 7.1388e-02 \n\t    19  | 3.8000e-02 | 8.8482e-15 | 7.455e-04 | 7.1409e-02 \n\t    20  | 4.0000e-02 | 8.2945e-15 | 7.444e-04 | 7.1446e-02 \n\t    21  | 4.2000e-02 | 8.9101e-15 | 7.834e-04 | 7.1494e-02 \n\t    22  | 4.4000e-02 | 7.5822e-15 | 7.514e-04 | 7.1547e-02 \n\t    23  | 4.6000e-02 | 8.1441e-15 | 5.648e-04 | 7.1600e-02 \n\t    24  | 4.8000e-02 | 8.3752e-15 | 7.840e-04 | 7.1646e-02 \n\t    25  | 5.0000e-02 | 8.3909e-15 | 7.800e-04 | 7.1679e-02 \n\t    26  | 5.2000e-02 | 8.1025e-15 | 7.749e-04 | 7.1695e-02 \n\t    27  | 5.4000e-02 | 8.3353e-15 | 7.522e-04 | 7.1691e-02 \n\t    28  | 5.6000e-02 | 8.2358e-15 | 8.155e-04 | 7.1667e-02 \n\t    29  | 5.8000e-02 | 7.9590e-15 | 7.787e-04 | 7.1624e-02 \n\t    30  | 6.0000e-02 | 8.1403e-15 | 7.600e-04 | 7.1566e-02 \n\t    31  | 6.2000e-02 | 8.1574e-15 | 7.758e-04 | 7.1498e-02 \n\t    32  | 6.4000e-02 | 7.7876e-15 | 7.533e-04 | 7.1425e-02 \n\t    33  | 6.6000e-02 | 7.9260e-15 | 7.610e-04 | 7.1353e-02 \n\t    34  | 6.8000e-02 | 8.2378e-15 | 7.529e-04 | 7.1287e-02 \n\t    35  | 7.0000e-02 | 8.1795e-15 | 7.428e-04 | 7.1231e-02 \n\t    36  | 7.2000e-02 | 8.2528e-15 | 7.856e-04 | 7.1187e-02 \n\t    37  | 7.4000e-02 | 8.3512e-15 | 7.549e-04 | 7.1157e-02 \n\t    38  | 7.6000e-02 | 8.7078e-15 | 7.432e-04 | 7.1141e-02 \n\t    39  | 7.8000e-02 | 8.7886e-15 | 7.501e-04 | 7.1137e-02 \n\t    40  | 8.0000e-02 | 7.7057e-15 | 7.475e-04 | 7.1144e-02 \n\t    41  | 8.2000e-02 | 8.4360e-15 | 8.134e-04 | 7.1159e-02 \n\t    42  | 8.4000e-02 | 7.9551e-15 | 7.816e-04 | 7.1182e-02 \n\t    43  | 8.6000e-02 | 8.3113e-15 | 7.631e-04 | 7.1211e-02 \n\t    44  | 8.8000e-02 | 8.3172e-15 | 7.527e-04 | 7.1246e-02 \n\t    45  | 9.0000e-02 | 8.0507e-15 | 7.493e-04 | 7.1288e-02 \n\t    46  | 9.2000e-02 | 7.9577e-15 | 8.034e-04 | 7.1339e-02 \n\t    47  | 9.4000e-02 | 8.5648e-15 | 5.818e-04 | 7.1398e-02 \n\t    48  | 9.6000e-02 | 8.1836e-15 | 7.626e-04 | 7.1468e-02 \n\t    49  | 9.8000e-02 | 8.4920e-15 | 7.610e-04 | 7.1547e-02 \n\t    50  | 1.0000e-01 | 7.8031e-15 | 7.660e-04 | 7.1634e-02 \n\t    51  | 1.0200e-01 | 8.3726e-15 | 7.720e-04 | 7.1727e-02 \n\t    52  | 1.0400e-01 | 8.2226e-15 | 7.555e-04 | 7.1821e-02 \n\t    53  | 1.0600e-01 | 7.9881e-15 | 7.917e-04 | 7.1911e-02 \n\t    54  | 1.0800e-01 | 9.0585e-15 | 7.997e-04 | 7.1991e-02 \n\t    55  | 1.1000e-01 | 8.3208e-15 | 7.550e-04 | 7.2055e-02 \n\t    56  | 1.1200e-01 | 7.8795e-15 | 7.766e-04 | 7.2098e-02 \n\t    57  | 1.1400e-01 | 8.1735e-15 | 7.604e-04 | 7.2116e-02 \n\t    58  | 1.1600e-01 | 8.0457e-15 | 7.506e-04 | 7.2107e-02 \n\t    59  | 1.1800e-01 | 7.6392e-15 | 7.499e-04 | 7.2071e-02 \n\t    60  | 1.2000e-01 | 8.4770e-15 | 7.471e-04 | 7.2010e-02 \n\t    61  | 1.2200e-01 | 8.1837e-15 | 7.913e-04 | 7.1928e-02 \n\t    62  | 1.2400e-01 | 8.1848e-15 | 7.581e-04 | 7.1831e-02 \n\t    63  | 1.2600e-01 | 8.3492e-15 | 7.487e-04 | 7.1724e-02 \n\t    64  | 1.2800e-01 | 8.4084e-15 | 7.480e-04 | 7.1614e-02 \n\t    65  | 1.3000e-01 | 8.2894e-15 | 7.664e-04 | 7.1507e-02 \n\t    66  | 1.3200e-01 | 8.8949e-15 | 7.797e-04 | 7.1407e-02 \n\t    67  | 1.3400e-01 | 8.5041e-15 | 7.531e-04 | 7.1317e-02 \n\t    68  | 1.3600e-01 | 8.2539e-15 | 7.727e-04 | 7.1238e-02 \n\t    69  | 1.3800e-01 | 8.7091e-15 | 7.544e-04 | 7.1172e-02 \n\t    70  | 1.4000e-01 | 8.3919e-15 | 7.482e-04 | 7.1116e-02 \n\t    71  | 1.4200e-01 | 8.2727e-15 | 7.929e-04 | 7.1069e-02 \n\t    72  | 1.4400e-01 | 8.0911e-15 | 7.545e-04 | 7.1029e-02 \n\t    73  | 1.4600e-01 | 7.9631e-15 | 7.482e-04 | 7.0995e-02 \n\t    74  | 1.4800e-01 | 7.9471e-15 | 7.497e-04 | 7.0966e-02 \n\t    75  | 1.5000e-01 | 8.2086e-15 | 7.878e-04 | 7.0941e-02 \n\t    76  | 1.5200e-01 | 8.2599e-15 | 8.165e-04 | 7.0924e-02 \n\t    77  | 1.5400e-01 | 8.0285e-15 | 8.351e-04 | 7.0915e-02 \n\t    78  | 1.5600e-01 | 8.5771e-15 | 8.515e-04 | 7.0916e-02 \n\t    79  | 1.5800e-01 | 8.6296e-15 | 8.344e-04 | 7.0931e-02 \n\t    80  | 1.6000e-01 | 7.5516e-15 | 8.761e-04 | 7.0960e-02 \n\t    81  | 1.6200e-01 | 7.7123e-15 | 7.959e-04 | 7.1003e-02 \n\t    82  | 1.6400e-01 | 8.1099e-15 | 7.712e-04 | 7.1060e-02 \n\t    83  | 1.6600e-01 | 8.3032e-15 | 7.547e-04 | 7.1128e-02 \n\t    84  | 1.6800e-01 | 7.9693e-15 | 7.972e-04 | 7.1203e-02 \n\t    85  | 1.7000e-01 | 8.1109e-15 | 7.924e-04 | 7.1280e-02 \n\t    86  | 1.7200e-01 | 8.2872e-15 | 8.171e-04 | 7.1354e-02 \n\t    87  | 1.7400e-01 | 8.4196e-15 | 7.572e-04 | 7.1421e-02 \n\t    88  | 1.7600e-01 | 8.8243e-15 | 7.505e-04 | 7.1476e-02 \n\t    89  | 1.7800e-01 | 8.3302e-15 | 8.017e-04 | 7.1517e-02 \n\t    90  | 1.8000e-01 | 8.4437e-15 | 7.854e-04 | 7.1543e-02 \n\t    91  | 1.8200e-01 | 8.9162e-15 | 7.828e-04 | 7.1555e-02 \n\t    92  | 1.8400e-01 | 8.3897e-15 | 8.090e-04 | 7.1554e-02 \n\t    93  | 1.8600e-01 | 8.2923e-15 | 7.737e-04 | 7.1544e-02 \n\t    94  | 1.8800e-01 | 7.9970e-15 | 7.493e-04 | 7.1528e-02 \n\t    95  | 1.9000e-01 | 8.1256e-15 | 7.441e-04 | 7.1510e-02 \n\t    96  | 1.9200e-01 | 8.3821e-15 | 7.896e-04 | 7.1494e-02 \n\t    97  | 1.9400e-01 | 8.1973e-15 | 7.532e-04 | 7.1482e-02 \n\t    98  | 1.9600e-01 | 8.4787e-15 | 7.427e-04 | 7.1475e-02 \n\t    99  | 1.9800e-01 | 8.7304e-15 | 7.846e-04 | 7.1473e-02 \n\t   100  | 2.0000e-01 | 8.8351e-15 | 7.531e-04 | 7.1475e-02 \n\t   101  | 2.0200e-01 | 7.8928e-15 | 9.492e-04 | 7.1479e-02 \n\t   102  | 2.0400e-01 | 8.1801e-15 | 7.939e-04 | 7.1483e-02 \n\t   103  | 2.0600e-01 | 8.1930e-15 | 7.774e-04 | 7.1485e-02 \n\t   104  | 2.0800e-01 | 8.8205e-15 | 5.696e-04 | 7.1485e-02 \n\t   105  | 2.1000e-01 | 8.3719e-15 | 7.892e-04 | 7.1480e-02 \n\t   106  | 2.1200e-01 | 7.8420e-15 | 7.773e-04 | 7.1473e-02 \n\t   107  | 2.1400e-01 | 8.6948e-15 | 7.551e-04 | 7.1464e-02 \n\t   108  | 2.1600e-01 | 7.9649e-15 | 7.463e-04 | 7.1454e-02 \n\t   109  | 2.1800e-01 | 8.0102e-15 | 7.915e-04 | 7.1448e-02 \n\t   110  | 2.2000e-01 | 8.1303e-15 | 7.677e-04 | 7.1446e-02 \n\t   111  | 2.2200e-01 | 7.8962e-15 | 8.087e-04 | 7.1451e-02 \n\t   112  | 2.2400e-01 | 8.2961e-15 | 8.138e-04 | 7.1462e-02 \n\t   113  | 2.2600e-01 | 7.9442e-15 | 7.506e-04 | 7.1479e-02 \n\t   114  | 2.2800e-01 | 8.6676e-15 | 7.868e-04 | 7.1501e-02 \n\t   115  | 2.3000e-01 | 7.8162e-15 | 8.047e-04 | 7.1524e-02 \n\t   116  | 2.3200e-01 | 8.0467e-15 | 7.877e-04 | 7.1547e-02 \n\t   117  | 2.3400e-01 | 8.3748e-15 | 7.552e-04 | 7.1564e-02 \n\t   118  | 2.3600e-01 | 7.9966e-15 | 5.673e-04 | 7.1575e-02 \n\t   119  | 2.3800e-01 | 8.3061e-15 | 7.467e-04 | 7.1576e-02 \n\t   120  | 2.4000e-01 | 8.4503e-15 | 7.452e-04 | 7.1567e-02 \n\t   121  | 2.4200e-01 | 7.6542e-15 | 7.737e-04 | 7.1548e-02 \n\t   122  | 2.4400e-01 | 7.8656e-15 | 7.540e-04 | 7.1522e-02 \n\t   123  | 2.4600e-01 | 8.7187e-15 | 7.458e-04 | 7.1492e-02 \n\t   124  | 2.4800e-01 | 8.6188e-15 | 7.742e-04 | 7.1461e-02 \n\t   125  | 2.5000e-01 | 7.8167e-15 | 7.494e-04 | 7.1433e-02 \n\t   126  | 2.5200e-01 | 7.9953e-15 | 8.107e-04 | 7.1412e-02 \n\t   127  | 2.5400e-01 | 8.4123e-15 | 8.233e-04 | 7.1401e-02 \n\t   128  | 2.5600e-01 | 8.1065e-15 | 7.518e-04 | 7.1402e-02 \n\t   129  | 2.5800e-01 | 7.9228e-15 | 7.884e-04 | 7.1415e-02 \n\t   130  | 2.6000e-01 | 8.9580e-15 | 8.058e-04 | 7.1438e-02 \n\t   131  | 2.6200e-01 | 8.2843e-15 | 7.695e-04 | 7.1470e-02 \n\t   132  | 2.6400e-01 | 8.5802e-15 | 7.481e-04 | 7.1508e-02 \n\t   133  | 2.6600e-01 | 8.4853e-15 | 7.493e-04 | 7.1548e-02 \n\t   134  | 2.6800e-01 | 7.8526e-15 | 7.915e-04 | 7.1588e-02 \n\t   135  | 2.7000e-01 | 8.5010e-15 | 7.578e-04 | 7.1624e-02 \n\t   136  | 2.7200e-01 | 8.0703e-15 | 7.782e-04 | 7.1654e-02 \n\t   137  | 2.7400e-01 | 8.1338e-15 | 7.948e-04 | 7.1679e-02 \n\t   138  | 2.7600e-01 | 8.1755e-15 | 8.146e-04 | 7.1698e-02 \n\t   139  | 2.7800e-01 | 8.1286e-15 | 7.502e-04 | 7.1711e-02 \n\t   140  | 2.8000e-01 | 8.0412e-15 | 7.889e-04 | 7.1720e-02 \n\t   141  | 2.8200e-01 | 8.4633e-15 | 7.900e-04 | 7.1725e-02 \n\t   142  | 2.8400e-01 | 8.5677e-15 | 7.946e-04 | 7.1729e-02 \n\t   143  | 2.8600e-01 | 8.1796e-15 | 8.057e-04 | 7.1731e-02 \n\t   144  | 2.8800e-01 | 8.4439e-15 | 7.461e-04 | 7.1730e-02 \n\t   145  | 2.9000e-01 | 7.9352e-15 | 7.490e-04 | 7.1726e-02 \n\t   146  | 2.9200e-01 | 8.0761e-15 | 7.705e-04 | 7.1717e-02 \n\t   147  | 2.9400e-01 | 8.5526e-15 | 7.596e-04 | 7.1701e-02 \n\t   148  | 2.9600e-01 | 8.8563e-15 | 8.040e-04 | 7.1676e-02 \n\t   149  | 2.9800e-01 | 7.9603e-15 | 7.547e-04 | 7.1641e-02 \n\t   150  | 3.0000e-01 | 8.4695e-15 | 7.538e-04 | 7.1595e-02 ","category":"page"},{"location":"examples/Example250_LevelSetMethod2D/","page":"250 : Level Set Method 2D","title":"250 : Level Set Method 2D","text":"(Image: )","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/#:-Nonlinear-Elasticity-Bimetal-2D","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"","category":"section"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"(source code)","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"This example computes the displacement field u of the nonlinear elasticity problem","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"beginaligned\n-mathrmdiv(mathbbC (epsilon(u)-epsilon_T))  = 0 quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"where an isotropic stress tensor mathbbC is applied to the nonlinear strain epsilon(u) = frac12(nabla u + (nabla u)^T + (nabla u)^T nabla u) and a misfit strain  epsilon_T = Delta T alpha due to thermal load caused by temperature(s) Delta T and thermal expansion coefficients alpha (that may be different) in the two regions of the bimetal.","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"This example demonstrates how to setup a nonlinear expression with automatic differentiation and how to assign it to the problem description.","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"module Example207_NonlinearElasticityBimetal2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# callable structs to reduce allocations\nmutable struct nonlinear_operator{T}\n    λ::T\n    μ::T\n    ϵT::T\nend\nconst ops = [nonlinear_operator(0.0,0.0,0.0), nonlinear_operator(0.0,0.0,0.0)] # one for each region\n\nfunction strain!(result, input)\n    result[1] = input[1]\n    result[2] = input[4]\n    result[3] = input[2] + input[3]\n\n    # add nonlinear part of the strain 1/2 * (grad(u)'*grad(u))\n    result[1] += 1//2 * (input[1]^2 + input[3]^2)\n    result[2] += 1//2 * (input[2]^2 + input[4]^2)\n    result[3] += input[1]*input[2] + input[3]*input[4]\n    return nothing\nend\n\n# kernel for nonlinear operator\n(op::nonlinear_operator)(result, input) = (\n        # input = grad(u) written as a vector\n        # compute strain and subtract thermal strain (all in Voigt notation)\n        strain!(result, input);\n        result[1] -= op.ϵT;\n        result[2] -= op.ϵT;\n\n        # multiply with isotropic stress tensor\n        # (stored in input[5:7] using Voigt notation)\n        input[5] = op.λ*(result[1]+result[2]) + 2*op.μ*result[1];\n        input[6] = op.λ*(result[1]+result[2]) + 2*op.μ*result[2];\n        input[7] = 2*op.μ*result[3];\n\n        # write strain into result\n        result[1] = input[5];\n        result[2] = input[7];\n        result[3] = input[7];\n        result[4] = input[6];\n        return nothing\n)\n\n# everything is wrapped in a main function\nfunction main(; ν = [0.3,0.3], E = [2.1,1.1], ΔT = [580,580], α = [1.3e-5,2.4e-5], scale = [20,500], nref = 0, material_border = 0.5, store = Threads.nthreads() > 1, verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # compute Lame' coefficients μ and λ from ν and E\n    μ = E ./ (2  .* (1 .+ ν.^(-1)))\n    λ = E .* ν ./ ( (1 .- 2*ν) .* (1 .+ ν))\n\n    # change coefficients of operators\n    for region = 1 : 2\n        ops[region].μ = μ[region]\n        ops[region].λ = λ[region]\n        ops[region].ϵT = ΔT[region] * α[region]\n    end\n\n    # generate bimetal mesh\n    xgrid = bimetal_strip2D(; scale = scale, n = 2*(nref+1))\n\n    # prepare nonlinear operator (one for each bimetal region)\n    nonlin_operator_1 = NonlinearForm(Gradient, [Gradient], [1], ops[1], [4,4,7]; name = \"C(ϵ(u)-ϵT):∇v\", regions = [1], bonus_quadorder = 3, newton = true, store = store, sparse_jacobian = true)\n    nonlin_operator_2 = NonlinearForm(Gradient, [Gradient], [1], ops[2], [4,4,7]; name = \"C(ϵ(u)-ϵT):∇v\", regions = [2], bonus_quadorder = 3, newton = true, store = store, sparse_jacobian = true)\n\n    # generate problem description and assign nonlinear operators\n    Problem = PDEDescription(\"nonlinear elasticity problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"displacement equation\")\n    add_operator!(Problem, 1, nonlin_operator_1)\n    add_operator!(Problem, 1, nonlin_operator_2)\n    add_boundarydata!(Problem, 1, [1], HomogeneousDirichletBoundary)\n    @show Problem\n\n    # create finite element space and solution vector\n    FEType = H1P2{2,2}\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector(\"u_h\",FES)\n\n    # solve\n    solve!(Solution, Problem; maxiterations = 10, target_residual = 1e-9, show_statistics = true)\n\n    # displace mesh and plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (3,1), clear = true, resolution = (800,600))\n    grad_nodevals = nodevalues(Solution[1], Gradient)\n    strain_nodevals = zeros(Float64,3,num_nodes(xgrid))\n    for j = 1 : num_nodes(xgrid)\n        strain!(view(strain_nodevals,:,j), view(grad_nodevals,:,j))\n    end\n    scalarplot!(p[1,1], xgrid, view(strain_nodevals,1,:), levels = 3, colorbarticks = 7, xlimits = [0, scale[2]+10], ylimits = [-100,scale[1]], title = \"ϵ(u)_xx + displacement\")\n    scalarplot!(p[2,1], xgrid, view(strain_nodevals,2,:), levels = 3, colorbarticks = 7, xlimits = [0, scale[2]+10], ylimits = [-100,scale[1]], title = \"ϵ(u)_yy + displacement\")\n    vectorplot!(p[1,1], xgrid, evaluate(PointEvaluator(Solution[1], Identity)), spacing = [50,25], clear = false)\n    vectorplot!(p[2,1], xgrid, evaluate(PointEvaluator(Solution[1], Identity)), spacing = [50,25], clear = false)\n    displace_mesh!(xgrid, Solution[1])\n    gridplot!(p[3,1], xgrid, linewidth = 1, title = \"displaced mesh\")\nend\n\n\nfunction bimetal_strip2D(; scale = [1,1], n = 2, anisotropy_factor::Int = Int(ceil(scale[2]/(4*scale[1]))), ε_fix = scale[1]/(4*n))\n    X=linspace(0,scale[2],(n+1)*anisotropy_factor)\n    # add some epsilon layer around material border\n    if ε_fix>0.0\n        yfix=[scale[1]/2-1.5*ε_fix,scale[1]/2-ε_fix/2,scale[1]/2,scale[1]/2+ε_fix/2,scale[1]/2+1.5*ε_fix]\n\t    Y=glue(glue(linspace(0,yfix[1],n),yfix),linspace(yfix[end],scale[1],n))\n    else\n        Y=linspace(0, scale[1], 2*n+1)\n    end\n    xgrid=simplexgrid(X,Y)\n    cellmask!(xgrid,[0.0,0.0],[scale[2],scale[1]/2],1)\n    cellmask!(xgrid,[0.0,scale[1]/2],[scale[2],scale[1]],2)\n    bfacemask!(xgrid,[0.0,0.0],[0.0,scale[1]/2],1)\n    bfacemask!(xgrid,[0.0,scale[1]/2],[0.0,scale[1]],11)\n    bfacemask!(xgrid,[0.0,0.0],[scale[2],0.0],2)\n    bfacemask!(xgrid,[scale[2],0.0],[scale[2],scale[1]],2)\n    bfacemask!(xgrid,[0.0,scale[1]],[scale[2],scale[1]],2)\n    return xgrid\nend\nend","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"Default output:","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"julia> Example207_NonlinearElasticityBimetal2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = nonlinear elasticity problem\n\n     id   | unknown name / equation name\n    [1]   | u / displacement equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | C(ϵ(u)-ϵT):∇v [AD-Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [1])\n            | C(ϵ(u)-ϵT):∇v [AD-Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [2])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1]\n                          \n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 5.64e+00/3.40e-06/5.65e+00\n\t      1   | 3.447349e-12 | 3.479103e+00 | 1.45e-02/4.40e-03/2.56e-02\n\t      2   | 3.422264e-12 | 3.231057e-02 | 1.39e-02/4.29e-03/1.83e-02\n\t      3   | 3.759850e-12 | 3.779597e-06 | 1.43e-02/3.38e-02/4.82e-02\n\t      4   | 4.008845e-12 | 5.247822e-12 | 1.39e-02/3.56e-03/1.76e-02\n\t    total |                             | 5.70e+00/4.60e-02/5.76e+00\n","category":"page"},{"location":"examples/Example207_NonlinearElasticityBimetal2D/","page":"207 : Nonlinear Elasticity Bimetal 2D","title":"207 : Nonlinear Elasticity Bimetal 2D","text":"(Image: )","category":"page"},{"location":"userdata/#User-Data-and-Actions","page":"User Data and Actions","title":"User Data and Actions","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"There is a variety of different user data, like scalar- and vector-valued constants, time-dependent data, region-dependent data or plain functions that depend on the the space coordinates. Also dependency on the item number of the reference coordinates of the quadrature point in the quadrature item are sometimes desireable. To allow for flexible user-specified data, all functions have to be negotiated by the UserData interface that fixes the order and number of the arguments in the interface via a user-given substring of \"XTIL\" where each character stands for a dependency. The following table explains the meaning of each character.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Character Explanation\nX depends on (vector-valued) space coordinates\nT depends on time coordinate\nI depends on item information (item nr, parent nr, region)\nL depends on local coordinates in reference geometry of item","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Also note that all functions are expected to write their result into the first argument.","category":"page"},{"location":"userdata/#Data-Function","page":"User Data and Actions","title":"Data Function","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"The simplest form of user data is called DataFunction which allows additional dependencies on space or time coordinates. The following tables lists all allowed substrings of \"XTRIL\" and the expected interface of the function provided by the user.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"dependency string Expected interface\n\"\" function f!(result) ... end  (constant data)\n\"X\" function f!(result,x) ... end  (space-dependent data)\n\"T\" function f!(result,t) ... end  (time-dependent constant-in-space data)\n\"XT\" function f!(result,x,t) ... end  (space and time-dependent data)","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"DataFunctions can be used to define boundary data, right-hand side functions and can be interpolated by the finite element standard interpolations. There are also derivatives defined for DataFunctions that generate another DataFunction where the derivative is calculated via ForwardDiff.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"DataFunction\n∇\ndiv\ncurl","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.DataFunction","page":"User Data and Actions","title":"GradientRobustMultiPhysics.DataFunction","text":"DataFunction(kernel::Function, argsizes; Tv, Ti, dependencies, bonus_quadorder, name) -> DataFunction{Float64, Int32}\n\n\ngenerates a DataFunction that can be used in the construction of PDEoperators, interpolations etc. and essentially consists of a kernel function specified by the user plus additional information on argument dimensions and additional dependencies:\n\nkernel   : Function with interface (result, ...)\nargsizes : expected lengths of [result, interface]\n\nOptional arguments:\n\ndependencies    : substring of \"XTIL\" that specifies if the kernel also depends on space coordinates (X), time (T), item (I), local coordinates (L)\nbonus_quadorder : is added to the quadrature order computed based on the used FESpaces during assembly\nname            : name of this Action used in print messages\nTv              : expected NumberType for result/input\nTi              : expected NumberType for grid enumeration infos (e.g. item/region numbers when \"I\" dependecy is used)\n\n\n\n\n\nfunction DataFunction(c::Array{<:Real,1}; name = \"constant user data\", quadorder::Int = 0)\n\nDirectly generates a DataFunction from a given array c, i.e. a DataFunction that is constant and has no dependencies on x or t.\n\n\n\n\n\n","category":"type"},{"location":"userdata/#GradientRobustMultiPhysics.∇","page":"User Data and Actions","title":"GradientRobustMultiPhysics.∇","text":"function ∇(UD::AbstractUserDataType; quadorder = UD.quadorder - 1)\n\nProvides a DataFunction with the same dependencies that evaluates the gradient of the DataFunction UD. The derivatives are computed by ForwardDiff.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Base.div","page":"User Data and Actions","title":"Base.div","text":"function div(UD::AbstractUserDataType; quadorder = UD.quadorder - 1)\n\nProvides a DataFunction with the same dependencies that evaluates the divergence of the DataFunction UD. The derivatives are computed by ForwardDiff.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#GradientRobustMultiPhysics.curl","page":"User Data and Actions","title":"GradientRobustMultiPhysics.curl","text":"function curl(UD::AbstractUserDataType; quadorder = UD.quadorder - 1)\n\nProvides a DataFunction with the same dependencies that evaluates the curl of the DataFunction UD. The derivatives are computed by ForwardDiff. Depending on the dimensions of UD, either CurlScalar (UD.argsizes == [1,2]), Curl2D (UD.argsizes == [2,2]) or Curl3D (UD.argsizes == [3,3]) is generated.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Extended-Data-Function","page":"User Data and Actions","title":"Extended Data Function","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"There are also ExtendedDataFunction that allow the additional dependencies R (region), I (item number) and L (local coordinates). The dependencies are stated via a string in the constructor that should be a substring of \"XTIL\". However, extended data functions cannot be used everywhere. The two types will be overhauled and combined in a future update.","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"ExtendedDataFunction","category":"page"},{"location":"userdata/#Action","page":"User Data and Actions","title":"Action","text":"","category":"section"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Actions are used by abstract user-defined PDEOperators and consist of an action kernel function of the interface","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"function action_kernel!(result,input,[X,T,I,L])\n    # result = modified input, possibly depended on\n    # X = space coordinates\n    # T = time\n    # I = item information (vector with item number (w.r.t. AT), parent number and region  number)\n    # L = local coordinates on item reference domain\nend","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"plus some additional infrastructure like expected dimensiona of result and input and further dependencies","category":"page"},{"location":"userdata/","page":"User Data and Actions","title":"User Data and Actions","text":"Action","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.Action","page":"User Data and Actions","title":"GradientRobustMultiPhysics.Action","text":"Action(kernel::Function, argsizes; Tv, Ti, dependencies, bonus_quadorder, name) -> DefaultUserAction{Float64, Int32}\n\n\ngenerates an Action that can be used in the construction of PDEoperators and essentially consists of a kernel function specified by the user plus additional information on argument dimensions and additional dependencies:\n\nkernel   : Function with interface (result, input, ...)\nargsizes : expected lengths of [result, interface]\n\nOptional arguments:\n\ndependencies    : substring of \"XTIL\" that specifies if the kernel also depends on space coordinates (X), time (T), item (I), local coordinates (L)\nbonus_quadorder : is added to the quadrature order computed based on the used FESpaces during assembly\nname            : name of this Action used in print messages\nTv              : expected NumberType for result/input\nTi              : expected NumberType for grid enumeration infos (e.g. item/region numbers when \"I\" dependecy is used)\n\n\n\n\n\n","category":"function"},{"location":"examples/ExampleA02_CommutingInterpolators2D/#A02-:-Commuting-Interpolators-2D","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"","category":"section"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"(source code)","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"This example verifies a structural property of the H1 and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"mathrmCurl(I_mathrmP_kpsi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"for the H_1 interpolator I_mathrmP_k and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 and k=2. Note, that the H_1 interpolator only does nodal interpolations at the vertices but not in the additional degrees of freedom. For k=2, the interpolator also preserves the moments along the edges.","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"module ExampleA02_CommutingInterpolators2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# define some function\nfunction exact_function!(result,x)\n    result[1] = x[1]^2-x[2]^4 + 1\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 2, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Triangle2D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    u = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", bonus_quadorder = 4)\n    u_curl = curl(u)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [H1P1{1},HDIVRT0{2}]; testFE = H1P0{2}\n    elseif order == 2\n        FE = [H1P2{1,2},HDIVRT1{2}]; testFE = H1P1{2}\n    end\n\n    # do the H1 and Hdiv interpolation of the function and its curl, resp.\n    FES = [FESpace{FE[1]}(xgrid), FESpace{FE[2]}(xgrid)]\n    Interpolations = FEVector([\"H1-Interpolation\", \"Hdiv-Interpolation\"], FES)\n    interpolate!(Interpolations[1], u)\n    interpolate!(Interpolations[2], u_curl)\n\n    # Both sides of the identity are finite element functions of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # Generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector(\"ErrorVector\",FEStest)\n\n    # Define (yet undiscrete) linear forms that represents testing each side of the identity with the testspace functions\n    LF1 = LinearForm(Identity, [Identity], [1]) # identity of test function is multiplied with identity of other argument\n    LF2 = LinearForm(Identity, [CurlScalar], [1]) # identity of test function is multiplied with CurlScalar of other argument\n\n    # Assemble linear forms into the same vector with opposite signs\n    # note: first argument fixes the test function FESpace and third arguments are used for the additional operators of the linearform\n    assemble_operator!(error[1], LF1, [Interpolations[2]])\n    assemble_operator!(error[1], LF2, [Interpolations[1]]; factor = -1)\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1,2]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"Default output:","category":"page"},{"location":"examples/ExampleA02_CommutingInterpolators2D/","page":"A02 : Commuting Interpolators 2D","title":"A02 : Commuting Interpolators 2D","text":"julia> ExampleA02_CommutingInterpolators2D.main()\nerror(Curl(I_H1P2{1,2}(psi) - I_HDIVRT1{2}(Curl(psi))) = 1.9587735628207836e-16","category":"page"},{"location":"examples/Example201_PoissonProblem2D/#:-Poisson-Problem-2D","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"","category":"section"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"(source code)","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"This example computes the solution u of the Poisson problem","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"beginaligned\n-Delta u  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"with some right-hand side f on the unit cube domain Omega on a given grid.","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"module Example201_PoissonProblem2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# right-hand side function\nconst f = DataFunction([1]; name = \"f\")\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, μ = 1, order = 2, nrefinements = 5, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # build/load any grid (here: a uniform-refined 2D unit square into triangles)\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), nrefinements)\n\n    # create empty PDE description\n    Problem = PDEDescription(\"Poisson problem\")\n\n    # add unknown(s) (here: \"u\" that gets id 1 for later reference)\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"Poisson equation\")\n\n    # add left-hand side PDEoperator(s) (here: only Laplacian)\n    add_operator!(Problem, [1,1], LaplaceOperator(μ))\n\n    # add right-hand side data (here: f = [1] in region(s) [1])\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f; regions = [1]))\n\n    # add boundary data (here: zero data for boundary regions 1:4)\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # discretise = choose FEVector with appropriate FESpaces\n    FEType = H1Pk{1,2,order}\n    Solution = FEVector(\"u_h\",FESpace{FEType}(xgrid))\n\n    # show problem and Solution structure\n    @show Problem Solution\n\n    # solve for chosen Solution vector\n    solve!(Solution, Problem; show_statistics = true)\n\n    # plot solution (for e.g. Plotter = PyPlot)\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels = 7, title = \"u_h\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), vscale = 0.8, levels = 0, colorbarticks = 9, title = \"∇u_h (abs + quiver)\")\n    vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), spacing = 0.1, clear = false)\nend\n\nend","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"Default output:","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"julia> Example201_PoissonProblem2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | u / Poisson equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [1])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    8321 | u_h (H1Pk{1,2,2})\n","category":"page"},{"location":"examples/Example201_PoissonProblem2D/","page":"201 : Poisson-Problem 2D","title":"201 : Poisson-Problem 2D","text":"(Image: )","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/#:-Nonlinear-Poisson-Transient-2D","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"","category":"section"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"(source code)","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"This example computes a transient velocity mathbfu solution of the nonlinear Poisson problem","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"beginaligned\nmathbfu_t - mathrmdiv((1+betamathbfu^2) nabla mathbfu)  = mathbff\nendaligned","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"with (some time-dependent) exterior force mathbff. The parameter beta steers the strength of the nonlinearity.","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"The time integration will be performed by the internal CrankNicolson rule (or optionally BackwardEuler) of GradientRobustMultiPhysics. A manufactureed quadratic-in-space and qaudratic-in-time solution is prescribed to test if the solver computes the exact solution.","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"module Example206_NonlinearPoissonTransient2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# kernel for nonlinear diffusion operator\nfunction diffusion_kernel!(result, input)\n    # input = [u, grad(u)]\n    result[1] = (1+input[1]^2)*input[2]\n    result[2] = (1+input[1]^2)*input[3]\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, nlevels = 3, timestep = 1e-1, T = 0.5, FEType = H1P2{1,2}, time_integration_rule = CrankNicolson, t_power = 2, testmode = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # set exact solution and data\n    u = DataFunction((result,x,t) -> (result[1] = x[1]*x[2]*(1-t)^t_power), [1,2]; dependencies = \"XT\", bonus_quadorder = 2)\n    ∇u = ∇(u)\n    f = DataFunction((result,x,t) -> (result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1])*(1-t)^(3*t_power) -t_power*x[1]*x[2]*(1-t)^(t_power-1)), [1,2]; name = \"∇(u)\", dependencies = \"XT\", bonus_quadorder = 4)\n\n    # initial grid and final time\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),1)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    nonlin_diffusion = NonlinearForm(Gradient, [Identity, Gradient], [1,1], diffusion_kernel!, [2,3]; name = \"(1+u^2) ∇u ⋅ ∇v\", bonus_quadorder = 2, newton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1,  LinearForm(Identity, f))\n\n    # define error evaluators\n    L2Error = L2ErrorIntegrator(u, Identity; time = T)\n    H1Error = L2ErrorIntegrator(∇u, Gradient; time = T)\n    NDofs = zeros(Int,nlevels)\n    Results = zeros(Float64,nlevels,2)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # refine grid\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n\n        # set initial solution\n        interpolate!(Solution[1], u)\n\n        # generate time-dependent solver\n        sys = TimeControlSolver(Problem, Solution, time_integration_rule; timedependent_equations = [1], maxiterations = 5)\n\n        # use time control solver by GradientRobustMultiPhysics\n        advance_until_time!(sys, timestep, T)\n\n        # calculate L2 and H1 error and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(H1Error,Solution[1]))\n    end\n\n    if testmode == true\n        return Results[end,2]\n    else\n        p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n        scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], levels = 7, title = \"u_h\")\n        scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels = 7, title = \"∇u_h (abs + quiver)\")\n        vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), spacing = 0.1, clear = false)\n\n        # print/plot convergence history\n        print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\"])\n    end\nend\n\nfunction test()\n    error1 = main(; nlevels = 1, FEType = H1P2{1,2}, t_power = 1, time_integration_rule = BackwardEuler, testmode = true)\n    error2 = main(; nlevels = 1, FEType = H1P2{1,2}, t_power = 2, time_integration_rule = CrankNicolson, testmode = true)\n    return max(error1,error2)\nend\n\nend","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"Default output:","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"julia> Example206_NonlinearPoissonTransient2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\n\n\t  STEP  |    TIME    | LSRESIDUAL |   NLRESIDUAL   |  RUNTIME  |   CHANGE        \n\t        |            |  (total)   |    (total)     |    (s)    |      u     \n\t     1  | 1.0000e-01 | 1.9189e-15 | 1.8336e-12 (3) | 4.023e+00 | 7.8835e-01 \n\t     2  | 2.0000e-01 | 1.8417e-15 | 2.5847e-13 (3) | 1.353e-02 | 7.0536e-01 \n\t     3  | 3.0000e-01 | 1.0705e-15 | 2.4387e-14 (3) | 1.314e-02 | 6.2238e-01 \n\t     4  | 4.0000e-01 | 9.2621e-16 | 1.9547e-15 (3) | 1.297e-02 | 5.3940e-01 \n\t     5  | 5.0000e-01 | 5.0103e-16 | 1.0005e-15 (3) | 1.285e-02 | 4.5641e-01 \n\n\t  STEP  |    TIME    | LSRESIDUAL |   NLRESIDUAL   |  RUNTIME  |   CHANGE        \n\t        |            |  (total)   |    (total)     |    (s)    |      u     \n\t     1  | 1.0000e-01 | 4.0367e-15 | 1.0276e-12 (3) | 4.833e-02 | 1.5025e+00 \n\t     2  | 2.0000e-01 | 3.5568e-15 | 1.4644e-13 (3) | 4.841e-02 | 1.3444e+00 \n\t     3  | 3.0000e-01 | 2.1191e-15 | 1.4557e-14 (3) | 4.829e-02 | 1.1862e+00 \n\t     4  | 4.0000e-01 | 1.8747e-15 | 3.6858e-15 (3) | 4.825e-02 | 1.0281e+00 \n\t     5  | 5.0000e-01 | 1.0648e-15 | 2.3067e-15 (3) | 4.813e-02 | 8.6989e-01 \n\n\t  STEP  |    TIME    | LSRESIDUAL |   NLRESIDUAL   |  RUNTIME  |   CHANGE        \n\t        |            |  (total)   |    (total)     |    (s)    |      u     \n\t     1  | 1.0000e-01 | 9.8992e-15 | 5.4201e-13 (3) | 1.907e-01 | 2.9345e+00 \n\t     2  | 2.0000e-01 | 6.4454e-15 | 7.9657e-14 (3) | 1.905e-01 | 2.6256e+00 \n\t     3  | 3.0000e-01 | 5.1738e-15 | 1.2044e-14 (3) | 1.905e-01 | 2.3167e+00 \n\t     4  | 4.0000e-01 | 3.4457e-15 | 6.8494e-15 (3) | 1.887e-01 | 2.0078e+00 \n\t     5  | 5.0000e-01 | 2.4558e-15 | 4.4648e-15 (3) | 2.089e-01 | 1.6989e+00 \n\n    ndofs   |   || u - u_h ||    order | || ∇(u - u_h) ||   order |\n============|==========================|==========================|\n       145  |     2.652e-14      0.00  |     5.283e-13      0.00  |\n       545  |     2.758e-14      -0.06  |     5.342e-13      -0.02  |\n      2113  |     2.773e-14      -0.01  |     5.367e-13      -0.01  |","category":"page"},{"location":"examples/Example206_NonlinearPoissonTransient2D/","page":"206 : Nonlinear Poisson Transient 2D","title":"206 : Nonlinear Poisson Transient 2D","text":"(Image: )","category":"page"},{"location":"quadrature/#Quadrature","page":"Quadrature","title":"Quadrature","text":"","category":"section"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Usually quadrature is a hidden layer as quadrature rules are chosen automatically based on the polynomial degree of the ansatz functions and the specified quadorder of the user data.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Hence, quadrature rules are only needed if the user wants write his own low-level assembly.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Quadrature rules consist of points (coordinates of evauation points with respect to reference geometry) and weights. There are constructors for several AbstractElementGeometries (from ExtendableGrids) and different order (some have generic formulas for abitrary order), see below for a detailed list.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"quadrature.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"abstract type QuadratureRule{T<:Real, ET<:AbstractElementGeometry}\n\nA struct that contains the name of the quadrature rule, the reference points and the weights for the parameter-determined element geometry.\n\n\n\n\n\n","category":"type"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry0D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry0D}\n\nConstructs 0D quadrature rule of specified order (always point evaluation).\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry1D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry1D}\n\nConstructs 1D quadrature rule of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Parallelepiped3D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelepiped3D}\n\nConstructs quadrature rule on Parallelepiped3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Parallelogram2D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelogram2D}\n\nConstructs quadrature rule on Parallelogram2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Tetrahedron3D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Tetrahedron3D}\n\nConstructs quadrature rule on Tetrahedron3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:Triangle2D}","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Triangle2D}\n\nConstructs quadrature rule on Triangle2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.eltype-Union{Tuple{QuadratureRule{T, ET}}, Tuple{ET}, Tuple{T}} where {T<:Real, ET<:AbstractElementGeometry}","page":"Quadrature","title":"Base.eltype","text":"eltype(_::QuadratureRule{T<:Real, ET<:AbstractElementGeometry}) -> Vector\n\n\nCustom eltype function for QuadratureRule{T,ET}.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.show-Tuple{IO, QuadratureRule}","page":"Quadrature","title":"Base.show","text":"show(io::IO, Q::QuadratureRule)\n\n\nCustom show function for QuadratureRule{T,ET} that prints some information.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate!-Union{Tuple{T}, Tuple{AbstractArray{T}, ExtendableGrid, Type{<:AssemblyType}, GradientRobustMultiPhysics.AbstractUserDataType}} where T","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate!","text":"integrate!(integral4items::AbstractArray{T}, grid::ExtendableGrid, AT::Type{<:AssemblyType}, integrand::GradientRobustMultiPhysics.AbstractUserDataType; index_offsets, time, items, force_quadrature_rule)\n\n\nIntegration that writes result on every item into integral4items.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate-Tuple{ExtendableGrid, Type{<:AssemblyType}, GradientRobustMultiPhysics.AbstractUserDataType, Int64}","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate","text":"integrate(grid::ExtendableGrid, AT::Type{<:AssemblyType}, integrand!::GradientRobustMultiPhysics.AbstractUserDataType, resultdim::Int64; T, items, force_quadrature_rule) -> Union{Float64, Vector{Float64}}\n\n\nIntegration that returns total integral.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.ref_integrate!-Tuple{AbstractArray, Type{<:AbstractElementGeometry}, Int64, Function}","page":"Quadrature","title":"GradientRobustMultiPhysics.ref_integrate!","text":"ref_integrate!(integral::AbstractArray, EG::Type{<:AbstractElementGeometry}, order::Int64, integrand::Function)\n\n\nIntegration for reference basis functions on reference domains (merely for testing stuff).\n\nNote: area of reference geometry is not multiplied\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#PDE-Description","page":"PDE Description","title":"PDE Description","text":"","category":"section"},{"location":"pdedescription/#Purpose","page":"PDE Description","title":"Purpose","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"The following flow chart visualizes the typical work flow for solving a PDE.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"(Image: Assembly Flowchart) ","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Central object is the PDEDescription which is given as a weak form of your problem (without time derivatives that are added separately by a TimeControlSolver) and usually does not need any information on the discretisation at this point (but of course can depend on region numbers).","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Separately the user provides a mesh and selects suitable finite element spaces on it. The PDEDescription and the Finite Element information is passed to the solver which (after an inspection of all the problem features) descides on a solver strategy (directly or fixed-point). In each iteration a linear system of equations is assembled and then solved by a linear solver.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Automatic differentiation enters on the PDEDescription level. Nonlinear operators can be triggered to be differentiated automatically which causes during their assignment to the PDEDescription that the necessary terms for a Newton iteration (related to the partial derivatives with respect to each unknown and modifications to the right-hand side) automatically enter the PDEDescription, such that a call of solve! returns the next Newton iterate. (Fixed damping factors or function-based damping is also possible via optional arguments, but currently no lagged update of the derivatives.)","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Also, if preferred or needed, a low-level assembly of the linear system is possible as each operator can be assembled separately.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Below the PDEDescription type is detailed. Its ingredients (PDEOperators, boundary conditions, global constraints) are explained on the next pages.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"PDEDescription\nBase.show(io::IO, PDE::PDEDescription)","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"mutable struct PDEDescription\n    name::String\n    equation_names::Array{String,1}\n    unknown_names::Array{String,1}\n    algebraic_constraint::Array{Bool,1}\n    LHS::Array{Array{AbstractPDEOperator,1},2}\n    RHS::Array{Array{AbstractPDEOperator,1},1}\n    BoundaryOperators::Array{BoundaryOperator,1}\n    GlobalConstraints::Array{AbstractGlobalConstraint,1}\nend\n\nstruct that describes a PDE system with n equations and n unknowns\n\nA PDE system is described by\n\nits name\nthe names of its equations\nthe names of its unknowns\nis the variable related to an algebraic constraint? (e.g. pressure in incompressible CFD, this has implications e.g. for the time discretisation)\na size n x n array of Array{AbstractPDEOperator,1} LHS that describes the left-hand sides\na length n array of Array{AbstractPDEOperator,1} RHS that describes the right-hand sides\na length n array of BoundaryOperators that describes the boundary conditions for each unknown\nan array of GlobalConstraints that describes additional global constraints\n\nA PDEDescription mainly is a set of PDEOperators arranged in a quadratic n by n matrix (LHS). Every matrix row refers to one equation and the positioning of the PDEOperators (e.g. a bilinearform) immediately sets the information which unknowns have to be used to evaluate the operator. Also  nonlinear PDEOperators are possible where extra information on the further involved uknowns have to be specified. UserData is also assigned to the PDEDescription depending on their type. Operator coefficients are assigned directly to the PDEOperators (in form of AbstractActions or a constant factor), right-hand side data is assigned to the right-hand side array of PDEOperators (RHS) and boundary data is assigned to the BoundaryOperators of the PDEDescription. Additionaly global constraints (like a global zero integral mean) can be assigned as a GlobalConstraint.\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#Base.show-Tuple{IO, PDEDescription}","page":"PDE Description","title":"Base.show","text":"show(io::IO, PDE::PDEDescription)\n\n\nCustom show function for PDEDescription that prints the PDE systems and all assigned operators\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#Creating/Extending-a-PDEDescription","page":"PDE Description","title":"Creating/Extending a PDEDescription","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Several add...! functions allow to extend a ProblemDescription at any stage. There are some very basic PDE Prototypes and several Examples that can be used as a point of departure. Below is a list of functions that allows to initialise and extend a PDEDescription.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"pdedescription.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String, Int64}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String, nunknowns::Int64; algebraic, unknown_names, equation_names) -> PDEDescription\n\n\nCreate empty PDEDescription for a specified number of unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String) -> PDEDescription\n\n\nCreate empty PDEDescription with no unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_boundarydata!-Tuple{PDEDescription, Int64, Any, Type{<:AbstractBoundaryType}}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions, btype::Type{<:AbstractBoundaryType}; data)\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nNote: If the data function is time-dependent (see User Data documentation) it is evaluated in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_constraint!-Tuple{PDEDescription, AbstractGlobalConstraint}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint)\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Tuple{PDEDescription, Vector{Int64}, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, position::Vector{Int64}, O::AbstractPDEOperator; equation_name) -> Union{Nothing, Int64}\n\n\nAdds the given abstract PDEOperator to the left-hand side of the PDEDescription at the specified position. The id of the operator in the coressponding LHS block of PDEDescription is returned.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Tuple{PDEDescription, Vector{Int64}, GradientRobustMultiPhysics.PDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, position::Vector{Int64}, O::GradientRobustMultiPhysics.PDEOperator; equation_name) -> Union{Nothing, Int64}\n\n\nAdds the given linear PDEOperator to the left-hand side of the PDEDescription at the specified position. Optionally, the name of the equation can be changed. The id of the operator in the coressponding LHS block of PDEDescription is returned.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Union{Tuple{APT}, Tuple{T}, Tuple{PDEDescription, Int64, GradientRobustMultiPhysics.PDEOperator{T, APT}}} where {T, APT<:NonlinearForm}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, equation::Int64, O::GradientRobustMultiPhysics.PDEOperator{T, APT<:NonlinearForm}; equation_name)\n\n\nAdds the given nonlinear PDEOperator to the specified equation of the PDEDescription. Optionally, the name of the equation can be changed.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_rhsdata!-Tuple{PDEDescription, Int64, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_rhsdata!","text":"add_rhsdata!(PDE::PDEDescription, position::Int64, O::AbstractPDEOperator) -> Int64\n\n\nAdds the given PDEOperator to the right-hand side of the PDEDescription at the specified position. The id of the operator in the coressponding RHS block of PDEDescription is returned.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_unknown!-Tuple{PDEDescription}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_unknown!","text":"add_unknown!(PDE::PDEDescription; equation_name, unknown_name, algebraic_constraint)\n\n\nAdds another unknown to the PDEDescription. With the optional argument algebraic_constraint = true the unknown and the related equation can be mask as an algebraic constraint. (Currently this only has a consequence if the system is integrated in time with the Crank-Nicolson rule.)\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.replace_operator!-Tuple{PDEDescription, Vector{Int64}, Int64, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.replace_operator!","text":"replace_operator!(PDE::PDEDescription, position::Vector{Int64}, id::Int64, O::AbstractPDEOperator; equation_name)\n\n\nReplaces the operator at position[id] of the left-hand side of the PDEDescription with the given PDEOperator.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.replace_rhsdata!-Tuple{PDEDescription, Int64, Int64, AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.replace_rhsdata!","text":"replace_rhsdata!(PDE::PDEDescription, position::Int64, id::Int64, O::AbstractPDEOperator)\n\n\nReplaces the operator at position[id] of the right-hand side of the PDEDescription with the given PDEOperator.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Finite-Element-Spaces-and-Arrays","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"This page describes the structure FESpace that acts as a finite element space on a given grid and provides the associated degree of freedom maps DofMaps on demand. See Implemented Finite Elements for a list of available finite element types.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Moreover, there are special arrays FEVector and FEMatrix that carry coefficients and discretised PDEOperators.","category":"page"},{"location":"fespace/#FESpace","page":"Finite Element Spaces and Arrays","title":"FESpace","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"To generate a finite element space only a finite element type and a grid is needed, dofmaps are generated automatically on demand.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"finiteelements.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"struct FESpace{Tv, Ti, FEType<:AbstractFiniteElement,AT<:AssemblyType}\n    name::String                          # full name of finite element space (used in messages)\n    broken::Bool                          # if true, broken dofmaps are generated\n    ndofs::Int                            # total number of dofs\n    coffset::Int                          # offset for component dofs\n    xgrid::ExtendableGrid[Tv,Ti}          # link to xgrid \n    dofmaps::Dict{Type{<:AbstractGridComponent},Any} # backpack with dofmaps\nend\n\nA struct that has a finite element type as parameter and carries dofmaps (CellDofs, FaceDofs, BFaceDofs) plus additional grid information and access to arrays holding coefficients if needed.\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace-Union{Tuple{ExtendableGrid{Tv, Ti}}, Tuple{AT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti, FEType<:AbstractFiniteElement, AT<:AssemblyType}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"function FESpace{FEType<:AbstractFiniteElement,AT<:AssemblyType}(\n    xgrid::ExtendableGrid{Tv,Ti};\n    name = \"\",\n    broken::Bool = false)\n\nConstructor for FESpace of the given FEType, AT = ONCELLS/ONFACES/ONEDGES generates a finite elements space on the cells/faces/edges of the provided xgrid (if omitted ONCELLS is used as default). The broken switch allows to generate a broken finite element space (that is piecewise H1/Hdiv/HCurl). If no name is provided it is generated automatically from FEType. If no AT is provided, the space is generated ON_CELLS.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.eltype-Union{Tuple{FESpace{Tv, Ti, FEType, APT}}, Tuple{APT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti, FEType<:AbstractFiniteElement, APT}","page":"Finite Element Spaces and Arrays","title":"Base.eltype","text":"Custom eltype function for FESpace returns the finite element type parameter of the finite element space.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.get!-Tuple{FESpace, Type{<:DofMap}}","page":"Finite Element Spaces and Arrays","title":"Base.get!","text":"get!(FES::FESpace, DM::Type{<:DofMap}) -> Any\n\n\nTo be called by getindex. This triggers lazy creation of  non-existing dofmaps\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.getindex-Tuple{FESpace, Type{<:DofMap}}","page":"Finite Element Spaces and Arrays","title":"Base.getindex","text":"Base.getindex(FES::FESpace,DM::Type{<:DofMap})\n\nGeneric method for obtaining dofmap. This method is mutating in the sense that non-existing dofmaps are created on demand. Due to the fact that components are stored as Any the return value triggers type instability.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.setindex!-Tuple{FESpace, Any, Type{<:DofMap}}","page":"Finite Element Spaces and Arrays","title":"Base.setindex!","text":"setindex!(FES::FESpace, v, DM::Type{<:DofMap}) -> Any\n\n\nSet new dofmap\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Union{Tuple{APT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}, Tuple{IO, FESpace{Tv, Ti, FEType, APT}}} where {Tv, Ti, FEType<:AbstractFiniteElement, APT}","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FES::FESpace{Tv, Ti, FEType<:AbstractFiniteElement, APT})\n\n\nCustom show function for FESpace that prints some information and all available dofmaps.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.assemblytype-Union{Tuple{FESpace{Tv, Ti, FEType, APT}}, Tuple{APT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti, FEType<:AbstractFiniteElement, APT}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.assemblytype","text":"returns the assembly type parameter of the finite element space, i.e. on which entities of the grid the finite element is defined.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#DofMaps","page":"Finite Element Spaces and Arrays","title":"DofMaps","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dofmaps.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.DofMap","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.DofMap","text":"abstract type DofMap <: AbstractGridAdjacency\n\nDofmaps are stored as an ExtendableGrids.AbstractGridAdjacency in the finite element space and collect information with respect to different AssemblyTypes. They are generated automatically on demand and the dofmaps associated to each subtype can be accessed via FESpace[DofMap].\n\n\n\n\n\n","category":"type"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"The following DofMap subtypes are available and are used as keys to access the dofmap via FESpace[DofMap] (which is equivalent to FESpace.dofmaps[DofMap]).","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"DofMap Explanation\nCellDofs degrees of freedom for on each cell\nFaceDofs degrees of freedom for each face\nEdgeDofs degrees of freedom for each edge (in 3D)\nBFaceDofs degrees of freedom for each boundary face\nBEdgeDofs degrees of freedom for each boundary edge (in 3D)","category":"page"},{"location":"fespace/#FEVector","page":"Finite Element Spaces and Arrays","title":"FEVector","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"A FEVector consists of FEVectorBlocks that share a common one-dimensional array. Each block is associated to a FESpace and can only write into a region of the common array specified by offsets. It also acts as a one-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fevector.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"struct FEVector{T, Tv, Ti}\n\na plain array but with an additional layer of several FEVectorBlock subdivisions each carrying coefficients for their associated FESpace\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{APT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}, Tuple{String, FESpace{Tv, Ti, FEType, APT}}} where {Tv, Ti, FEType, APT}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::FESpace) where T <: Real\n\nCreates FEVector that has one block.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Any, Vector{<:FESpace{Tv, Ti}}}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEVector that has one block for each FESpace in FES.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVectorBlock","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVectorBlock","text":"struct FEVectorBlock{T, Tv, Ti, FEType, APT} <: AbstractArray{T, 1}\n\nblock of an FEVector that carries coefficients for an associated FESpace and can be assigned as an AbstractArray (getindex, setindex, size, length)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.append!-Union{Tuple{APT}, Tuple{FEType}, Tuple{Ti}, Tuple{Tv}, Tuple{T}, Tuple{FEVector{T}, String, FESpace{Tv, Ti, FEType, APT}}} where {T, Tv, Ti, FEType, APT}","page":"Finite Element Spaces and Arrays","title":"Base.append!","text":"append!(FEF::FEVector{T}, name::String, FES::FESpace{Tv, Ti, FEType, APT})\n\n\nCustom append function for FEVector that adds a FEVectorBlock at the end.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.fill!-Tuple{FEVectorBlock, Any}","page":"Finite Element Spaces and Arrays","title":"Base.fill!","text":"fill!(b::FEVectorBlock, value)\n\n\nCustom fill function for FEVectorBlock (only fills the block, not the complete FEVector).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Tuple{FEVectorBlock}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"length(FEB::FEVectorBlock) -> Int64\n\n\nCustom length function for FEVectorBlock that gives the coressponding number of degrees of freedoms of the associated FESpace\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Tuple{FEVector}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"length(FEF::FEVector) -> Int64\n\n\nCustom length function for FEVector that gives the number of defined FEMatrixBlocks in it\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Tuple{IO, FEVector}","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEF::FEVector)\n\n\nCustom show function for FEVector that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock, AbstractVector}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::AbstractVector; factor)\n\n\nAdds Array b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock, FEVectorBlock}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::FEVectorBlock; factor)\n\n\nAdds FEVectorBlock b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#LinearAlgebra.dot-Union{Tuple{T}, Tuple{FEVectorBlock{T}, FEVectorBlock{T}}} where T","page":"Finite Element Spaces and Arrays","title":"LinearAlgebra.dot","text":"dot(a::FEVectorBlock{T}, b::FEVectorBlock{T}) -> Any\n\n\nScalar product between two FEVEctorBlocks\n\n\n\n\n\n","category":"method"},{"location":"fespace/#FEMatrix","page":"Finite Element Spaces and Arrays","title":"FEMatrix","text":"","category":"section"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"A FEMatrix consists of FEMatrixBlocks that share a common ExtendableSparseMatrix. Each block is associated to two FESpaces and can only write into a submatrix of the common sparse matrix specified by offsets. It also acts as a two-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"Finite Element Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fematrix.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"struct FEMatrix{TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}\n\nan AbstractMatrix (e.g. an ExtendableSparseMatrix) with an additional layer of several FEMatrixBlock subdivisions each carrying coefficients for their associated pair of FESpaces\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{APTX}, Tuple{FETypeX}, Tuple{TiG}, Tuple{TvG}, Tuple{TvM}, Tuple{String, FESpace{TvG, TiG, FETypeX, APTX}}} where {TvM, TvG, TiG, FETypeX, APTX}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{TvM,TiM}(name::String, FES::FESpace{TvG,TiG,FETypeX,APTX}) where {TvG,TiG,FETypeX,APTX}\n\nCreates FEMatrix with one square block (FES,FES).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{APTY}, Tuple{APTX}, Tuple{FETypeY}, Tuple{FETypeX}, Tuple{TiG}, Tuple{TvG}, Tuple{TvM}, Tuple{String, FESpace{TvG, TiG, FETypeX, APTX}, FESpace{TvG, TiG, FETypeY, APTY}}} where {TvM, TvG, TiG, FETypeX, FETypeY, APTX, APTY}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{TvM,TiM}(name::String, FESX::FESpace{TvG,TiG,FETypeX,APTX}, FESY::FESpace{TvG,TiG,FETypeY,APTY}) where {TvG,TiG,FETypeX,FETypeY,APTX,APTY}\n\nCreates FEMatrix with one rectangular block (FESX,FESY).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{TiG}, Tuple{TvG}, Tuple{TvM}, Tuple{String, Vector{<:FESpace{TvG, TiG}}}} where {TvM, TvG, TiG}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEMatrix with blocks (FESX[i],FESY[j]) (enumerated row-wise).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrixBlock","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrixBlock","text":"struct FEMatrixBlock{TvM, TiM, TvG, TiG, FETypeX, FETypeY, APTX, APTY} <: AbstractArray{TvM, 2}\n\nblock of an FEMatrix that carries coefficients for an associated pair of FESpaces and can be assigned as an two-dimensional AbstractArray (getindex, setindex, size)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.fill!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrixBlock{Tv, Ti}, Any}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"Base.fill!","text":"fill!(B::FEMatrixBlock{Tv, Ti}, value)\n\n\nCustom fill function for FEMatrixBlock (only fills the block, not the complete FEMatrix).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.length-Union{Tuple{FEMatrix{TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}}, Tuple{nbtotal}, Tuple{nbcol}, Tuple{nbrow}, Tuple{TiG}, Tuple{TvG}, Tuple{TiM}, Tuple{TvM}} where {TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}","page":"Finite Element Spaces and Arrays","title":"Base.length","text":"Custom length function for FEMatrix that gives the total number of defined FEMatrixBlocks in it\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Union{Tuple{nbtotal}, Tuple{nbcol}, Tuple{nbrow}, Tuple{TiG}, Tuple{TvG}, Tuple{TiM}, Tuple{TvM}, Tuple{IO, FEMatrix{TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}}} where {TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}","page":"Finite Element Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEM::FEMatrix{TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal})\n\n\nCustom show function for FEMatrix that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.size-Tuple{FEMatrixBlock}","page":"Finite Element Spaces and Arrays","title":"Base.size","text":"size(FEB::FEMatrixBlock) -> Vector{Int64}\n\n\nCustom size function for FEMatrixBlock that gives the size of the block (that coressponds to the number of degrees of freedoms in X and Y)\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.size-Union{Tuple{FEMatrix{TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}}, Tuple{nbtotal}, Tuple{nbcol}, Tuple{nbrow}, Tuple{TiG}, Tuple{TvG}, Tuple{TiM}, Tuple{TvM}} where {TvM, TiM, TvG, TiG, nbrow, nbcol, nbtotal}","page":"Finite Element Spaces and Arrays","title":"Base.size","text":"Custom size function for FEMatrix that gives the number of rows and columns of the FEBlock overlay\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.add!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrix{Tv, Ti}, FEMatrix{Tv, Ti}}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.add!","text":"add!(A::FEMatrix{Tv, Ti}, B::FEMatrix{Tv, Ti}; factor, transpose)\n\n\nAdds FEMatrix B to FEMatrix A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrixBlock{Tv, Ti}, FEMatrixBlock{Tv, Ti}}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock{Tv, Ti}, B::FEMatrixBlock{Tv, Ti}; factor, transpose)\n\n\nAdds FEMatrixBlock B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrixBlock{Tv}, ExtendableSparseMatrix{Tv, Ti}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock{Tv}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}; factor, transpose)\n\n\nAdds ExtendableSparseMatrix B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractVector{Tv}, FEMatrixBlock{Tv, Ti}, AbstractVector{Tv}}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::AbstractArray{Tv, 1}, B::FEMatrixBlock{Tv, Ti}, b::AbstractArray{Tv, 1}; factor, transposed)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEVectorBlock{Tv}, ExtendableSparseMatrix{Tv, Ti}, FEVectorBlock{Tv}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock{Tv}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b::FEVectorBlock{Tv}; factor)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEVectorBlock{Tv}, FEMatrixBlock{Tv, Ti}, FEVectorBlock{Tv}}} where {Tv, Ti}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock{Tv}, B::FEMatrixBlock{Tv, Ti}, b::FEVectorBlock{Tv}; factor, transposed)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.ldrdmatmul-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractVector{Tv}, AbstractVector{Tv}, ExtendableSparseMatrix{Tv, Ti}, AbstractVector{Tv}, AbstractVector{Tv}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.ldrdmatmul","text":"ldrdmatmul(a1::AbstractArray{Tv, 1}, a2::AbstractArray{Tv, 1}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b1::AbstractArray{Tv, 1}, b2::AbstractArray{Tv, 1}; factor) -> Any\n\n\nComputes vector'-matrix-vector product (a1-a2)'B(b1-b2).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.lrmatmul-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractVector{Tv}, ExtendableSparseMatrix{Tv, Ti}, AbstractVector{Tv}}} where {Tv, Ti<:Integer}","page":"Finite Element Spaces and Arrays","title":"GradientRobustMultiPhysics.lrmatmul","text":"lrmatmul(a::AbstractArray{Tv, 1}, B::ExtendableSparseMatrix{Tv, Ti<:Integer}, b::AbstractArray{Tv, 1}; factor) -> Any\n\n\nComputes vector'-matrix-vector product a'Bb.\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#FE-Basis-Evaluators","page":"FE Basis Evaluators","title":"FE Basis Evaluators","text":"","category":"section"},{"location":"febasisevaluators/","page":"FE Basis Evaluators","title":"FE Basis Evaluators","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"febasisevaluator.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.FEBasisEvaluator-Union{Tuple{FEAT}, Tuple{AT}, Tuple{FEOP}, Tuple{EG}, Tuple{FEType}, Tuple{TiG}, Tuple{TvG}, Tuple{T}, Tuple{FESpace{TvG, TiG, FEType, FEAT}, QuadratureRule}} where {T, TvG, TiG, FEType, EG, FEOP, AT, FEAT}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.FEBasisEvaluator","text":"FEBasisEvaluator{T,EG,FEOP,AT}(FE::FESpace, qf::QuadratureRule; mutable = false) where {T <: Real, EG <: AbstractElementGeometry, FEOP <: AbstractFunctionOperator, AT <: AssemblyType}\n\nConstructor for an evaluator for the basis of the FESpace FES evaluated with the function operator FEOP on the given element geometry EG with AssemblyType AT at the points of the quadrature rule qf.\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.eval_febe!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{AT}, Tuple{EG}, Tuple{FEOP}, Tuple{FEType}, Tuple{TiG}, Tuple{TvG}, Tuple{T}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Int64, Int64, Int64, Any}} where {T, TvG, TiG, FEType, FEOP, EG, AT, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.eval_febe!","text":"    eval_febe!(result, FEBE::FEBasisEvaluator, j::Int, i::Int, offset::Int = 0, factor = 1)\n\nEvaluate the j-th basis function of the FEBasisEvaluator at the i-th quadrature point adn writes the (possibly vector-valued) evaluation into result (beginning at offset and with the specified factor).\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.eval_febe!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{AT}, Tuple{EG}, Tuple{FEOP}, Tuple{FEType}, Tuple{TiG}, Tuple{TvG}, Tuple{T}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64, Any}, Tuple{Vector{T}, FEBasisEvaluator{T, TvG, TiG, FEType, EG, FEOP, AT, edim, ncomponents, ndofs}, Vector{T}, Int64, Any, Any}} where {T, TvG, TiG, FEType, FEOP, EG, AT, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.eval_febe!","text":"    eval_febe!(result, FEBE::FEBasisEvaluator, j::Int, i::Int, offset::Int = 0, factor = 1)\n\nEvaluates the linear combination of the basisfunction with given coefficients at the i-th quadrature point and writes the (possibly vector-valued) evaluation into result (beginning at offset and with the specified factor).\n\n\n\n\n\n","category":"method"},{"location":"febasisevaluators/#GradientRobustMultiPhysics.update_febe!-Union{Tuple{ndofs}, Tuple{ncomponents}, Tuple{edim}, Tuple{TiG}, Tuple{TvG}, Tuple{T}, Tuple{GradientRobustMultiPhysics.StandardFEBasisEvaluator{T, TvG, TiG, <:AbstractH1FiniteElement, <:AbstractElementGeometry, <:id, <:AssemblyType, edim, ncomponents, ndofs}, Any}} where {T, TvG, TiG, edim, ncomponents, ndofs}","page":"FE Basis Evaluators","title":"GradientRobustMultiPhysics.update_febe!","text":"    update_febe!(FEBE::FEBasisEvaluator, item::Int)\n\nUpdate the FEBasisEvaluator on the given item number of the grid items associated to the AssemblyType. During the update the FEBasisevaluator computes all evaluations of all basis functions at all quadrature points and stores them in FEBE.cvals. From there they can be accessed directly or via the eval_febe! functions.\n\n\n\n\n\n","category":"method"},{"location":"itemintegrators/#Item-Integrators","page":"Item Integrators","title":"Item Integrators","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Item integrators are one of the Assembly Patterns that help to compute certain quantities of the Solution, like a posteriori errors estimators, norms, drag/lift coefficients or other statistics.","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"ItemIntegrator\nL2ErrorIntegrator\nL2NormIntegrator\nL2DifferenceIntegrator","category":"page"},{"location":"itemintegrators/#GradientRobustMultiPhysics.ItemIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.ItemIntegrator","text":"ItemIntegrator(operators) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, Float64, ON_CELLS, Float64, Int32, NoAction}\nItemIntegrator(operators, action; T, AT, regions, name) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, Float64, ON_CELLS, Float64, Int32}\n\n\nCreates an ItemIntegrator assembly pattern based on:\n\noperators : operators that should be evaluated for the coressponding FESpace (last one refers to test function)\naction    : an Action with kernel of interface (result, input, kwargs) that takes input (= all but last operator evaluations) and computes result to be dot-producted with test function evaluation             (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\nT         : expected NumberType for evaluation output\nAT        : specifies on which entities of the grid the ItemINtegrator is evaluated\nregions   : specifies in which regions the operator should assemble, default [0] means all regions\nname      : name for this LinearForm that is used in print messages\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2ErrorIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2ErrorIntegrator","text":"L2ErrorIntegrator(compare_data::GradientRobustMultiPhysics.AbstractUserDataType) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\nL2ErrorIntegrator(compare_data::GradientRobustMultiPhysics.AbstractUserDataType, operator; T, quadorder, name, AT, factor, regions, time) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that compares discrete FEVectorBlock operator-evaluations against the given comparedata and returns the L2-error || comparedata(x) - factor*discrete(x) ||. If quadorder is left on \"auto\" two times the quadorder of the data is used in the evaluation.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2NormIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2NormIntegrator","text":"L2NormIntegrator(ncomponents::Int64, operator; T, AT, name, quadorder, regions) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that computes the L2 norm of an operator evaluation where ncomponents is the expected length of the operator evaluation.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.L2DifferenceIntegrator","page":"Item Integrators","title":"GradientRobustMultiPhysics.L2DifferenceIntegrator","text":"L2DifferenceIntegrator(ncomponents::Int64, operator; AT, T, name, quadorder, regions) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that computes the L2 norm difference between two arguments evalauted with the same operator (or with different operators if operator is an array) where ncomponents is the expected length of each operator evaluation. Note that all arguments in an evaluation call need to be defined on the same grid !\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#Evaluation","page":"Item Integrators","title":"Evaluation","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"There are two possibilities to evaluate an ItemIntegrator, on each item (with evaluate!) or globally (with evaluate):","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"evaluate!\nevaluate","category":"page"},{"location":"itemintegrators/#GradientRobustMultiPhysics.evaluate!","page":"Item Integrators","title":"GradientRobustMultiPhysics.evaluate!","text":"function evaluate!(\n    result,                     # target for result\n    PE::PointEvaluator,         \n    xref,                       # local coordinates inside item\n    item                        # item number\n    ) where  {T, Tv, Ti, FEType, FEOP, AT, ACT}\n\nEvaluates the PointEvaluator at the point with the given local coordinates insides the item with the specified item number. (To get the local coordinates, currently a CellFinder has to be maintained manually, this might change in future.)\n\n\n\n\n\nfunction evaluate!(\n    b::AbstractArray{T,2},\n    AP::AssemblyPattern{APT,T,AT},\n    FEB::Union{<:FEVector{T,Tv,Ti},<:FEVectorBlock{T,Tv,Ti},Array{<:FEVectorBlock{T,Tv,Ti},1}};\n    skip_preps::Bool = false) where {APT <: APT_ItemIntegrator, T<: Real, AT <: AssemblyType, Tv, Ti}\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlock or FEVector FEB into given two-dimensional Array b.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#GradientRobustMultiPhysics.evaluate","page":"Item Integrators","title":"GradientRobustMultiPhysics.evaluate","text":"function evaluate(PE::PointEvaluator)\n\nReturns the function     (result,xref,cell) –> evaluate!(result,PE,xref,cell)\n\n(e.g. to be used as a callback function in vectorplot!)\n\n\n\n\n\nfunction evaluate(\n    AP::AssemblyPattern{APT,T,AT},\n    FEB::Union{<:FEVector{T,Tv,Ti},<:FEVectorBlock{T,Tv,Ti},Array{<:FEVectorBlock{T,Tv,Ti},1}};\n    skip_preps::Bool = false) where {APT <: APT_ItemIntegrator, T<: Real, AT <: AssemblyType, Tv, Ti}\n\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlock or FEVector FEB, only returns accumulation over all items.\n\n\n\n\n\n","category":"function"},{"location":"itemintegrators/#Noteworthy-Examples","page":"Item Integrators","title":"Noteworthy Examples","text":"","category":"section"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Examples 204 and A06 use ItemIntegrators for a posteriori error estimation and refinement indicators.","category":"page"},{"location":"itemintegrators/","page":"Item Integrators","title":"Item Integrators","text":"Example 224 uses ItemIntegrators to calculate drag and lift coefficients.","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/#:-Poisson-L-shape-Adaptive-Mesh-Refinement","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"","category":"section"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"(source code)","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"This example computes the standard-residual error estimator for the H^1 error e = u - u_h of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"eta^2(u_h) = sum_T in mathcalT lvert T rvert  f + Delta u_h ^2_L^2(T)\n+ sum_F in mathcalF lvert F rvert  nabla u_h cdot mathbfn ^2_L^2(F)","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"This example script showcases the evaluation of 2nd order derivatives like the Laplacian and adaptive mesh refinement.","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"module Example210_PoissonLshapeAdaptive2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# exact solution u for the Poisson problem\nfunction u!(result,x)\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, maxdofs = 5000, theta = 1//3, order = 2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite element\n    FEType = H1Pk{1,2,order}\n\n    # negotiate data functions to the package\n    u = DataFunction(u!, [1,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 5)\n    ∇u = ∇(u)\n\n    # setup Poisson problem\n    Problem = PoissonProblem()\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = u)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # setup exact error evaluations\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(∇u, Gradient)\n\n    # define error estimator\n    # kernel for jump term : |F| ||[[grad(u_h)*n_F]]||^2_L^2(F)\n    xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n    xFaceNormals::Array{Float64,2} = xgrid[FaceNormals]\n    xCellVolumes::Array{Float64,1} = xgrid[CellVolumes]\n    function L2jump_integrand(result, input, item)\n        result[1] = ((input[1]*xFaceNormals[1,item[1]] + input[2]*xFaceNormals[2,item[1]])^2) * xFaceVolumes[item[1]]\n        return nothing\n    end\n    # kernel for volume term : |T| * ||f + Laplace(u_h)||^2_L^2(T)\n    # note: f = 0 here, but integrand can also be made x-dpendent to allow for non-homogeneous rhs\n    function L2vol_integrand(result, input, item)\n        result[1] = input[1]^2 * xCellVolumes[item[1]]\n        return nothing\n    end\n    # ... which generates an action...\n    eta_jumps_action = Action(L2jump_integrand, [1,2]; name = \"kernel of η (jumps)\", dependencies = \"I\", bonus_quadorder = order-1)\n    eta_vol_action = Action(L2vol_integrand, [1,1]; name = \"kernel of η (vol)\", dependencies = \"I\", bonus_quadorder = order-1)\n    # ... which is used inside an ItemIntegrator\n    ηF = ItemIntegrator([Jump(Gradient)],eta_jumps_action; AT = ON_IFACES, name = \"η_F\")\n    ηT = ItemIntegrator([Laplacian],eta_vol_action; name = \"η_T\")\n\n    NDofs = zeros(Int, 0)\n    ResultsL2 = zeros(Float64, 0)\n    ResultsH1 = zeros(Float64, 0)\n    Resultsη = zeros(Float64, 0)\n    Solution = nothing\n    ndofs = 0\n    level = 0\n    while ndofs < maxdofs\n        level += 1\n\n        # create a solution vector and solve the problem\n        println(\"------- LEVEL $level\")\n        @time begin\n            FES = FESpace{FEType}(xgrid)\n            Solution = FEVector{Float64}(\"u_h\",FES)\n            solve!(Solution, Problem)\n            ndofs = length(Solution[1])\n            push!(NDofs, ndofs)\n            println(\"\\t ndof =  $ndofs\")\n            print(\"@time  solver =\")\n        end\n\n        # calculate local error estimator contributions\n        @time begin\n            xFaceVolumes = xgrid[FaceVolumes]\n            xFaceNormals = xgrid[FaceNormals]\n            xCellVolumes = xgrid[CellVolumes]\n            vol_error = zeros(Float64,1,num_sources(xgrid[CellNodes]))\n            jump_error = zeros(Float64,1,num_sources(xgrid[FaceNodes]))\n            evaluate!(vol_error,ηT,Solution[1])\n            evaluate!(jump_error,ηF,Solution[1])\n\n            # calculate total estimator\n            push!(Resultsη, sqrt(sum(jump_error) + sum(vol_error)))\n            print(\"@time  η eval =\")\n        end\n\n        # calculate exact L2 error, H1 error\n        @time begin\n            push!(ResultsL2, sqrt(evaluate(L2Error,Solution[1])))\n            push!(ResultsH1, sqrt(evaluate(H1Error,Solution[1])))\n            print(\"@time  e eval =\")\n        end\n\n        if ndofs >= maxdofs\n            break;\n        end\n\n        # mesh refinement\n        @time begin\n            if theta >= 1 ## uniform mesh refinement\n                xgrid = uniform_refine(xgrid)\n            else ## adaptive mesh refinement\n                # compute refinement indicators\n                nfaces = num_sources(xgrid[FaceNodes])\n                refinement_indicators::Array{Float64,1} = view(jump_error,1,:)\n                xFaceCells = xgrid[FaceCells]\n                cell::Int = 0\n                for face = 1 : nfaces, k = 1 : 2\n                    cell = xFaceCells[k,face]\n                    if cell > 0\n                        refinement_indicators[face] += vol_error[1,cell]\n                    end\n                end\n\n                # refine by red-green-blue refinement (incl. closuring)\n                facemarker = bulk_mark(xgrid, refinement_indicators, theta; indicator_AT = ON_FACES)\n                xgrid = RGB_refine(xgrid, facemarker)\n            end\n            print(\"@time  refine =\")\n        end\n        println(\"\\t    η =  $(Resultsη[level])\\n\\t    e =  $(ResultsH1[level])\")\n    end\n\n    # plot\n    p=GridVisualizer(; Plotter = Plotter, layout = (2,2), clear = true, resolution = (1000,1000))\n    scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], levels = 7, title = \"u_h\")\n    convergencehistory!(p[1,2], NDofs, [ResultsL2 ResultsH1 Resultsη]; add_h_powers = [order,order+1], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\"])\n    gridplot!(p[2,1], xgrid; linewidth = 1)\n    gridplot!(p[2,2], xgrid; linewidth = 1, xlimits = [-0.0001,0.0001], ylimits = [-0.0001,0.0001])\n\n    # print convergence history\n    print_convergencehistory(NDofs, [ResultsL2 ResultsH1 Resultsη]; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| ∇(u - u_h) ||\", \"η\"])\nend\nend","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"Default output:","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"julia> Example210_PoissonLshapeAdaptive2D.main()\n------- LEVEL 1\n\t ndof =  21\n@time  solver =  1.256632 seconds (1.50 M allocations: 89.232 MiB, 2.61% gc time, 99.75% compilation time)\n@time  η eval =  1.932659 seconds (1.40 M allocations: 81.831 MiB, 1.66% gc time, 99.88% compilation time)\n@time  e eval =  3.008035 seconds (3.18 M allocations: 182.390 MiB, 2.13% gc time, 99.91% compilation time)\n@time  refine =  0.077966 seconds (87.35 k allocations: 4.923 MiB, 99.85% compilation time)\n\t    η =  1.2064583360169907\n\t    e =  0.20764746516243865\n------- LEVEL 2\n\t ndof =  41\n@time  solver =  0.002071 seconds (3.48 k allocations: 325.070 KiB)\n@time  η eval =  0.000679 seconds (1.43 k allocations: 86.469 KiB)\n@time  e eval =  0.000857 seconds (970 allocations: 78.234 KiB)\n@time  refine =  0.000089 seconds (49 allocations: 5.484 KiB)\n\t    η =  0.699363303780635\n\t    e =  0.12808914488126533\n------- LEVEL 3\n\t ndof =  67\n@time  solver =  0.002288 seconds (3.70 k allocations: 380.812 KiB)\n@time  η eval =  0.000766 seconds (1.45 k allocations: 88.281 KiB)\n@time  e eval =  0.001313 seconds (970 allocations: 78.609 KiB)\n@time  refine =  0.000042 seconds (49 allocations: 6.219 KiB)\n\t    η =  0.45213770201550596\n\t    e =  0.0826956162676058\n------- LEVEL 4\n\t ndof =  93\n@time  solver =  0.002075 seconds (3.93 k allocations: 495.555 KiB)\n@time  η eval =  0.000712 seconds (1.47 k allocations: 90.125 KiB)\n@time  e eval =  0.001674 seconds (970 allocations: 78.984 KiB)\n@time  refine =  0.000041 seconds (52 allocations: 9.953 KiB)\n\t    η =  0.30443683244048686\n\t    e =  0.05537088982183001\n------- LEVEL 5\n\t ndof =  119\n@time  solver =  0.002231 seconds (4.15 k allocations: 557.992 KiB)\n@time  η eval =  0.000761 seconds (1.49 k allocations: 91.984 KiB)\n@time  e eval =  0.002093 seconds (970 allocations: 79.484 KiB)\n@time  refine =  0.000044 seconds (53 allocations: 13.391 KiB)\n\t    η =  0.2203282351651377\n\t    e =  0.03965969913361387\n------- LEVEL 6\n\t ndof =  145\n@time  solver =  0.002410 seconds (4.37 k allocations: 653.453 KiB)\n@time  η eval =  0.000800 seconds (1.51 k allocations: 93.781 KiB)\n@time  e eval =  0.002685 seconds (970 allocations: 79.797 KiB)\n@time  refine =  0.000049 seconds (60 allocations: 15.203 KiB)\n\t    η =  0.17627442243022598\n\t    e =  0.03132434391645204\n------- LEVEL 7\n\t ndof =  192\n@time  solver =  0.002915 seconds (4.79 k allocations: 757.078 KiB)\n@time  η eval =  0.000914 seconds (1.54 k allocations: 96.859 KiB)\n@time  e eval =  0.003256 seconds (970 allocations: 80.422 KiB)\n@time  refine =  0.000057 seconds (64 allocations: 16.656 KiB)\n\t    η =  0.14099823000025677\n\t    e =  0.024700543922290406\n------- LEVEL 8\n\t ndof =  257\n@time  solver =  0.003487 seconds (5.27 k allocations: 989.922 KiB)\n@time  η eval =  0.001062 seconds (1.59 k allocations: 101.812 KiB)\n@time  e eval =  0.004535 seconds (970 allocations: 81.484 KiB)\n@time  refine =  0.000065 seconds (65 allocations: 18.781 KiB)\n\t    η =  0.11095486274991226\n\t    e =  0.019413443504801158\n------- LEVEL 9\n\t ndof =  325\n@time  solver =  0.004218 seconds (5.79 k allocations: 1.138 MiB)\n@time  η eval =  0.001236 seconds (1.64 k allocations: 106.891 KiB)\n@time  e eval =  0.005527 seconds (972 allocations: 83.078 KiB)\n@time  refine =  0.000079 seconds (72 allocations: 32.422 KiB)\n\t    η =  0.08461684077566964\n\t    e =  0.014148054973920325\n------- LEVEL 10\n\t ndof =  411\n@time  solver =  0.004810 seconds (6.37 k allocations: 1.385 MiB)\n@time  η eval =  0.001533 seconds (1.70 k allocations: 112.859 KiB)\n@time  e eval =  0.007007 seconds (970 allocations: 83.922 KiB)\n@time  refine =  0.000093 seconds (90 allocations: 42.797 KiB)\n\t    η =  0.06451540417832093\n\t    e =  0.010765787581050085\n------- LEVEL 11\n\t ndof =  559\n@time  solver =  0.006378 seconds (7.62 k allocations: 1.818 MiB)\n@time  η eval =  0.001918 seconds (1.81 k allocations: 123.438 KiB)\n@time  e eval =  0.009498 seconds (970 allocations: 86.297 KiB)\n@time  refine =  0.000113 seconds (105 allocations: 48.391 KiB)\n\t    η =  0.048488321655552676\n\t    e =  0.00803496729772224\n------- LEVEL 12\n\t ndof =  765\n@time  solver =  0.008196 seconds (9.58 k allocations: 2.394 MiB)\n@time  η eval =  0.002401 seconds (2.17 k allocations: 140.953 KiB)\n@time  e eval =  0.013074 seconds (970 allocations: 89.297 KiB)\n@time  refine =  0.000153 seconds (125 allocations: 55.016 KiB)\n\t    η =  0.03531579377387808\n\t    e =  0.005826860655486329\n------- LEVEL 13\n\t ndof =  1049\n@time  solver =  0.010469 seconds (12.15 k allocations: 3.206 MiB)\n@time  η eval =  0.003266 seconds (3.23 k allocations: 174.188 KiB)\n@time  e eval =  0.017889 seconds (970 allocations: 93.797 KiB)\n@time  refine =  0.000178 seconds (144 allocations: 79.844 KiB)\n\t    η =  0.02616118221512843\n\t    e =  0.004305764740168458\n------- LEVEL 14\n\t ndof =  1407\n@time  solver =  0.013720 seconds (16.42 k allocations: 4.012 MiB)\n@time  η eval =  0.004338 seconds (5.36 k allocations: 228.406 KiB)\n@time  e eval =  0.024276 seconds (12.87 k allocations: 285.219 KiB)\n@time  refine =  0.000236 seconds (181 allocations: 120.047 KiB)\n\t    η =  0.019132321073495273\n\t    e =  0.0031282492364458733\n------- LEVEL 15\n\t ndof =  1899\n@time  solver =  0.018209 seconds (22.53 k allocations: 5.546 MiB)\n@time  η eval =  0.005476 seconds (8.39 k allocations: 304.766 KiB)\n@time  e eval =  0.032685 seconds (30.54 k allocations: 568.750 KiB)\n@time  refine =  0.000296 seconds (243 allocations: 136.734 KiB)\n\t    η =  0.01421474837643691\n\t    e =  0.0023170796906174028\n------- LEVEL 16\n\t ndof =  2632\n@time  solver =  0.024642 seconds (31.65 k allocations: 6.784 MiB)\n@time  η eval =  0.007453 seconds (12.91 k allocations: 418.875 KiB)\n@time  e eval =  0.045568 seconds (56.74 k allocations: 989.484 KiB)\n@time  refine =  0.000416 seconds (301 allocations: 197.016 KiB)\n\t    η =  0.01031098486331003\n\t    e =  0.0016816671597917907\n------- LEVEL 17\n\t ndof =  3586\n@time  solver =  0.032604 seconds (43.37 k allocations: 8.916 MiB)\n@time  η eval =  0.009484 seconds (18.79 k allocations: 566.031 KiB)\n@time  e eval =  0.062101 seconds (90.91 k allocations: 1.502 MiB)\n@time  refine =  0.000541 seconds (381 allocations: 290.766 KiB)\n\t    η =  0.007624866774590696\n\t    e =  0.0012430817816310971\n------- LEVEL 18\n\t ndof =  4834\n@time  solver =  0.043372 seconds (58.28 k allocations: 11.840 MiB)\n@time  η eval =  0.012666 seconds (26.54 k allocations: 761.016 KiB)\n@time  e eval =  0.084263 seconds (136.02 k allocations: 2.209 MiB)\n@time  refine =  0.000778 seconds (499 allocations: 433.672 KiB)\n\t    η =  0.00566209063946157\n\t    e =  0.0009215730064109894\n------- LEVEL 19\n\t ndof =  6545\n@time  solver =  0.089447 seconds (79.58 k allocations: 16.576 MiB, 31.84% gc time)\n@time  η eval =  0.016939 seconds (37.16 k allocations: 1.004 MiB)\n@time  e eval =  0.113978 seconds (197.85 k allocations: 3.178 MiB)\n\n    ndofs   |   || u - u_h ||    order | || ∇(u - u_h) ||   order |         η          order |\n============|==========================|==========================|==========================|\n        21  |     2.513e-02      0.00  |     2.076e-01      0.00  |     1.206e+00      0.00  |\n        41  |     1.084e-02      2.51  |     1.281e-01      1.44  |     6.994e-01      1.63  |\n        67  |     4.344e-03      3.72  |     8.270e-02      1.78  |     4.521e-01      1.78  |\n        93  |     2.300e-03      3.88  |     5.537e-02      2.45  |     3.044e-01      2.41  |\n       119  |     1.771e-03      2.12  |     3.966e-02      2.71  |     2.203e-01      2.62  |\n       145  |     1.650e-03      0.72  |     3.132e-02      2.39  |     1.763e-01      2.26  |\n       192  |     1.103e-03      2.87  |     2.470e-02      1.69  |     1.410e-01      1.59  |\n       257  |     7.240e-04      2.89  |     1.941e-02      1.65  |     1.110e-01      1.64  |\n       325  |     3.550e-04      6.07  |     1.415e-02      2.70  |     8.462e-02      2.31  |\n       411  |     2.840e-04      1.90  |     1.077e-02      2.33  |     6.452e-02      2.31  |\n       559  |     1.869e-04      2.72  |     8.035e-03      1.90  |     4.849e-02      1.86  |\n       765  |     1.041e-04      3.73  |     5.827e-03      2.05  |     3.532e-02      2.02  |\n      1049  |     6.588e-05      2.90  |     4.306e-03      1.92  |     2.616e-02      1.90  |\n      1407  |     4.348e-05      2.83  |     3.128e-03      2.18  |     1.913e-02      2.13  |\n      1899  |     2.797e-05      2.94  |     2.317e-03      2.00  |     1.421e-02      1.98  |\n      2632  |     1.699e-05      3.06  |     1.682e-03      1.96  |     1.031e-02      1.97  |\n      3586  |     1.086e-05      2.89  |     1.243e-03      1.95  |     7.625e-03      1.95  |\n      4834  |     6.559e-06      3.38  |     9.216e-04      2.00  |     5.662e-03      1.99  |\n      6545  |     3.842e-06      3.53  |     6.652e-04      2.15  |     4.110e-03      2.11  |","category":"page"},{"location":"examples/Example210_PoissonLshapeAdaptive2D/","page":"210 : Poisson L-shape Adaptive Mesh Refinement","title":"210 : Poisson L-shape Adaptive Mesh Refinement","text":"(Image: )","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/#:-Reaction-Convection-Diffusion-Problem-SUPG-2D","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"","category":"section"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"(source code)","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"This example is almost similar to the last example and also computes the solution of some convection-diffusion problem","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"-nu Delta u + mathbfbeta cdot nabla u + alpha u = f quad textin  Omega","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"with some diffusion coefficient  nu, some vector-valued function  mathbfbeta, some scalar-valued function alpha and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"We prescribe an analytic solution with mathbfbeta = (10) and alpha = 01 and check the L2 and H1 error convergence of the method on a series of uniformly refined meshes. We also compare with the error of a simple nodal interpolation and plot the solution and the norm of its gradient.","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"For small nu, the convection term dominates and pollutes the accuracy of the method. This time a SUPG stabilisation is added to improve things.","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"module Example204_ReactionConvectionDiffusionSUPG2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# coefficient functions\nconst β = DataFunction([1,0]; name = \"β\")\nconst α = DataFunction([0.1]; name = \"α\")\n\n# problem data and expected exact solution\nfunction exact_solution!(result,x)\n    result[1] = x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1]\nend\nfunction exact_solution_rhs!(ν)\n    function closure(result,x)\n        # diffusion part\n        result[1] = -ν*(2*x[2]*(x[2]-1) + 2*x[1]*(x[1]-1))\n        # convection part (beta * grad(u))\n        eval_data!(β)\n        result[1] += β.val[1] * (x[2]*(2*x[1]-1)*(x[2]-1) + 1)\n        result[1] += β.val[2] * (x[1]*(2*x[2]-1)*(x[1]-1))\n        # reaction part (alpha*u)\n        eval_data!(α)\n        result[1] += α.val[1] * (x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1])\n        return nothing\n    end\nend\n\n# custom bilinearform that can assemble the full PDE operator\nfunction ReactionConvectionDiffusionOperator(α, β, ν)\n    function action_kernel!(result, input)\n        # input = [u,∇u] as a vector of length 3\n        eval_data!(β)\n        eval_data!(α)\n        result[1] = α.val[1] * input[1] + β.val[1] * input[2] + β.val[2] * input[3]\n        result[2] = ν * input[2]\n        result[3] = ν * input[3]\n        # result will be multiplied with [v,∇v]\n        return nothing\n    end\n    action = Action(action_kernel!, [3,3]; bonus_quadorder = max(α.bonus_quadorder,β.bonus_quadorder))\n    return BilinearForm([OperatorPair{Identity,Gradient},OperatorPair{Identity,Gradient}], action; name = \"ν(∇u,∇v) + (αu + β⋅∇u, v)\", transposed_assembly = true)\nend\n\n# function that provides the SUPG left-hand side operator\n#       τ (h^2 (-ν Δu + αu + β⋅∇u), β⋅∇v)\nfunction SUPGOperator_LHS(α, β, ν, τ, xCellDiameters)\n    function action_kernel!(result, input, item)\n        # input = [u_h,∇u_h,Δu_h] as a vector of length 4\n        eval_data!(β)\n        eval_data!(α)\n        # compute residual -νΔu_h + (β⋅∇)u_h + αu_h\n        result[1] = - ν * input[4] + α.val[1] * input[1] + β.val[1] * input[2] + β.val[2] * input[3]\n        # multiply stabilisation factor\n        result[1] *= τ * xCellDiameters[item[1]]^2\n        # compute coefficients for ∇ eval of test function v_h\n        result[2] = result[1] * β.val[2]  # will be multiplied with ∇v_h[2]\n        result[1] = result[1] * β.val[1]  # will be multiplied with ∇v_h[1]\n        return nothing\n    end\n    action = Action(action_kernel!, [2,4]; dependencies = \"I\", bonus_quadorder = max(α.bonus_quadorder,β.bonus_quadorder))\n    return BilinearForm([OperatorTriple{Identity,Gradient,Laplacian},Gradient], action; name = \"τ (h^2 (-ν Δu + αu + β⋅∇u), β⋅∇v)\", transposed_assembly = true)\nend\n\n# function that provides the SUPG right-hand side operator\n#                  τ (h^2 f, β⋅∇v)\nfunction SUPGOperator_RHS(f, β, τ, xCellDiameters)\n    function action_kernel!(result, input, x, item)\n        # input = [v,∇v] as a vector of length 3\n        eval_data!(β)\n        eval_data!(f,x)\n        # compute f times stabilisation factor\n        result[1] = f.val[1] * τ * xCellDiameters[item[1]]^2\n        result[2] = result[1] * β.val[2]  # will be multiplied with ∇v_h[2]\n        result[1] = result[1] * β.val[1]  # will be multiplied with ∇v_h[1]\n        return nothing\n    end\n    action = Action(action_kernel!, [2,2]; dependencies = \"XI\", bonus_quadorder = max(f.bonus_quadorder,β.bonus_quadorder))\n    return LinearForm(Gradient, action; name = \"τ (h^2 f, β⋅∇v)\")\nend\n\n# the SUPG stabilisation is weighted by powers of the cell diameter\n# so we need a function that computes them\nfunction getCellDiameters(xgrid)\n    xCellFaces = xgrid[CellFaces]\n    xFaceVolumes = xgrid[FaceVolumes]\n    xCellDiameters = zeros(Float64, num_sources(xCellFaces))\n    for cell = 1 : length(xCellDiameters)\n        xCellDiameters[cell] = maximum(xFaceVolumes[xCellFaces[:,cell]])\n    end\n    return xCellDiameters\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, ν = 1e-5, τ = 10, nlevels = 5, order = 2)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load initial mesh\n    xgrid = grid_unitsquare(Triangle2D)\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_solution!, [1,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 4)\n    ∇u = ∇(u)\n    f = DataFunction(exact_solution_rhs!(ν), [1,2]; name = \"f\", dependencies = \"X\", bonus_quadorder = 5)\n\n    # set finite element type according to chosen order\n    FEType = H1Pk{1,2,order}\n\n    # create PDE description and assign operator and data\n    Problem = PDEDescription(\"reaction-convection-diffusion problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"reaction-convection-diffusion equation\")\n    add_operator!(Problem, [1,1], ReactionConvectionDiffusionOperator(α,β,ν))\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n\n    # add SUPG stabilisation and remember operator positions\n    if τ > 0\n        xCellDiameters = getCellDiameters(xgrid)\n        supg_id = add_operator!(Problem, [1,1], SUPGOperator_LHS(α,β,ν,τ,xCellDiameters))\n        supg_id2 = add_rhsdata!(Problem, 1, SUPGOperator_RHS(f,β,τ,xCellDiameters))\n    end\n\n    # finally we have a look at the defined problem\n    @show Problem\n\n    # define ItemIntegrators for L2/H1 error computation and some arrays to store the errors\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(∇u, Gradient)\n    Results = zeros(Float64,nlevels,4); NDofs = zeros(Int,nlevels)\n\n    # refinement loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # update SUPG operator (with updated CellDiameters)\n        if τ > 0\n            xCellDiameters = getCellDiameters(xgrid)\n            replace_operator!(Problem, [1,1], supg_id, SUPGOperator_LHS(α,β,ν,τ,xCellDiameters))\n            replace_rhsdata!(Problem, 1, supg_id2, SUPGOperator_RHS(f,β,τ,xCellDiameters))\n        end\n\n        # generate FESpace and solution vector\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector(\"u_h\",FES)\n\n        # solve PDE\n        solve!(Solution, Problem)\n\n        # interpolate (just for comparison)\n        Interpolation = FEVector(\"I(u)\",FES)\n        interpolate!(Interpolation[1], u)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2Error,Interpolation[1]))\n        Results[level,3] = sqrt(evaluate(H1Error,Solution[1]))\n        Results[level,4] = sqrt(evaluate(H1Error,Interpolation[1]))\n    end\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,3), clear = true, resolution = (1500,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels = 7, title = \"u_h\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels = 0, colorbarticks = 9, title = \"∇u_h (abs + quiver)\")\n    vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), vscale = 0.8, clear = false)\n    convergencehistory!(p[1,3], NDofs, Results; add_h_powers = [order,order+1], X_to_h = X -> X.^(-1/2), legend = :lb, fontsize = 20, ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| u - Iu ||\", \"|| ∇(u - u_h) ||\", \"|| ∇(u - Iu) ||\"])\nend\nend","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"Default output:","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"julia> Example204_ReactionConvectionDiffusionSUPG2D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = reaction-convection-diffusion problem\n\n     id   | unknown name / equation name\n    [1]   | u / reaction-convection-diffusion equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ν(∇u,∇v) + (αu + β⋅∇u, v) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n            | τ (h^2 (-ν Δu + αu + β⋅∇u), β⋅∇v) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n            | τ (h^2 f, β⋅∇v) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n\n\n\n    ndofs   |   || u - u_h ||    order |   || u - Iu ||     order | || ∇(u - u_h) ||   order |  || ∇(u - Iu) ||   order |\n============|==========================|==========================|==========================|==========================|\n        41  |     8.438e-04      0.00  |     7.662e-04      0.00  |     1.550e-02      0.00  |     1.451e-02      0.00  |\n       145  |     9.634e-05      3.44  |     9.342e-05      3.33  |     3.639e-03      2.29  |     3.575e-03      2.22  |\n       545  |     1.403e-05      2.91  |     1.160e-05      3.15  |     1.218e-03      1.65  |     8.906e-04      2.10  |\n      2113  |     1.835e-06      3.00  |     1.448e-06      3.07  |     3.433e-04      1.87  |     2.224e-04      2.05  |\n      8321  |     2.008e-07      3.23  |     1.809e-07      3.03  |     6.654e-05      2.39  |     5.560e-05      2.02  |","category":"page"},{"location":"examples/Example204_ReactionConvectionDiffusionSUPG2D/","page":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","title":"204 : Reaction-Convection-Diffusion-Problem SUPG 2D","text":"(Image: )","category":"page"},{"location":"boundarydata/#Boundary-Data","page":"Boundary Data","title":"Boundary Data","text":"","category":"section"},{"location":"boundarydata/#Dirichlet-Boundary-Data","page":"Boundary Data","title":"Dirichlet Boundary Data","text":"","category":"section"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"BoundaryOperators carry the boundary data for each unknown. Each regions can have a different AbstractBoundaryType and an associated Data Function. This data function than will now if it depends on space or time variables and will assemble itself accordingly.","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"AbstractBoundaryType Subtypes causes\nDirichletBoundary  \n BestapproxDirichletBoundary computation of Dirichlet data by bestapproximation along boundary faces\n InterpolateDirichletBoundary computation of Dirichlet data by interpolation along boundary faces\n HomogeneousDirichletBoundary zero Dirichlet data on all dofs","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"BoundaryOperator\nadd_boundarydata!","category":"page"},{"location":"boundarydata/#GradientRobustMultiPhysics.BoundaryOperator","page":"Boundary Data","title":"GradientRobustMultiPhysics.BoundaryOperator","text":"mutable struct BoundaryOperator <: AbstractPDEOperator\n\ncollects boundary data for a component of the system and allows to specify a AbstractBoundaryType for each boundary region so far only DirichletBoundary types (see above)\n\n\n\n\n\n","category":"type"},{"location":"boundarydata/#GradientRobustMultiPhysics.add_boundarydata!","page":"Boundary Data","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions, btype::Type{<:AbstractBoundaryType}; data)\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nNote: If the data function is time-dependent (see User Data documentation) it is evaluated in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"function"},{"location":"boundarydata/#Other-Boundary-Data","page":"Boundary Data","title":"Other Boundary Data","text":"","category":"section"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"NeumannBoundary can be implemented as a RhsOperator with AT = ON_BFACES and specified boundary regions","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"PeriodicBoundary can be implemented as a CombineDofs <: AbstractGlobalConstraint","category":"page"},{"location":"boundarydata/","page":"Boundary Data","title":"Boundary Data","text":"SymmetryBoundary can be implemented by penalisation as an BilinearForm on AT = ON_BFACES and specified boundary regions with operator NormalFlux and some penalty factor.","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/#A03-:-Commuting-Interpolators-3D","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"","category":"section"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"(source code)","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"This example verifies a structural property of the Hcurl and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"mathrmCurl(I_mathrmN_k-1psi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"for the standard Nedelec interpolator I_mathrmN_k-1 and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 (higher order spaces are tested as well as soon as they are available).","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"module ExampleA03_CommutingInterpolators3D\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# define some function\nfunction exact_function!(result,x)\n    result[1] = x[2]^2 + x[3]\n    result[2] = x[1]^3\n    result[3] = 1 + x[3]^2\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 1, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    u = DataFunction(exact_function!, [3,3]; name = \"u_exact\", dependencies = \"X\", bonus_quadorder = 3)\n    u_curl = curl(u)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [HCURLN0{3},HDIVRT0{3}]; testFE = H1P0{3}\n    end\n\n    # do the Hcurl and Hdiv interpolation of the function and its curl, resp.\n    FES = [FESpace{FE[1]}(xgrid), FESpace{FE[2]}(xgrid)]\n    Interpolations = FEVector([\"Hcurl-Interpolation\", \"Hdiv-Interpolation\"], FES)\n    interpolate!(Interpolations[1], u)\n    interpolate!(Interpolations[2], u_curl)\n\n    # Both sides of the identity are finite element functions of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # Generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector(\"ErrorVector\",FEStest)\n\n    # Define (yet undiscrete) linear forms that represents testing each side of the identity with the testspace functions\n    LF1 = LinearForm(Identity, [Identity]) # identity of test function is multiplied with identity of other argument\n    LF2 = LinearForm(Identity, [Curl3D]) # identity of test function is multiplied with Curl3D of other argument\n\n    # Assemble linear forms into the same vector with opposite signs\n    # note: first argument fixes the test function FESpace and third arguments are used for the additional operators of the linearform\n    assemble_operator!(error[1], LF1, [Interpolations[2]])\n    assemble_operator!(error[1], LF2, [Interpolations[1]]; factor = -1)\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"Default output:","category":"page"},{"location":"examples/ExampleA03_CommutingInterpolators3D/","page":"A03 : Commuting Interpolators 3D","title":"A03 : Commuting Interpolators 3D","text":"julia> ExampleA03_CommutingInterpolators3D.main()\nerror(Curl(I_HCURLN0{3}(psi) - I_HDIVRT0{3}(Curl(psi))) = 3.7850907633468576e-17","category":"page"},{"location":"viewers/#Viewers","page":"Viewers","title":"Viewers","text":"","category":"section"},{"location":"viewers/","page":"Viewers","title":"Viewers","text":"Plotting is possible e.g. via Nodal Evaluations and the plot routines from ExtendableGrids.jl. For an example see one of the many examples with plots in the example section.","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/#:-Natural-Convection-Triangle-2D","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"","category":"section"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"(source code)","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"This example solves the natural convection (or Boussinesque) problem on a triangular domain Omega = mathrmconvlbrace (00)(10)(01) rbrace. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a stemperature T such that","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"beginaligned\n- Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = Ra mathbfe_2 T\nmathrmdiv(u)  = 0\n- Delta mathbfT + mathbfu cdot nabla mathbfT  = 0\nendaligned","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"with some parameter Ra. The velocity has zero Dirichlet boundary conditions, while the temperature is zero along the y-axis, trigonometric along the x-axis and do-nothing at the diagonal boundary of the triangular domain.","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"Two possible solution strategies are implemented here. The first is Newton's method. For this both nonlinear operators are assigned as auto-differentiated operators. Note, that the nonlinearity in the tmeperature equation involves both unknowns u and T and hence leads to two assigned matrix blocks in the equation for T. However, a direct Newton solve only works smooth for small or moderate Ra (circa up to 1e5).","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"Therefore, for larger Ra, Anderson acceleration can be used which is triggered by setting anderson = true","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"Also, note that a divergence-free reconstruction operator is used for the velocity, which also helps with the convergence and accuracy of the lowest-order method for this test problem.","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"module Example235_NaturalConvectionTriangle2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# boundary data for temperature on bottom\nT_bottom = DataFunction((T,x) -> (T[1] = 2*(1-cos(2*pi*x[1]))), [1,2]; dependencies = \"X\", bonus_quadorder = 4)\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, Ra = 1e5, μ = 1, nrefinements = 6, anderson = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = reference_domain(Triangle2D)\n    xgrid = uniform_refine(xgrid, nrefinements)\n\n    # types for discretisation by Bernardi--Raugel pressure-robust (BDM1 reconstruction) + P1-FEM for temperature\n    FETypes = [H1BR{2}, H1P0{1}, H1P1{1}];\n    RIdentity = ReconstructionIdentity{HDIVBDM1{2}}\n\n    # load Stokes prototype and add a unknown for the temperature\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = false, store = true)\n    add_unknown!(Problem; unknown_name = \"T\", equation_name = \"temperature equation\")\n    Problem.name = \"natural convection problem\"\n\n    # add convection term for velocity\n    add_operator!(Problem, [1,1], ConvectionOperator(1, RIdentity, 2, 2; test_operator = RIdentity, newton = !anderson))\n\n    # add boundary data for velocity (unknown 1) and temperature (unknown 3)\n    add_boundarydata!(Problem, 1, [1,2,3], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 3, [1], BestapproxDirichletBoundary; data = T_bottom)\n    add_boundarydata!(Problem, 3, [3], HomogeneousDirichletBoundary)\n\n    # add Laplacian to temperature equation\n    add_operator!(Problem,[3,3], LaplaceOperator(1.0; store = true, name = \"∇(T)⋅∇(V)\"))\n\n    # add coupling terms for velocity and temperature (convection + gravity)\n    if anderson\n        add_operator!(Problem,[3,3], ConvectionOperator(1, RIdentity, 2, 1; name = \"(R(u)⋅∇(T)) V\"))\n    else #if newton\n        function Tconvection_kernel(result, input)\n            # input = [id(u),∇T]\n            result[1] = input[1]*input[3] + input[2]*input[4]\n            return nothing\n        end\n        function Tconvection_jacobian(jac, input)\n            jac[1,1] = input[3]\n            jac[1,3] = input[1]\n            jac[1,2] = input[4]\n            jac[1,4] = input[2]\n            return nothing\n        end\n        add_operator!(Problem,3, NonlinearForm(Identity, [RIdentity,Gradient], [1,3], Tconvection_kernel, [1,4]; name = \"(R(u)⋅∇(T)) V\", jacobian = Tconvection_jacobian, newton = true))\n    end\n    vdotg_action = Action((result, input) -> (result[1] = -input[2]), [1 2]; name = \"v⋅g\")\n    add_operator!(Problem,[1,3], BilinearForm([RIdentity, Identity], vdotg_action; factor = Ra, name = \"-Ra v⋅g T\", store = true))\n\n    # show final problem description\n    @show Problem\n\n    # construct FESpaces and Solution veector\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid)]\n    Solution = FEVector([\"v_h\", \"p_h\", \"T_h\"],FES)\n\n    # solve (fixedpoint iteration by solving consecutively equations [3] and [1,2] + Anderson acceleration)\n    if anderson\n        solve!(Solution, Problem; subiterations = [[3],[1,2]], maxiterations = 100, target_residual = 1e-8, anderson_iterations = 5, anderson_metric = \"l2\", anderson_unknowns = [1,3], anderson_damping = 0.95, show_solver_config = true, show_statistics = true)\n    else\n        solve!(Solution, Problem; maxiterations = 100, target_residual = 1e2, damping = 0.55, show_solver_config = true, show_statistics = true)\n        solve!(Solution, Problem; maxiterations = 100, target_residual = 1e-8, damping = 0, show_solver_config = false, show_statistics = true)\n    end\n\n    # compute Nusselt number along bottom boundary\n    NuIntegrator = ItemIntegrator([Jump(Gradient)], vdotg_action; AT = ON_BFACES, regions = [1])\n    println(\"\\tNu = $(evaluate(NuIntegrator,Solution[3]))\")\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 0)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.1, clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[3]),1,:), levels = 11, title = \"T_h\")\nend\n\nend","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"Default output:","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"julia> Example235_NaturalConvectionTriangle2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = natural convection problem\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n    [3]   | T / temperature equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((R(u) ⋅ ∇) u, R(v)) [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,3]   | -Ra v⋅g T (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | (R(u)⋅∇(T)) V [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [3,2]   | none\n    [3,3]   | ∇(T)⋅∇(V) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(u)⋅∇(T)) V [Newton] [∂T] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : BestapproxDirichletBoundary -> [1]\n                         HomogeneousDirichletBoundary -> [3]\n                          \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = false\n  anderson_iterations = 0\n  subiterations = UnitRange{Int64}[1:3]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = true\n  anderson_metric = l2\n  skip_update = [1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0.55\n  time = 0\n  parallel_storage = false\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 100.0\n  maxiterations = 100\n  AssemblyTriggers = \n         LHS_AT[1] :  A  I  I \n         LHS_AT[2] :  N  N  N \n         LHS_AT[3] :  A  N  A \n         RHS_AT[1] :  N \n         RHS_AT[2] :  N \n         RHS_AT[3] :  N \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2] [1, 3]; [2, 1] [2] [2, 3]; [3, 1] [3, 2] [3, 1]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 7.05e+00/3.00e-06/7.05e+00\n\t      1   | 7.503909e-12 | 9.615916e+02 | 1.47e+00/2.50e-01/1.72e+00\n\t      2   | 1.058019e-11 | 5.931504e+02 | 2.35e-01/2.82e-01/5.19e-01\n\t      3   | 8.021171e-12 | 6.568060e+02 | 2.33e-01/2.70e-01/5.05e-01\n\t      4   | 9.045760e-12 | 3.990824e+02 | 2.33e-01/2.14e-01/4.49e-01\n\t      5   | 8.417830e-12 | 2.340174e+02 | 2.33e-01/2.28e-01/4.63e-01\n\t      6   | 8.411807e-12 | 1.387982e+02 | 2.33e-01/2.23e-01/4.57e-01\n\t      7   | 8.117198e-12 | 8.267079e+01 | 2.33e-01/2.11e-01/4.45e-01\n\t    total |                             | 9.92e+00/1.68e+00/1.16e+01\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 4.14e-01/2.60e-06/4.14e-01\n\t      1   | 6.951244e-12 | 2.205491e+01 | 2.33e-01/2.49e-01/4.83e-01\n\t      2   | 6.901915e-12 | 1.839015e+00 | 2.34e-01/2.43e-01/4.78e-01\n\t      3   | 6.811905e-12 | 9.514267e-03 | 2.33e-01/2.22e-01/4.57e-01\n\t      4   | 6.812930e-12 | 3.288516e-07 | 2.34e-01/2.27e-01/4.63e-01\n\t      5   | 6.910798e-12 | 7.497313e-12 | 2.33e-01/2.25e-01/4.60e-01\n\t    total |                             | 1.58e+00/1.17e+00/2.76e+00\n\n\tNu = 13.978023716648297","category":"page"},{"location":"examples/Example235_NaturalConvectionTriangle2D/","page":"235 : Natural Convection Triangle 2D","title":"235 : Natural Convection Triangle 2D","text":"(Image: )","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/#:-Stokes-(P1-\\oplus-RT0)-\\times-P0","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"","category":"section"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"(source code)","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"This example computes the velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"beginaligned\n- mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"with exterior force mathbff and some parameter mu and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"The problem will be solved by a (P1 oplus RT0) times P0 scheme suggested by Li/Rui,arXiv:2012.01689 [math.NA]. The velocity space employs continuous P1 functions plus additional (only H(div)-conforming) RT0 functions and a P0 pressure space leading to an exactly divergence-free discrete velocity.","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"module Example224_StokesHdivP1RT\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# flow data for boundary condition, right-hand side and error calculation\nfunction get_flowdata(ν, nonlinear)\n    u = DataFunction((result, x, t) -> (\n            result[1] = exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n            result[2] = exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n        ), [2,2]; name = \"u\", dependencies = \"XT\", bonus_quadorder = 6)\n    p = DataFunction((result, x, t) -> (\n            result[1] = exp(-8*pi*pi*ν*t)*(cos(4*pi*x[1])-cos(4*pi*x[2])) / 4\n        ), [1,2]; name = \"p\", dependencies = \"XT\", bonus_quadorder = 4)\n    ∇p = ∇(p)\n    f = DataFunction((result, x, t) -> (\n            result[1] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n            result[2] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n            if !nonlinear\n                eval_data!(∇p, x, t)\n                result .+= ∇p.val;\n            end;\n        ), [2,2]; name = \"f\", dependencies = \"XT\", bonus_quadorder = 4)\n    return u, p, ∇(u), f\nend\n\n# everything is wrapped in a main function\nfunction main(; μ = 1e-3, nlevels = 5, Plotter = nothing, verbosity = 0, T = 0, α = 2.0, lump = true)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # FEType\n    FETypes = [H1P1{2}, HDIVRT0{2}, H1P0{1}]\n\n    # initial grid\n    xgrid = split_grid_into(grid_unitsquare(Parallelogram2D), Triangle2D)\n    xgrid = uniform_refine(xgrid,0)\n\n    # get exact flow data (see above)\n    u,p,∇u,f = get_flowdata(μ, false)\n\n    # define problem\n    Problem = PDEDescription(\"Stokes problem\")\n    add_unknown!(Problem; equation_name = \"momentum equation (Pk part)\", unknown_name = \"u_P1\")\n    add_unknown!(Problem; equation_name = \"momentum equation (RTk part)\", unknown_name = \"u_RT\")\n    add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"p\")\n\n    # add Laplacian for both velocity blocks\n    add_operator!(Problem, [1,1], LaplaceOperator(μ))\n\n    # add stabilising term(s) for RTk part\n    ARR = BilinearForm([Divergence, Divergence]; name = \"α (div u_RT,div v_RT) $(lump ? \"[lumped]\" : \"\")\", factor = α*μ, APT = lump ? APT_LumpedBilinearForm : APT_BilinearForm)\n    add_operator!(Problem, [2,2], ARR)\n\n    # add Lagrange multiplier for divergence of velocity\n    add_operator!(Problem, [1,3], LagrangeMultiplier(Divergence))\n    add_operator!(Problem, [2,3], LagrangeMultiplier(Divergence))\n    add_constraint!(Problem, FixedIntegralMean(3,0))\n\n    # add boundary data and right-hand side\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_boundarydata!(Problem, 2, [1,2,3,4], HomogeneousDirichletBoundary)\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n    add_rhsdata!(Problem, 2, LinearForm(Identity, f))\n\n    # show final problem description\n    @show Problem\n\n    # prepare error calculation\n    L2VelocityError = L2ErrorIntegrator(u, [Identity, Identity]; time = T)\n    L2PressureError = L2ErrorIntegrator(p, Identity; time = T)\n    H1VelocityError = L2ErrorIntegrator(∇u, Gradient; time = T)\n    L2NormR = L2NormIntegrator(2 , [Identity])\n    L2VeloDivEvaluator = L2NormIntegrator(1 , [Divergence, Divergence])\n    Results = zeros(Float64,nlevels,5); NDofs = zeros(Int,nlevels)\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # refine grid and update grid component references\n        xgrid = uniform_refine(xgrid)\n\n        # generate FES spaces and solution vector\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid; broken = true)]\n        Solution = FEVector([\"u_P1\", \"u_RT\", \"p_h\"],FES)\n\n        # solve\n        solve!(Solution, Problem; time = T, maxiterations = 50)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2VelocityError,[Solution[1], Solution[2]]))\n        Results[level,2] = sqrt(evaluate(L2PressureError,Solution[3]))\n        Results[level,3] = sqrt(evaluate(H1VelocityError,Solution[1]))\n        Results[level,4] = sqrt(evaluate(L2NormR,Solution[2]))\n        Results[level,5] = sqrt(evaluate(L2VeloDivEvaluator,[Solution[1], Solution[2]]))\n    end\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (2,2), clear = true, resolution = (1000,1000))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 3, colorbarticks = 9, title = \"u_P1 (abs + quiver)\")\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.05, clear = false)\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[2]; abs = true),1,:), levels = 3, colorbarticks = 9, title = \"u_RT (abs + quiver)\")\n    vectorplot!(p[1,2],xgrid,evaluate(PointEvaluator(Solution[2], Identity)), spacing = 0.05, clear = false)\n    scalarplot!(p[2,1],xgrid,view(nodevalues(Solution[3]),1,:), levels = 7, title = \"p_h\")\n    convergencehistory!(p[2,2], NDofs, Results[:,1:3]; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_P1) ||\"])\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results; X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_h ||\", \"|| p - p_h ||\", \"|| ∇(u - u_P1) ||\", \"|| u_R ||\", \"|| div(u_h) ||\"])\nend\nend","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"Default output:","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"julia> Example224_StokesHdivP1RT.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = Stokes problem\n\n     id   | unknown name / equation name\n    [1]   | u_P1 / momentum equation (Pk part) \n    [2]   | u_RT / momentum equation (RTk part) \n    [3]   | p / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.001 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | none\n    [1,3]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | α (div u_RT,div v_RT) [lumped] (APT = LumpedBilinearForm, AT = ON_CELLS, regions = [0])\n    [2,3]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [3,1]   | none\n    [3,2]   | none\n    [3,3]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [3]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n   BoundaryOperator[3] : \n\n  GlobalConstraints[1] : Mean[3] != 0 \n\n\n    ndofs   |   || u - u_h ||    order |   || p - p_h ||    order | || ∇(u - u_P1) ||  order |     || u_R ||      order |  || div(u_h) ||    order |\n============|==========================|==========================|==========================|==========================|==========================|\n        42  |     5.546e-01      0.00  |     2.494e-01      0.00  |     6.070e+00      0.00  |     6.293e-01      0.00  |     3.925e-16      0.00  |\n       138  |     2.852e-01      1.12  |     2.050e-01      0.33  |     4.518e+00      0.50  |     2.766e-01      1.38  |     3.585e-16      0.15  |\n       498  |     9.818e-02      1.66  |     8.979e-02      1.29  |     2.452e+00      0.95  |     7.956e-02      1.94  |     1.024e-15      -1.64  |\n      1890  |     2.672e-02      1.95  |     4.593e-02      1.01  |     1.238e+00      1.02  |     2.110e-02      1.99  |     1.959e-15      -0.97  |\n      7362  |     6.834e-03      2.01  |     2.310e-02      1.01  |     6.185e-01      1.02  |     5.426e-03      2.00  |     2.723e-15      -0.48  |","category":"page"},{"location":"examples/Example224_StokesHdivP1RT/","page":"224 : Stokes (P1 oplus RT0) times P0","title":"224 : Stokes (P1 oplus RT0) times P0","text":"(Image: )","category":"page"},{"location":"examples/Example101_Bestapproximation1D/#:-L2-Bestapproximation-1D","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"","category":"section"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"(source code)","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"This example computes the L2-bestapproximation of some given scalar-valued function into the piecewise quadratic continuous polynomials. Afterwards the L2 error is computed and the solution is plotted.","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"module Example101_Bestapproximation1D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# define some (vector-valued) function (to be L2-bestapproximated in this example)\nfunction exact_function!(result,x)\n    result[1] = (x[1]-1//2)*(x[1]-9//10)*(x[1]-1//3)*(x[1]-1//10)*(x[1]-0.6)\nend\nconst u = DataFunction(exact_function!, [1,1]; name = \"u\", dependencies = \"X\", bonus_quadorder = 5)\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, order = 3, h = 0.5, h_fine = 1e-3)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate coarse and fine mesh\n    xgrid = simplexgrid(0:h:1)\n    xgrid_fine = simplexgrid(0:h_fine:1)\n\n    # setup a bestapproximation problem via a predefined prototype\n    # and an L2ErrorEvaluator that can be used later to compute the L2 error\n    Problem = L2BestapproximationProblem(u; bestapprox_boundary_regions = [1,2])\n    L2ErrorEvaluator = L2ErrorIntegrator(u, Identity)\n\n    # choose finite element type of desired order and generate a FESpace for the grid\n    FEType = H1Pk{1,1,order}\n    FES = FESpace{FEType}(xgrid)\n\n    # generate a solution vector and solve the problem on the coarse grid\n    Solution = FEVector(\"u_h\",FES)\n    solve!(Solution, Problem)\n\n    # we want to compare our discrete solution with a finer P1 interpolation of u\n    FES_fine = FESpace{H1P1{1}}(xgrid_fine)\n    Interpolation = FEVector(\"Iu (fine)\",FES_fine)\n    interpolate!(Interpolation[1], u)\n\n    # calculate the L2 errors\n    L2error = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n    L2error_fine = (sqrt(evaluate(L2ErrorEvaluator,Interpolation[1])))\n    println(\"\\t|| u - u_h (P$order, coarse)|| = $L2error\")\n    println(\"\\t|| u - u_h (P1, fine) ||= $L2error_fine\")\n\n    # since plots only use values at vertices, we upscale our (possibly higher order Solution)\n    # by interpolating it also into a P1 function on the fine mesh\n    SolutionUpscaled = FEVector(\"u_h (fine)\",FES_fine)\n    interpolate!(SolutionUpscaled[1], Solution[1])\n\n    # evaluate/interpolate function at nodes and plot_trisurf\n    p=GridVisualizer(Plotter=Plotter,layout=(1,1))\n    scalarplot!(p[1,1],xgrid_fine, nodevalues_view(SolutionUpscaled[1])[1], color=(0,0.7,0), label = \"u_h (P$order, coarse bestapprox)\")\n    scalarplot!(p[1,1],xgrid_fine, nodevalues_view(Interpolation[1])[1], clear = false, color = (1,0,0), label = \"u_h (P1, fine interpolation)\", legend = :rb)\nend\n\nend","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"Default output:","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"julia> Example101_Bestapproximation1D.main()\n\t|| u - u_h (P3, coarse)|| = 0.000591231934028954\n\t|| u - u_h (P1, fine) ||= 6.205492265952196e-8","category":"page"},{"location":"examples/Example101_Bestapproximation1D/","page":"101 : L2-Bestapproximation 1D","title":"101 : L2-Bestapproximation 1D","text":"(Image: )","category":"page"},{"location":"functionoperators/#Function-Operators","page":"Function Operators","title":"Function Operators","text":"","category":"section"},{"location":"functionoperators/#Available-Operators","page":"Function Operators","title":"Available Operators","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"FunctionOperators are building blocks for the weak form and define the operations that should be applied to the trial and test functions (and their discrete representatives) inside some PDEOperator. Below is a list of currently available FunctionOperators. Note, that not all operators can be applied to all finite element types in principle, but potentially have to be understood in a broken sense and only make sense on certain parts of the mesh (e.g. NormalFlux only on a face). Also note that all evaluations are returned as a vector,  so e.g.\\ a gradient of a 2d vector-field will be a vector of length 4 (ordered component-wise).","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Function operator Description Mathematically\nIdentity identity v rightarrow v\nIdentityComponent{c} identity of c-th component v rightarrow v_c\nNormalFlux normal flux (function times normal) v rightarrow v cdot vecn (only ON_FACES)\nTangentFlux tangent flux (function times tangent) v rightarrow v cdot vect (only ON_EDGES)\nGradient gradient/Jacobian (as a vector) v rightarrow nabla v\nSymmetricGradient symmetric part of the gradient v rightarrow Voigt(mathrmsym(nabla v))\nDivergence divergence v rightarrow mathrmdiv(v) = nabla cdot v\nCurlScalar curl operator 1D to 2D (rotated gradient) v rightarrow -dvdx_2dvdx_1\nCurl2D curl operator 2D to 1D v rightarrow dv_1dx_2 - dv_2dx_1\nCurl3D curl operator 3D to 3D v rightarrow nabla times v\nHessian Hesse matrix = all 2nd order derivatives (as a vector) v rightarrow D^2 v      (e.g. in 2D: xx,xy,yx,yy for each component)\nSymmetricHessian{a} symmetric part of Hesse matrix, offdiagonals scaled by a v rightarrow sym(D^2 v) (e.g. in 2D: xx,yy,a*xy for each component)\nLaplacian Laplace Operator (diagonal of Hessian) v rightarrow Delta v   (e.g. in 2D: xx,yy for each component)","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nAs each finite element type is transformed differently from the reference domain to the general domain, the evaluation of each function operator has to be implemented for each finite element class. Currently, not every function operator works in any dimension and for any finite element. More evaluations are added as soon as they are needed (and possibly upon request). Also, the function operators can be combined with user-defined actions to evaluate other operators that can be build from the ones available (e.g. the deviator).","category":"page"},{"location":"functionoperators/#Jumps-and-Averages-and-Parents","page":"Function Operators","title":"Jumps and Averages and Parents","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"If one of the operators above is evaluted ON_FACES for a finite element that is not continuous there, the code usually will crash or produce weird results. However, some operators can be transformed into a Jump- or Average operator and then either the jumps or the average of this operator along the face is assembled. The operator Jump(Identity) for example gives the jump of the identity evaluation on both sides of the face. Seperate values of a discontinuous quantity on each neighbour of the face can be obtained using the Parent{1} and Parent{2} evaluations.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Jump\nAverage\nParent","category":"page"},{"location":"functionoperators/#GradientRobustMultiPhysics.Jump","page":"Function Operators","title":"GradientRobustMultiPhysics.Jump","text":"function Jump(::Type{<:AbstractFunctionOperator})\n\nTransforms operator into its jump evaluation.\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/#GradientRobustMultiPhysics.Average","page":"Function Operators","title":"GradientRobustMultiPhysics.Average","text":"function Average::Type{<:AbstractFunctionOperator})\n\nTransforms operator into its average evaluation.\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/#GradientRobustMultiPhysics.Parent","page":"Function Operators","title":"GradientRobustMultiPhysics.Parent","text":"function Parent{k}::Type{<:AbstractFunctionOperator})\n\nTransforms operator into its evaluation on parent neighbour k (according to ChildParents array in the grid, e.g. FaceCells when assembling over faces).\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nCurrently this feature is only available for assembly on faces (2D and 3D) and certain function operators like Identity, Gradient, Laplacian, ReconstructionIdentity, ReconstructionGradient, NormalFlux, TangentFlux, but more are added as soon as they are needed (and possibly upon request).Also note that a Jump or Average operator has different behaviour depending on the Assembly Pattern it is used in. Usually, the input of the action used in the assembly pattern has the evaluation on one of the two neighbours at a time, which should be okay in a linear context. Only in ItemIntegrators the whole jump comes in the input (here the user can split the jump into left and right value via seperate Parent{1} and Parent{2} evaluations). In NonlinearForms jumps and averages should better not be used currently.","category":"page"},{"location":"functionoperators/#Reconstruction-Operators","page":"Function Operators","title":"Reconstruction Operators","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"There are special operators (see Table below) that allow to evaluate a usual operator of some discrete reconstructed version of a vector-valued testfunction. These operators keep the discrete divergence exactly and so allow for gradient-robust discretisations with classical non divergence-conforming ansatz spaces. So far such operators are available for the vector-valued Crouzeix-Raviart and Bernardi–Raugel finite element types.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Function operator Description\nReconstructionIdentity{FEType} reconstruction operator into specified FEType\nReconstructionDivergence{FEType} divergence of FEType reconstruction operator\nReconstructionGradient{FEType} gradient of FEType reconstruction operator","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nCurrently this feature works with FEType = HdivRT0{d} and FEType = HdivBDM1{d} where d is the space dimension. However, solve! on a PDEDescription that includes these operators will only work if the function operators are at spots were it is applied to functions of type H1BR, H1CR or H1P2B. More reconstruction operators will be implemented at some later point.","category":"page"},{"location":"functionoperators/#Operator-Pairs-(experimental)","page":"Function Operators","title":"Operator Pairs (experimental)","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Two function operators can be put into an OperatorPair so that one can provide effectively two operators in each argument of an assembly pattern. However, the user should make sure that both operators can be evaluated together reasonably (meaning both should be well-defined on the element geometries and the finite element space where the argument will be evaluated, and the action of the operator has to operate with coressponding input and result fields). This feature is still experimental and might have issues in some cases. OperatorTriple for a combination of three operators is also available.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"OperatorPair\nOperatorTriple","category":"page"},{"location":"functionoperators/#GradientRobustMultiPhysics.OperatorPair","page":"Function Operators","title":"GradientRobustMultiPhysics.OperatorPair","text":"abstract type OperatorPair{<:AbstractFunctionOperator,<:AbstractFunctionOperator} <: AbstractFunctionOperator\n\nallows to evaluate two operators in place of one, e.g. OperatorPair{Identity,Gradient}.\n\n\n\n\n\n","category":"type"},{"location":"functionoperators/#GradientRobustMultiPhysics.OperatorTriple","page":"Function Operators","title":"GradientRobustMultiPhysics.OperatorTriple","text":"abstract type OperatorTriple{<:AbstractFunctionOperator,<:AbstractFunctionOperator} <: AbstractFunctionOperator\n\nallows to evaluate three operators in place of one, e.g. OperatorTriple{Identity,Gradient,Hessian}.\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/#Global-Constraints","page":"Global Constraints","title":"Global Constraints","text":"","category":"section"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"GlobalConstraints are additional constraints that the user does not wish to implement as a global Lagrange multiplier because it e.g. causes a dense row in the system matrix and therefore may destroy the performance of the sparse matrix routines. Such a constraint may be a fixed integral mean. Another application are periodic boundary conditions or glued-together quantities in different regions of the grid. Here a CombineDofs constraint may help.","category":"page"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"globalconstraints.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"globalconstraints/#GradientRobustMultiPhysics.CombineDofs","page":"Global Constraints","title":"GradientRobustMultiPhysics.CombineDofs","text":"struct CombineDofs <: AbstractGlobalConstraint\n\ncombines specified degrees of freedom of two unknown (can be the same), which allows to glue together different unknowns in different regions or periodic boundary conditions\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/#GradientRobustMultiPhysics.CombineDofs-Tuple{Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Global Constraints","title":"GradientRobustMultiPhysics.CombineDofs","text":"function CombineDofs(idX::Int,idY::Int,dofsX::Array{Int,1},dofsY::Array{Int,1})\n\nconstructs a CombineDofs constraint that (if assigned to a PDEDescription) ensures that the dofsX of the unknown with id idX matches the dofsY of the unknown with id idY.\n\n\n\n\n\n","category":"method"},{"location":"globalconstraints/#GradientRobustMultiPhysics.FixedIntegralMean","page":"Global Constraints","title":"GradientRobustMultiPhysics.FixedIntegralMean","text":"struct FixedIntegralMean <: AbstractGlobalConstraint\n\nfixes integral mean of the unknown to the specified value\n\n\n\n\n\n","category":"type"},{"location":"globalconstraints/#GradientRobustMultiPhysics.FixedIntegralMean-Tuple{Int64, Real}","page":"Global Constraints","title":"GradientRobustMultiPhysics.FixedIntegralMean","text":"function FixedIntegralMean(unknown_id::Int, value::Real; name::String = \"\")\n\nconstructs a FixedIntegralMean constraint that (if assigned to a PDEDescription) ensures that the unknown with the specified id has an integral mean value.\n\n\n\n\n\n","category":"method"},{"location":"globalconstraints/","page":"Global Constraints","title":"Global Constraints","text":"add_constraint!","category":"page"},{"location":"globalconstraints/#GradientRobustMultiPhysics.add_constraint!","page":"Global Constraints","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint)\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#Assembly-Patterns","page":"Assembly Patterns","title":"Assembly Patterns","text":"","category":"section"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The definition and assembly of an operator is essentially based on Assembly Patterns and a Assembly Type to choose the geometry information needed for providing quadrature and dof handling. The assembly pattern then basically evaluates the function operators and action for the ansatz and test functions and does the quadrature-weighted accumulation into matrices or vectors that represent the operators.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Each pattern comes with a number of arguments/quantities with associated Function Operators as well as one of the Assembly Type that states whether the form is evaluated over CELLS, FACES order BFACES (see above). Important note: this assembly type is relative to the grid of the first argument of the pattern. If this argument already lives ONFACES and the pattern is also ONFACES, it will ultimatively assemble on the faces of the faces (that are the edges of the grid with these faces). Moreover, patterns can have an Action that allow to make the evaluations parameter-, region- and/or function-dependent. Each pattern then has usually on to three implementation that writes into FEMatrix or FEVector (where e.g. a subset of arguments is fixed) or evaluates the pattern in the given FEVectorBlocks.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The patterns are used to assembly the PDE operators defined in a PDE Description.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"GradientRobustMultiPhysics.AssemblyPattern{APT <: AssemblyPatternType, T <: Real, AT <: AssemblyType}","category":"page"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.AssemblyPattern","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.AssemblyPattern","text":"mutable struct AssemblyPattern{APT<:AssemblyPatternType, T<:Real, AT<:AssemblyType, Tv<:Real, Ti<:Integer, ActionType<:Union{AbstractAction, GradientRobustMultiPhysics.AbstractNonlinearFormHandler}}\n\neach assembly pattern has one of the assembly pattern types (APT) that trigger different assemblies for the involved finite element spaces, operators and an assigned action. The assembly type (AT) determines if the assembly takes place on cells, faces or edges etc. (relatively to the assembly type of the first argument of the pattern)\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"The following table lists all available assembly patterns, their constuctor names and how they can be used for assembly or evaluations.","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"AssemblyPatternType constructor evaluate assembles into matrix assembles into vector\nAPT_ItemIntegrator ItemIntegrator yes no no\nAPT_LinearForm LinearForm no no yes\nAPT_BilinearForm BilinearForm no yes no\nAPT_NonlinearForm NonlinearForm no yes yes","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Evaluations of the other AssemblyPatterns may be possible in a future update, but currently have to be performed by maintaining a duplicate of the pattern rewritten as an ItemIntegrator.","category":"page"},{"location":"assemblypatterns/#Constructor-details","page":"Assembly Patterns","title":"Constructor details","text":"","category":"section"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Below all assembly pattern types, constructor functions and evaluate/assembly functions are detailed. (For more info on the ItemIntegrator also see Item Integrators.)","category":"page"},{"location":"assemblypatterns/","page":"Assembly Patterns","title":"Assembly Patterns","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"itemintegrator.jl\",\"linearform.jl\",\"bilinearform.jl\",\"nonlinearform.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_ItemIntegrator","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_ItemIntegrator","text":"abstract type APT_ItemIntegrator <: AssemblyPatternType\n\nitemintegrator assembly pattern type\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.ItemIntegrator","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.ItemIntegrator","text":"ItemIntegrator(operators) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, Float64, ON_CELLS, Float64, Int32, NoAction}\nItemIntegrator(operators, action; T, AT, regions, name) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, Float64, ON_CELLS, Float64, Int32}\n\n\nCreates an ItemIntegrator assembly pattern based on:\n\noperators : operators that should be evaluated for the coressponding FESpace (last one refers to test function)\naction    : an Action with kernel of interface (result, input, kwargs) that takes input (= all but last operator evaluations) and computes result to be dot-producted with test function evaluation             (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\nT         : expected NumberType for evaluation output\nAT        : specifies on which entities of the grid the ItemINtegrator is evaluated\nregions   : specifies in which regions the operator should assemble, default [0] means all regions\nname      : name for this LinearForm that is used in print messages\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.L2DifferenceIntegrator-Tuple{Int64, Any}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.L2DifferenceIntegrator","text":"L2DifferenceIntegrator(ncomponents::Int64, operator; AT, T, name, quadorder, regions) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that computes the L2 norm difference between two arguments evalauted with the same operator (or with different operators if operator is an array) where ncomponents is the expected length of each operator evaluation. Note that all arguments in an evaluation call need to be defined on the same grid !\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.L2ErrorIntegrator","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.L2ErrorIntegrator","text":"L2ErrorIntegrator(compare_data::GradientRobustMultiPhysics.AbstractUserDataType) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\nL2ErrorIntegrator(compare_data::GradientRobustMultiPhysics.AbstractUserDataType, operator; T, quadorder, name, AT, factor, regions, time) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that compares discrete FEVectorBlock operator-evaluations against the given comparedata and returns the L2-error || comparedata(x) - factor*discrete(x) ||. If quadorder is left on \"auto\" two times the quadorder of the data is used in the evaluation.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.L2NormIntegrator-Tuple{Int64, Any}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.L2NormIntegrator","text":"L2NormIntegrator(ncomponents::Int64, operator; T, AT, name, quadorder, regions) -> GradientRobustMultiPhysics.AssemblyPattern{ItemIntegrator, _A, _B, Float64, Int32} where {_A<:Real, _B<:AssemblyType}\n\n\nCreates an ItemIntegrator that computes the L2 norm of an operator evaluation where ncomponents is the expected length of the operator evaluation.\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.evaluate!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AT}, Tuple{T}, Tuple{APT}, Tuple{AbstractMatrix{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT}, Union{FEVector{T, Tv, Ti}, Vector{<:FEVectorBlock{T, Tv, Ti}}, FEVectorBlock{T, Tv, Ti}}}} where {APT<:ItemIntegrator, T<:Real, AT<:AssemblyType, Tv, Ti}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.evaluate!","text":"function evaluate!(\n    b::AbstractArray{T,2},\n    AP::AssemblyPattern{APT,T,AT},\n    FEB::Union{<:FEVector{T,Tv,Ti},<:FEVectorBlock{T,Tv,Ti},Array{<:FEVectorBlock{T,Tv,Ti},1}};\n    skip_preps::Bool = false) where {APT <: APT_ItemIntegrator, T<: Real, AT <: AssemblyType, Tv, Ti}\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlock or FEVector FEB into given two-dimensional Array b.\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.evaluate-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AT}, Tuple{T}, Tuple{APT}, Tuple{GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT}, Union{FEVector{T, Tv, Ti}, Vector{<:FEVectorBlock{T, Tv, Ti}}, FEVectorBlock{T, Tv, Ti}}}} where {APT<:ItemIntegrator, T<:Real, AT<:AssemblyType, Tv, Ti}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.evaluate","text":"function evaluate(\n    AP::AssemblyPattern{APT,T,AT},\n    FEB::Union{<:FEVector{T,Tv,Ti},<:FEVectorBlock{T,Tv,Ti},Array{<:FEVectorBlock{T,Tv,Ti},1}};\n    skip_preps::Bool = false) where {APT <: APT_ItemIntegrator, T<: Real, AT <: AssemblyType, Tv, Ti}\n\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlock or FEVector FEB, only returns accumulation over all items.\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_BilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_BilinearForm","text":"abstract type APT_BilinearForm <: AssemblyPatternType\n\nbilinearform assembly pattern type\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_LinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_LinearForm","text":"abstract type APT_LinearForm <: AssemblyPatternType\n\nlinearform assembly pattern type\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_LumpedBilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_LumpedBilinearForm","text":"abstract type APT_LumpedBilinearForm <: BilinearForm\n\nlumped bilinearform assembly pattern type where only the diagonal elements on each item are assembled\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_NonlinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_NonlinearForm","text":"abstract type APT_NonlinearForm <: AssemblyPatternType\n\nnonlinearform assembly pattern type\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.APT_SymmetricBilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.APT_SymmetricBilinearForm","text":"abstract type APT_SymmetricBilinearForm <: BilinearForm\n\nsymmetric bilinearform assembly pattern type\n\n\n\n\n\n","category":"type"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.DiscreteBilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.DiscreteBilinearForm","text":"DiscreteBilinearForm(operators, FES) -> GradientRobustMultiPhysics.AssemblyPattern{BilinearForm, Float64, ON_CELLS, _A, _B, NoAction} where {_A<:Real, _B<:Integer}\nDiscreteBilinearForm(operators, FES, action; T, AT, name, regions, apply_action_to) -> GradientRobustMultiPhysics.AssemblyPattern{BilinearForm, Float64, ON_CELLS}\n\n\nCreates a (discrete) BilinearForm assembly pattern based on:\n\noperators : operators that should be evaluated for the coressponding FESpace (last two refer to ansatz and test function)\nFES       : FESpaces for each operator (last two refer to ansatz and test function)\naction    : an Action with kernel of interface (result, input, kwargs) that takes input (= all but last operator evaluations) and computes result to be dot-producted with test function evaluation             (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\napplyactionto : specifies which of the two linear arguments is part of the action input ([1] = ansatz, [2] = test)\nregions   : specifies in which regions the operator should assemble, default [0] means all regions\nname      : name for this LinearForm that is used in print messages\nAT        : specifies on which entities of the grid the LinearForm is assembled (default: ON_CELLS)\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.DiscreteLinearForm-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Any, Vector{<:FESpace{Tv, Ti}}}, Tuple{Any, Vector{<:FESpace{Tv, Ti}}, Any}} where {Tv, Ti}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.DiscreteLinearForm","text":"DiscreteLinearForm(operators, FES::Array{<:FESpace{Tv, Ti}, 1}) -> GradientRobustMultiPhysics.AssemblyPattern{LinearForm, Float64, ON_CELLS, _A, _B, NoAction} where {_A<:Real, _B<:Integer}\nDiscreteLinearForm(operators, FES::Array{<:FESpace{Tv, Ti}, 1}, action; T, AT, regions, name) -> GradientRobustMultiPhysics.AssemblyPattern{LinearForm, Float64, ON_CELLS}\n\n\nCreates a (discrete) LinearForm assembly pattern based on:\n\noperators : operators that should be evaluated for the coressponding FESpace (last one refers to test function)\nFES       : FESpaces for each operator (last one refers to test function)\naction    : an Action with kernel of interface (result, input, kwargs) that takes input (= all but last operator evaluations) and computes result to be dot-producted with test function evaluation             (if no action is specified, the full input vector is dot-producted with the test function operator evaluation)\n\nOptional arguments:\n\nregions   : specifies in which regions the operator should assemble, default [0] means all regions\nname      : name for this LinearForm that is used in print messages\nAT        : specifies on which entities of the grid the LinearForm is assembled (default: ON_CELLS)\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.DiscreteLumpedBilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.DiscreteLumpedBilinearForm","text":"DiscreteLumpedBilinearForm(operators, FES) -> GradientRobustMultiPhysics.AssemblyPattern{LumpedBilinearForm, Float64, ON_CELLS, _A, _B, NoAction} where {_A<:Real, _B<:Integer}\nDiscreteLumpedBilinearForm(operators, FES, action; T, AT, name, regions, apply_action_to) -> GradientRobustMultiPhysics.AssemblyPattern{LumpedBilinearForm, Float64, ON_CELLS}\n\n\nCreates a (discrete) LumpedBilinearForm assembly pattern. For more details see BilinearForm constructor.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.DiscreteSymmetricBilinearForm","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.DiscreteSymmetricBilinearForm","text":"DiscreteSymmetricBilinearForm(operators, FES) -> GradientRobustMultiPhysics.AssemblyPattern{SymmetricBilinearForm, Float64, ON_CELLS, _A, _B, NoAction} where {_A<:Real, _B<:Integer}\nDiscreteSymmetricBilinearForm(operators, FES, action; T, AT, name, regions, apply_action_to) -> GradientRobustMultiPhysics.AssemblyPattern{SymmetricBilinearForm, Float64, ON_CELLS}\n\n\nCreates a (discrete) SymmetricBilinearForm assembly pattern. For more details see BilinearForm constructor.\n\n\n\n\n\n","category":"function"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.assemble!-Union{Tuple{AT}, Tuple{Ti}, Tuple{Tv}, Tuple{T}, Tuple{APT}, Tuple{AbstractVecOrMat{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT}}, Tuple{AbstractVecOrMat{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT}, Any}} where {APT<:LinearForm, T<:Real, Tv<:Real, Ti<:Int64, AT<:AssemblyType}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.assemble!","text":"assemble!(\n    b::Union{AbstractArray{T,1},AbstractArray{T,2}},    # target vector/matrix\n    AP::AssemblyPattern{APT,T,AT};                      # LinearForm pattern\n    factor = 1)                                         # factor that is multiplied\n    where {APT <: APT_LinearForm, T, AT}\n\nAssembly of a LinearForm pattern AP into a vector or matrix (if action is vetor-valued).\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.assemble!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AT}, Tuple{T}, Tuple{APT}, Tuple{AbstractMatrix{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT, Tv, Ti}}, Tuple{AbstractMatrix{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT, Tv, Ti}, Any}} where {APT<:BilinearForm, T<:Real, AT<:AssemblyType, Tv, Ti}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.assemble!","text":"assemble!(\n    A::AbstractArray{T,2},                  # target matrix\n    AP::AssemblyPattern{APT,T,AT};          # BilinearForm Pattern\n    apply_action_to::Int = 1,               # action is applied to which argument?\n    factor = 1,                             # factor that is multiplied\n    transposed_assembly::Bool = false,      # transpose result?\n    transpose_copy = Nothing)               # copy a transposed block to this matrix\n    where {APT <: APT_BilinearForm, T, AT}\n\nAssembly of a BilinearForm BLF into given two-dimensional AbstractArray (e.g. FEMatrixBlock or a ExtendableSparseMatrix).\n\n\n\n\n\n","category":"method"},{"location":"assemblypatterns/#GradientRobustMultiPhysics.full_assemble!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AT}, Tuple{T}, Tuple{APT}, Tuple{AbstractMatrix{T}, AbstractVector{T}, GradientRobustMultiPhysics.AssemblyPattern{APT, T, AT}, Vector{<:FEVectorBlock{T, Tv, Ti}}}} where {APT<:NonlinearForm, T<:Real, AT<:AssemblyType, Tv, Ti}","page":"Assembly Patterns","title":"GradientRobustMultiPhysics.full_assemble!","text":"full_assemble!(\n    A::AbstractArray{T,2},                 # target matrix\n    b::AbstractArray{T,1},                 # target rhs\n    AP::AssemblyPattern{APT,T,AT};         # NonlinearForm pattern\n    FEB::Array{<:FEVectorBlock,1};         # coefficients of current solution for each operator\n    factor = 1,                            # factor that is multiplied\n    transposed_assembly::Bool = false)     # transpose result?\n    where {APT <: APT_NonlinearForm, T, AT}\n\nAssembly (of Newton terms) of a NonlinearForm assembly pattern (assembles both matrix and rhs!).\n\n\n\n\n\n","category":"method"},{"location":"examples/Example215_TwoNonlinearCoupled2D/#:-Two-nonlinearly-coupled-PDEs-(2D)","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"","category":"section"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"(source code)","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"This example computes the solutions u_1 and u_2 of the two coupled nonlinear PDEs","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"beginaligned\n-nu_1 Delta u_1 + alpha_1 u_1u_2  = f_1 quad textin  Omega\n-nu_2 Delta u_2 + alpha_2 u_1u_2  = f_2 quad textin  Omega\nendaligned","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"with given data nu, alpha and right-hand sides f_1, f_2 on the unit cube domain Omega.","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"This example demonstrates how to define this problem with one NonlinearForm per equation that can be automatically differentiated to solve the problem with Newton's method.","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"module Example215_TwoNonlinearCoupled2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# problem data\nconst f = [x -> 1, x -> 2*x[2]]\nconst ν = [1e-3,1]\nconst α = [1,1]\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # build/load any grid (here: a uniform-refined 2D unit square into triangles)\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),4)\n\n    # create empty PDE description\n    Problem = PDEDescription(\"Problem\")\n\n    # add two unknown with zero boundary data\n    add_unknown!(Problem; unknown_name = \"u1\", equation_name = \"Equation for u1\")\n    add_unknown!(Problem; unknown_name = \"u2\", equation_name = \"Equation for u2\")\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 2, [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # add equations for unknowns as single NonlinearForms\n    function operator_kernel(id)\n        return function closure(result,input,x)\n            # input = [u1,∇u1,u2]\n            result[1] = α[id]*input[1]*input[4] - f[id](x)    # will be multiplied with identity of test function\n            result[2] = ν[id]*input[2] # will be multiplied with 1st component of gradient of testfunction\n            result[3] = ν[id]*input[3] # will be multiplied with 2nd component of gradient of testfunction\n            return nothing\n        end\n    end\n    add_operator!(Problem,[1,1], NonlinearForm(OperatorPair{Identity,Gradient}, [OperatorPair{Identity,Gradient},Identity], [1,2], operator_kernel(1), [3,4]; name = \"ν1 (∇u1,∇v) + α1 (u1 u2,v) - (f1,v)\", dependencies = \"X\", newton = true))\n    add_operator!(Problem,[2,2], NonlinearForm(OperatorPair{Identity,Gradient}, [OperatorPair{Identity,Gradient},Identity], [2,1], operator_kernel(2), [3,4]; name = \"ν2 (∇u2,∇v) + α2 (u1 u2,v) - (f2,v)\", dependencies = \"X\", newton = true))\n\n    # discretise (here: u1 with P3, u2 with P2)\n    FETypes = [H1P3{1,2},H1P2{1,2}]\n    FES = [FESpace{FETypes[1]}(xgrid),FESpace{FETypes[2]}(xgrid)]\n    Solution = FEVector([\"u1\",\"u2\"],FES)\n\n    # show problem and Solution structure\n    @show Problem Solution\n\n    # solve for chosen Solution vector\n    solve!(Solution, Problem; show_statistics = true)\n\n    # plot solution (for e.g. Plotter = PyPlot)\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, nodevalues_view(Solution[1])[1], levels = 11, title = \"u_1\")\n    scalarplot!(p[1,2], xgrid, nodevalues_view(Solution[2])[1], levels = 11, title = \"u_2\")\nend\nend","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"Default output:","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"julia> Example215_TwoNonlinearCoupled2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = Problem\n\n     id   | unknown name / equation name\n    [1]   | u1 / Equation for u1 \n    [2]   | u2 / Equation for u2 \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ν1 (∇u1,∇v) + α1 (u1 u2,v) - (f1,v) [AD-Newton] [∂u1] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | ν1 (∇u1,∇v) + α1 (u1 u2,v) - (f1,v) [AD-Newton] [∂u2] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | ν2 (∇u2,∇v) + α2 (u1 u2,v) - (f2,v) [AD-Newton] [∂u1] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [2,2]   | ν2 (∇u2,∇v) + α2 (u1 u2,v) - (f2,v) [AD-Newton] [∂u2] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n   BoundaryOperator[2] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n\n\nSolution = \nFEVector information\n====================\n   block  |  ndofs  | name (FEType) \n [    1]  |    4705 | u1 (H1P3{1,2})\n [    2]  |    2113 | u2 (H1P2{1,2})\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 7.31e+00/3.30e-06/7.33e+00\n\t      1   | 4.075484e-15 | 9.363926e-02 | 1.40e+00/2.88e-02/1.43e+00\n\t      2   | 2.612893e-15 | 1.713804e-02 | 2.71e-01/5.46e-02/3.27e-01\n\t      3   | 2.140249e-15 | 1.434648e-03 | 2.55e-01/4.70e-02/3.03e-01\n\t      4   | 2.007101e-15 | 1.451090e-05 | 2.70e-01/4.44e-02/3.15e-01\n\t      5   | 1.980726e-15 | 1.535194e-09 | 2.53e-01/4.58e-02/2.99e-01\n\t      6   | 1.965917e-15 | 3.537736e-15 | 2.68e-01/4.55e-02/3.15e-01\n\t    total |                             | 1.00e+01/2.66e-01/1.03e+01\n","category":"page"},{"location":"examples/Example215_TwoNonlinearCoupled2D/","page":"215 : Two nonlinearly coupled PDEs (2D)","title":"215 : Two nonlinearly coupled PDEs (2D)","text":"(Image: )","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/#A04-:-Custom-Linear-Solvers","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"","category":"section"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"(source code)","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"This example revisits the nonlinear Poisson example from the introductory examples and showcases how to define a user-specified linear solver.","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"module ExampleA04_CustomLinearSolver\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\nusing GridVisualize\n\n\n# first define a subtype of AbstractLinearSystem, which is later given as an optional parameter to the problem solve! call\nmutable struct MySolver{Tv,Ti} <: GradientRobustMultiPhysics.AbstractLinearSystem{Tv, Ti}\n    x::AbstractVector{Tv}\n    A::ExtendableSparseMatrix{Tv,Ti}\n    b::AbstractVector{Tv}\n    # add stuff here that you need e.g. for preconditioners\n    MySolver{Tv,Ti}(x,A,b) where {Tv,Ti} = new{Tv,Ti}(x,A,b)\nend\n\n# you need to define update_factorization! and solve! functions for your new subtype\nfunction GradientRobustMultiPhysics.update_factorization!(LS::MySolver)\n    # this function is called before the solve (if other solver configuration not cause to skip it)\n    # do anything here (e.g. updating the preconditioner)\n    println(\"\\t\\tHi! update_factorization! is called at start and every skip_update time...\")\nend\nfunction GradientRobustMultiPhysics.solve!(LS::MySolver)\n    # this function is called to solve the linear system\n    println(\"\\t\\tHi! solve! under way...\")\n    LS.x .= LS.A \\ LS.b\nend\n\n\n# problem data\nfunction exact_function!(result,x)\n    result[1] = x[1]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x)\n    result[1] = x[2]\n    result[2] = x[1]\n    return nothing\nend\nfunction rhs!(result,x)\n    result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div((1+u^2)*grad(u))\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0, nrefinements = 5, FEType = H1P1{1}, skip_update = 2)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n\n    # negotiate data functions to the package\n    u = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", bonus_quadorder = 2)\n    u_gradient = DataFunction(exact_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", bonus_quadorder = 1)\n    u_rhs = DataFunction(rhs!, [1,2]; dependencies = \"X\", name = \"f\", bonus_quadorder = 4)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    function diffusion_kernel!(result, input)\n        # input = [u, grad(u)]\n        result[1] = (1+input[1]^2)*input[2]\n        result[2] = (1+input[1]^2)*input[3]\n        return nothing\n    end\n    nonlin_diffusion = NonlinearForm(Gradient, [Identity, Gradient], [1,1], diffusion_kernel!, [2,3]; name = \"((1+u^2)*grad(u))*grad(v)\", bonus_quadorder = 2, newton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"u\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    add_rhsdata!(Problem, 1,  LinearForm(Identity, u_rhs; store = true))\n\n    # create finite element space and solution vector\n    FES = FESpace{FEType}(xgrid)\n    Solution = FEVector(\"u_h\",FES)\n\n    # solve the problem (here the newly defined linear solver type is used)\n    solve!(Solution, Problem; linsolver = MySolver{Float64,Int64}, skip_update = [skip_update])\n\n    # calculate error\n    L2Error = L2ErrorIntegrator(u, Identity)\n    H1Error = L2ErrorIntegrator(u_gradient, Gradient)\n    println(\"\\tL2error = $(sqrt(evaluate(L2Error,Solution[1])))\")\n    println(\"\\tH1error = $(sqrt(evaluate(H1Error,Solution[1])))\")\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]),1,:), levels = 11, title = \"u_h\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Gradient; abs = true),1,:), levels=7)\n    vectorplot!(p[1,2], xgrid, evaluate(PointEvaluator(Solution[1], Gradient)), spacing = 0.1, clear = false, title = \"∇u_h (abs + quiver)\")\nend\n\n\nend","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"Default output:","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"julia> ExampleA04_CustomLinearSolver.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t\tHi! update_factorization! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      1   | 1.101498e-14 | 2.924738e-02\n\t\tHi! update_factorization! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      2   | 9.216922e-15 | 4.905172e-04\n\t\tHi! solve! under way...\n\t      3   | 8.963235e-15 | 1.346748e-07\n\t\tHi! update_factorization! is called at start and every skip_update time...\n\t\tHi! solve! under way...\n\t      4   | 9.612779e-15 | 1.904220e-14\n\n\tL2error = 2.5922889562422323e-5\n\tH1error = 0.009021109569311951","category":"page"},{"location":"examples/ExampleA04_CustomLinearSolver/","page":"A04 : Custom Linear Solvers","title":"A04 : Custom Linear Solvers","text":"(Image: )","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/#A08-:-Basis-Plotter","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"","category":"section"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"(source code)","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"This example shows how to plot all the basis functions of a finite element on a reference geometry","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"module ExampleA08_BasisPlotter\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# everything is wrapped in a main function\nfunction main(; refgeom = Triangle2D, nrefinements_for_plot = 4, nplots_per_row = num_nodes(refgeom), plotsize = 400, Plotter = nothing)\n\n    # generate two grids\n    xgrid = reference_domain(refgeom)\n    xgrid_fine = split_grid_into(xgrid, dim_element(refgeom) == 2 ? Triangle2D : Tetrahedron3D)\n    xgrid_fine = uniform_refine(xgrid_fine, nrefinements_for_plot)\n\n    # set finite element type and get some information\n    FEType = HDIVBDM1{2}\n    ncomponents = get_ncomponents(FEType)\n    ndofs = get_ndofs(ON_CELLS, FEType, refgeom)\n\n    # generate FEVector that carry the basis functions\n    FEFunc = FEVector(\"unit vector\",FESpace{FEType}(xgrid))\n    FEFunc_fine = FEVector(\"representation on fine mesh\",FESpace{H1P1{ncomponents}}(xgrid_fine))\n\n    # prepare plot layout\n    nrows = Int(ceil(ndofs/nplots_per_row))\n    p = GridVisualizer(; Plotter = Plotter, layout = (nrows,nplots_per_row), clear = true, resolution = (plotsize*nplots_per_row,nrows*plotsize))\n\n    # loop over all basis functions\n    # interpolate on fine grid and plot\n    nodevalues = zeros(Float64,2,num_nodes(xgrid_fine))\n    col::Int, row::Int = 1, 1\n    for j = 1 : ndofs\n        fill!(FEFunc.entries,0)\n        FEFunc.entries[j] = 1\n        interpolate!(FEFunc_fine[1], FEFunc[1])\n        nodevalues!(nodevalues,FEFunc_fine[1])\n        if ncomponents > 1 # vector-valued functions are plotted abs + quiver\n            scalarplot!(p[row,col], xgrid_fine, view(sqrt.(sum(nodevalues.^2, dims = 1)),1,:), levels = 3, colorbarticks = 11, xlimits = [-0.25,1.25], ylimits = [-0.25,1.25], title = \"φ_$j\")\n            vectorplot!(p[row,col], xgrid_fine, nodevalues, clear = false, spacing = 1/7, title = \"φ_$j\")\n        else\n            scalarplot!(p[row,col], xgrid_fine, view(nodevalues,1,:), levels = 7, title = \"φ_$j\")\n        end\n        if col == nplots_per_row\n            row += 1\n            col = 1\n        else\n            col += 1\n        end\n    end\nend\nend","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"Default output:","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"julia> ExampleA08_BasisPlotter.main()","category":"page"},{"location":"examples/ExampleA08_BasisPlotter/","page":"A08 : Basis-Plotter","title":"A08 : Basis-Plotter","text":"(Image: )","category":"page"},{"location":"examples_intro/#About-the-examples","page":"About the examples","title":"About the examples","text":"","category":"section"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"The examples have been designed with the following issues in mind:","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"they run from the Julia REPL\neach example is a Julia module named similar to the basename of the example file.\nan example can be used as the starting point for a project \nsome examples define test cases for the test suite\nExampleXYZ with X = A can be considered advanced and uses low-level structures and/or demonstrates customisation features or experimental features\nthe default output of the main function is printed on the website and can be used to check if the code runs as expected (unfortunately REPL messages are not recorded)\nprinted assembly and solving times (especially in a first iteration) can be much larger due to first-run compilation times","category":"page"},{"location":"examples_intro/#Running-the-examples","page":"About the examples","title":"Running the examples","text":"","category":"section"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"In order to run ExampleXXX, peform the following steps:","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"Download the example file (e.g. via the source code link at the top)\nMake sure all used packages are installed in your Julia environment\nIn the REPL: ","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"julia> include(\"ExampleXXX.jl\")`\n\njulia> ExampleXXX.main()","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"Some examples offer visual output via the optional argument Plotter = PyPlot or Plotter = GLMakie","category":"page"},{"location":"examples_intro/","page":"About the examples","title":"About the examples","text":"(provided the package PyPlot/GLMakie is installed and loaded)","category":"page"},{"location":"fems/#Implemented-Finite-Elements","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"This page describes the finite element type-tree and lists all implemented finite elements.","category":"page"},{"location":"fems/#The-Finite-Element-Type-Tree","page":"Implemented Finite Elements","title":"The Finite Element Type-Tree","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Finite elements are abstract type leaves in a type-tree. The complete tree looks like this:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"AbstractFiniteElement\n├─ AbstractH1FiniteElement\n│  ├─ AbstractH1FiniteElementWithCoefficients\n│  │  ├─ H1P1TEB\n│  │  └─ H1BR\n│  ├─ H1CR\n│  ├─ H1MINI\n│  ├─ H1P0\n│  ├─ H1P1\n│  ├─ H1P2\n│  ├─ H1P2B\n│  ├─ H1P3\n│  └─ H1Pk\n├─ AbstractHcurlFiniteElement\n│  └─ HCURLN0\n└─ AbstractHdivFiniteElement\n   ├─ HDIVBDM1\n   ├─ HDIVBDM2\n   ├─ HDIVRT0\n   └─ HDIVRT1","category":"page"},{"location":"fems/#Remarks","page":"Implemented Finite Elements","title":"Remarks","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"each type depends on one/two or three parameters, the first one is always the number of components (ncomponents) that determines if the finite element is scalar- or veector-valued; some elements additionaly require the parameter edim <: Int if they are structurally different in different space dimensions; arbitrary order elements require a third parameter that determines the order\neach finite elements mainly comes with a set of basis functions in reference coordinates for each applicable AbstractElementGeometry and degrees of freedom maps for each Assembly Type (coded as a string)\nbroken finite elements are possible via the broken switch in the FESpace constructor\nthe type steers how the basis functions are transformed from local to global coordinates and how FunctionOperators are evaluated\ndepending on additional continuity properties of the element types more basis function sets are defined:\nAbstractH1FiniteElements additionally have evaluations of nonzero basisfunctions on faces/bfaces\nAbstractHdivFiniteElements additionally have evaluations of nonzero normalfluxes of basisfunctions on faces/bfaces\nAbstractHcurlFiniteElements additionally have evaluations of nonzero tangentfluxes of basisfunctions on edges/bedges\neach finite element has its own implemented standard interpolation interpolate! (see Finite Element Interpolations) that can be applied to a Data Function, below it is shortly described what this means for each finite element","category":"page"},{"location":"fems/#List-of-implemented-Finite-Elements","page":"Implemented Finite Elements","title":"List of implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The following table lists all curently implemented finite elements and on which geometries they are available (in brackets a dofmap pattern for CellDofs is shown and the number of local degrees of freedom for a vector-valued realisation). Click on the FEType to find out more details.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"FEType Triangle2D Parallelogram2D Tetrahedron3D Parallelepiped3D\nAbstractH1FiniteElementWithCoefficients    \nH1BR ✓ (N1f1, 9) ✓ (N1f1, 12) ✓ (N1f1, 16) \nH1P1TEB ✓ (N1f1, 9)  ✓ (N1e1, 18) \nAbstractH1FiniteElement    \nH1BUBBLE ✓ (I1, 2) ✓ (I1, 2) ✓ (I1, 3) \nH1CR ✓ (F1, 6) ✓ (F1, 8) ✓ (F1, 12) \nH1MINI ✓ (N1I1, 8) ✓ (N1I1, 10) ✓ (N1I1, 15) \nH1P0 ✓ (I1, 2) ✓ (I1, 2) ✓ (I1, 3) ✓ (I1, 3)\nH1P1 ✓ (N1, 6) ✓ (N1, 8) ✓ (N1, 12) ✓ (N1, 24)\nH1P2 ✓ (N1F1, 12) ✓ (N1F1, 16) ✓ (N1E1, 30) \nH1P2B ✓ (N1F1I1, 14)   \nH1P3 ✓ (N1F2I1, 20)   \nH1Pk ✓ (order-dep)   \nAbstractHcurlFiniteElement    \nHCURLN0 ✓ (f1, 3) ✓ (f1, 4) ✓ (e1, 6) \nAbstractHdivFiniteElement    \nHDIVBDM1 ✓ (f2, 6) ✓ (f2, 8) ✓ (f3, 12) \nHDIVBDM2 ✓ (f3i3, 12)   \nHDIVRT0 ✓ (f1, 3) ✓ (f1, 4) ✓ (f1, 4) ✓ (f1, 6)\nHDIVRT1 ✓ (f2i2, 8)  ✓ (f3i3, 15) ","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Note: the dofmap pattern describes the connection of the local degrees of freedom to entities of the grid and also hints to the continuity. Here, \"N\" or \"n\" means nodes, \"F\" or \"f\" means faces, \"E\" or \"e\" means edges and \"I\" means interior (dofs without any continuity across elements). Capital letters cause that every component has its own degree of freedom, while small letters signalize that only one dof is associated to the entity. As an example \"N1f1\" (for the Bernardi-Raugel element) means that at each node sits one dof per component and at each face sits a single dof. Usually finite elements that involve small letters are only defined vector-valued (i.e. the number of components has to match the element dimension), while finite elements that only involve capital letters are available for any number of components.","category":"page"},{"location":"fems/#H1-conforming-finite-elements","page":"Implemented Finite Elements","title":"H1-conforming finite elements","text":"","category":"section"},{"location":"fems/#P0-finite-element","page":"Implemented Finite Elements","title":"P0 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Piecewise constant finite element that has one degree of freedom on each cell of the grid. (It is masked as a H1-conforming finite element, because it uses the same transformations.)","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves the cell integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P0","text":"abstract type H1P0{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nPiecewise constant polynomials on cells.\n\nallowed on every ElementGeometry\n\n\n\n\n\n","category":"type"},{"location":"fems/#P1-finite-element","page":"Implemented Finite Elements","title":"P1 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The lowest-order current finite element that has a degree of freedom on each vertex of the grid. On simplices the basis functions coincide with the linear barycentric coordinates, on parallelepiped bi-linear functions are used (also known as Q1 element).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P1","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P1","text":"abstract type H1P1{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nContinuous piecewise first-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (linear polynomials)\nTriangle2D (linear polynomials)\nQuadrilateral2D (Q1 space)\nTetrahedron3D (linear polynomials)\nHexahedron3D (Q1 space)\n\n\n\n\n\n","category":"type"},{"location":"fems/#MINI-finite-element","page":"Implemented Finite Elements","title":"MINI finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The mini finite element adds cell bubles to the P1 element that are e.g. beneficial to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell integral.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1MINI","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1MINI","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1MINI","text":"abstract type H1MINI{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nMini finite element.\n\nallowed element geometries:\n\nTriangle2D (linear polynomials + cubic cell bubble)\nQuadrilateral2D (Q1 space + quartic cell bubble)\nTetrahedron3D (linear polynomials + cubic cell bubble)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P1TEB-finite-element","page":"Implemented Finite Elements","title":"P1TEB finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"This element adds tangent-weighted edge bubbles to the P1 finite element and therefore is only available as a vector-valued element.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves face integrals of its tangential flux.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P1TEB","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P1TEB","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P1TEB","text":"abstract type H1P1TEB{edim} <: AbstractH1FiniteElementWithCoefficients where {edim<:Int}\n\nvector-valued (ncomponents = edim) element that uses P1 functions + tangential-weighted edge bubbles as suggested by [\"Fortin Operator for the Taylor-Hood Element\", 2021, arxiv:2104.13953]\n\n(is inf-sup stable for Stokes if paired with continuous P1 pressure space, less degrees of freedom than MINI)\n\nallowed ElementGeometries:\n\nTriangle2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Bernardi-Raugel-(BR)-finite-element","page":"Implemented Finite Elements","title":"Bernardi-Raugel (BR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Bernardi-Raugel adds normal-weighted face bubbles to the P1 finite element and therefore is only available as a vector-valued element.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves face integrals of its normal flux.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1BR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1BR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1BR","text":"abstract type H1BR{edim} <: AbstractH1FiniteElementWithCoefficients where {edim<:Int}\n\nvector-valued (ncomponents = edim) Bernardi–Raugel element (first-order polynomials + normal-weighted face bubbles)\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear + normal-weighted face bubbles)\nQuadrilateral2D (Q1 space + normal-weighted face bubbles)\nTetrahedron3D (piecewise linear + normal-weighted face bubbles)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2-finite-element","page":"Implemented Finite Elements","title":"P2 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2 finite element method on simplices equals quadratic polynomials. On the Triangle2D shape the degrees of freedom are associated with the three vertices and the three faces of the triangle. On the Tetrahedron3D shape the degrees of freedom are associated with the four verties and the six edges. On Parallelogram2D cubic Q2 element functions are used.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its face/edge integrals in 2D/3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2","text":"abstract type H1P2{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (quadratic polynomials)\nTriangle2D (quadratic polynomials)\nQuadrilateral2D (Q2 space)\nTetrahedron3D (quadratic polynomials)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2B-finite-element","page":"Implemented Finite Elements","title":"P2B finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2B finite element adds additional cell bubles (in 2D and 3D) and face bubbles (only in 3D) that are e.g. used to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell and face integrals in 2D and also edge integrals in 3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2B","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2B","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2B","text":"abstract type H1P2B{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#P3-finite-element","page":"Implemented Finite Elements","title":"P3 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P3 finite element method on simplices equals cubic polynomials. On the Triangle2D shape the degrees of freedom are associated with the three vertices, the three faces (double dof) of the triangle and the cell itself (one cell bubble).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves cell and face integrals in 2D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P3","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P3","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P3","text":"abstract type H1P3{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise third-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (cubic polynomials)\nTriangle2D (cubic polynomials, experimental)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Pk-finite-element-(experimental)","page":"Implemented Finite Elements","title":"Pk finite element (experimental)","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Pk finite element method generically generates polynomials of abitrary order k on simplices (Edge1D, Triangle2D so far).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves cell and face integrals in 2D (moment order depends on the order and the element dimension).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1Pk","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1Pk","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1Pk","text":"abstract type H1PK{ncomponents,edim,order} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int,order<:Int}\n\nContinuous piecewise polynomials of arbitrary order >= 1.\n\nallowed ElementGeometries:\n\nEdge1D\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Crouzeix-Raviart-(CR)-finite-element","page":"Implemented Finite Elements","title":"Crouzeix-Raviart (CR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Crouzeix-Raviart element associates one lowest-order function with each face. On the Triangle2D shape, the basis function of a face is one minus two times the nodal basis function of the opposite node. ","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves its face integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1CR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1CR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1CR","text":"abstract type H1CR{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nCrouzeix-Raviart element (only continuous at face centers).\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear, similar to P1)\nQuadrilateral2D (similar to Q1 space)\nTetrahedron3D (piecewise linear, similar to P1)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hdiv-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hdiv-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"These Raviart-Thomas and Brezzi-Douglas-Marini finite elements of lower order and their standard interpolations are available:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HDIVRT0\nHDIVBDM1\nHDIVRT1\nHDIVBDM2","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT0","text":"abstract type HDIVRT0{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Raviart-Thomas space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\nHexahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVBDM1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVBDM1","text":"abstract type HDIVBDM1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Brezzi-Douglas-Marini space\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT1","text":"abstract type HDIVRT1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) Raviart-Thomas space of order 1.\n\nallowed ElementGeometries:\n\nTriangle2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVBDM2","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVBDM2","text":"abstract type HDIVBDM2{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) Brezzi-Douglas-Marini space of order 2\n\nallowed ElementGeometries:\n\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hcurl-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hcurl-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"So far only the lowest order Nedelec element is available in 2D and 3D. On Triangle2D it has one degree of freedom for each face (i.e. the rotated RT0 element), on Tetrahedron3D it has one degree of freedom associated to each of the six edges.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Its standard interpolation of a given functions preserves its tangential face/edge integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HCURLN0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HCURLN0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HCURLN0","text":"abstract type HCURLN0{edim} <: AbstractHcurlFiniteElement where {edim<:Int}\n\nHcurl-conforming vector-valued (ncomponents = edim) lowest-order Nedelec space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"pdesolvers/#Fixed-Time-Solvers","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"","category":"section"},{"location":"pdesolvers/#Fixed-Time-Solvers-2","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"","category":"section"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"If solve! is applied to a PDEDescription and a FEVector (that specifies the ansatz spaces for the unknowns) an investigation of the PDEDescription is performed that decides if the problem is nonlinear (and has to be solved by a fixed-point algorithm) or if it can be solved directly in one step. Additionally the user can manually trigger subiterations that splits the fixed-point algorithm into substeps where only subsets of the PDE equations are solved together.","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"solve!","category":"page"},{"location":"pdesolvers/#GradientRobustMultiPhysics.solve!","page":"Fixed-Time Solvers","title":"GradientRobustMultiPhysics.solve!","text":"function solve!(\n    Target::FEVector,       # contains initial guess and final solution after solve\n    PDE::PDEDescription;\n    kwargs)\n\nSolves a given PDE (provided as a PDEDescription) and writes the solution into the FEVector Target (which knows the discrete ansatz spaces).\n\nKeyword arguments:\n\nanderson_iterations: use Anderson acceleration with this many previous iterates (to hopefully speed up/enable convergence of fixpoint iterations). Default: 0\nsubiterations: an array of equation subsets (each an array) that should be solved together in each fixpoint iteration. Default: ''auto''\nshowiterationdetails: show details (residuals etc.) of each iteration. Default: true\nanderson_unknowns: an array of unknown numbers that should be included in the Anderson acceleration. Default: [1]\nshow_statistics: show some statistics like assembly times. Default: false\nanderson_metric: String that encodes the desired convergence metric for the Anderson acceleration (possible values: ''l2'' or ''L2'' or ''H1''). Default: ''l2''\nskipupdate: matrix update (for the j-th sub-iteration) will be performed each skipupdate[j] iteration; -1 means only in the first iteration. Default: [1]\nlinsolver: String that encodes the linear solver, or type name of self-defined solver (see corressponding example), or type name of ExtendableSparse.AbstractFactorization. Default: ''UMFPACK''\ndamping: damp the new iteration with this part of the old iteration (0 = undamped), also a function is allowed with the interface (olditerate, newiterate, fixed_dofs) that returns the new damping value. Default: 0\ntime: time at which time-dependent data functions are evaluated or initial time for TimeControlSolver. Default: 0\nparallel_storage: assemble storaged operators in parallel for loop. Default: false\nshowsolverconfig: show the complete solver configuration before starting to solve. Default: false\nanderson_damping: Damping factor in Anderson acceleration (1 = undamped). Default: 1\nchecknonlinearresidual: check the nonlinear residual in last nonlinear iteration (causes one more reassembly of nonlinear terms). Default: ''auto''\nfixed_penalty: penalty that is used for the values of fixed degrees of freedom (e.g. by Dirichlet boundary data or global constraints). Default: 1.0e60\ntarget_residual: stop fixpoint iterations if the (nonlinear) residual is smaller than this number. Default: 1.0e-10\nmaxiterations: maximal number of nonlinear iterations (TimeControlSolver runs that many in each time step). Default: ''auto''\n\nDepending on the subiterations and detected/configured nonlinearities the whole system is either solved directly in one step or via a fixed-point iteration.\n\n\n\n\n\n","category":"function"},{"location":"pdesolvers/#Anderson-acceleration","page":"Fixed-Time Solvers","title":"Anderson acceleration","text":"","category":"section"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"Fixpoint iterations my be accelerated by Anderson acceleration. Concepts and some theoretical background can be found in the reference below. Within this package, Anderson acceleration can be triggered by optional solver arguments: the user can specify the depth of the Anderson acceleration (anderson_iterations), the damping within the Anderson iteration (anderson_damping), the ids of the unknowns that should be included in the iteration (anderson_unknowns) and the convergence metric (anderson_metric); also see above for a full list of optional solver arguments. In case of subiterations, the Anderson iteration will be called as a postprocessing after the final subiteration.","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"Reference:","category":"page"},{"location":"pdesolvers/","page":"Fixed-Time Solvers","title":"Fixed-Time Solvers","text":"\"A Proof That Anderson Acceleration Improves the Convergence Rate in Linearly Converging Fixed-Point Methods (But Not in Those Converging Quadratically)\",\nC. Evans, S. Pollock, L. Rebholz, and M. Xiao,\nSIAM J. Numer. Anal., 58(1) (2020),\n>Journal-Link<","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/#:-Bestapproximation-Hdiv-3D","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"","category":"section"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"(source code)","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"This example computes the L2-bestapproximation of some given vector-valued function into an Hdiv-conforming finite element space. It also preserves the divergence of the function in the sense that the divergence of the approximation equals the piecewise integral mean of the exact divergence. Afterwards the L2 error (also of the divergence) is computed.","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"module Example302_BestapproximationHdiv3D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# define some vector field that should be approximated\nfunction exact_function!(result,x)\n    result[1] = x[1]^3+x[3]^2\n    result[2] = -x[1]^2 + x[2] + 1\n    result[3] = x[1]*x[2]\nend\n\nconst u = DataFunction(exact_function!, [3,3]; name = \"u\", dependencies = \"X\", bonus_quadorder = 3)\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nrefinements = 4, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate a unit square mesh and refine\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D), nrefinements)\n\n    # setup a bestapproximation problem via a predefined prototype\n    Problem = L2BestapproximationProblem(u; bestapprox_boundary_regions = [])\n\n    # add a new unknown (Lagrange multiplier that handles the divergence constraint)\n    # here 1 is the number of components (it is scalarvalued) and 3 is the space dimension\n    add_unknown!(Problem; unknown_name = \"p\", equation_name = \"divergence constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n    # add the right-hand side data for the constraint and inspect the defined problem\n    div_u = div(u)\n    add_rhsdata!(Problem, 2, LinearForm(Identity, div_u))\n    @show Problem\n\n    # choose some (inf-sup stable) finite element types\n    #FEType = [HDIVRT0{3}, H1P0{1}]\n    FEType = [HDIVBDM1{3}, H1P0{1}]\n    FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid; broken = true)]\n\n    # create a solution vector and solve the problem\n    Solution = FEVector{Float64}([\"u_h\",\"p_h\"],FES)\n    solve!(Solution, Problem)\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1], xgrid, view(nodevalues(Solution[1]; abs = true),1,:), levels = 5, title = \"u_h (abs)\")\n    scalarplot!(p[1,2], xgrid, view(nodevalues(Solution[1], Divergence),1,:), levels = 5, title = \"div(u_h)\")\n\n    # calculate L2 error and L2 divergence error\n    L2Error = L2ErrorIntegrator(u, Identity)\n    L2DivergenceError = L2ErrorIntegrator(div_u, Divergence)\n    println(\"\\tL2error(Id) = $(sqrt(evaluate(L2Error,Solution[1])))\")\n    println(\"\\tL2error(div) = $(sqrt(evaluate(L2DivergenceError,Solution[1])))\")\nend\n\nend","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"Default output:","category":"page"},{"location":"examples/Example302_BestapproximationHdiv3D/","page":"302 : Bestapproximation Hdiv 3D","title":"302 : Bestapproximation Hdiv 3D","text":"julia> Example302_BestapproximationHdiv3D.main()\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = L2-Bestapproximation problem\n\n     id   | unknown name / equation name\n    [1]   | u / L2-bestapproximation equation \n    [2]   | p / divergence constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (u,v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (u, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | (div(u), id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n\n   BoundaryOperator[1] : \n   BoundaryOperator[2] : \n\n\n\tL2error(Id) = 0.0001770647462745974\n\tL2error(div) = 0.009878280436234963","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/#:-Planar-Lattice-Flow-2D","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"","category":"section"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"(source code)","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"This example computes an approximation to the planar lattice flow test problem of the Stokes equations","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"beginaligned\n- nu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(mathbfu)  = 0\nendaligned","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"with an exterior force mathbff and some viscosity parameter nu and Dirichlet boundary data for mathbfu.","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"Here the exact data for the planar lattice flow","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"beginaligned\nmathbfu(xyt)  = exp(-8 pi^2 nu t) beginpmatrix sin(2 pi x) sin(2 pi y)  cos(2 pi x) cos(2 pi y) endpmatrix\np(xyt)  = exp(-8 pi^2 nu t) ( cos(4 pi x) - cos(4 pi y))  4\nendaligned","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"is prescribed at fixed time t = 0 with mathbff = mathbfu_t - nu Delta mathbfu.","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"In this example the Navier-Stokes equations are solved with a pressure-robust variant of the Bernardi–Raugel finite element method and the nonlinear convection term (that involves reconstruction operators) is automatically differentiated for a Newton iteration.","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"module Example220_PlanarLatticeFlow2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# everything is wrapped in a main function\nfunction main(; ν = 2e-4, nrefinements = 5, verbosity = 0, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # generate a unit square mesh and refine\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),nrefinements)\n\n    # negotiate data\n    u = DataFunction((result, x, t) -> (\n            result[1] = exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n            result[2] = exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n        ), [2,2]; name = \"u\", dependencies = \"XT\", bonus_quadorder = 6)\n    p = DataFunction((result, x, t) -> (\n            result[1] = exp(-8*pi*pi*ν*t)*(cos(4*pi*x[1])-cos(4*pi*x[2])) / 4\n        ), [1,2]; name = \"p\", dependencies = \"XT\", bonus_quadorder = 4)\n    f = DataFunction((result, x, t) -> (\n            result[1] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*sin(2*pi*x[1])*sin(2*pi*x[2]);\n            result[2] = 8*pi*pi*ν*exp(-8*pi*pi*ν*t)*cos(2*pi*x[1])*cos(2*pi*x[2]);\n        ), [2,2]; name = \"f\", dependencies = \"XT\", bonus_quadorder = 4)\n\n    # set finite elements (Bernardi--Raugel)\n    FEType = [H1BR{2}, H1P0{1}]\n\n    # prepare comparison plot\n    vis = GridVisualizer(; Plotter = Plotter, layout = (2,2), clear = true, resolution = (1000,1000))\n\n    for probust in [false,true]\n\n        # set identity operator\n        IdentityV = probust ? ReconstructionIdentity{HDIVBDM1{2}} : Identity\n\n        # setup a bestapproximation problem via a predefined prototype\n        Problem = PDEDescription(\"planar lattice flow problem\")\n        add_unknown!(Problem; equation_name = \"momentum equation\", unknown_name = \"velocity\")\n        add_unknown!(Problem; equation_name = \"incompressibility constraint\", unknown_name = \"pressure\")\n        add_operator!(Problem, [1,1], LaplaceOperator(ν; store = true))\n        add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n        add_operator!(Problem, [1,1], ConvectionOperator(1, IdentityV, 2, 2; test_operator = IdentityV, newton = true))\n        add_constraint!(Problem, FixedIntegralMean(2,0))\n        add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n        add_rhsdata!(Problem, 1, LinearForm(IdentityV, f))\n        @show Problem\n\n        # create finite element spaces and solve\n        FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid)]\n        Solution = FEVector([\"u_h $(probust ? \"(probust)\" : \"classical\")\",\"p_h $(probust ? \"(probust)\" : \"classical\")\"],FES)\n        solve!(Solution, Problem; show_statistics = true, show_solver_config = true)\n\n        # calculate L2 errors for u and p\n        L2errorV = L2ErrorIntegrator(u, Identity)\n        L2errorP = L2ErrorIntegrator(p, Identity)\n        println(\"|| u - u_h || = $(sqrt(evaluate(L2errorV,Solution[1])))\")\n        println(\"|| p - p_h || = $(sqrt(evaluate(L2errorP,Solution[2])))\")\n\n        # plot\n        scalarplot!(vis[1+probust,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 5, title = \"$(Solution[1].name) (abs + quiver)\")\n        vectorplot!(vis[1+probust,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.05, clear = false)\n        scalarplot!(vis[1+probust,2],xgrid,view(nodevalues(Solution[2]),1,:), levels = 7, title = \"$(Solution[2].name)\")\n    end\nend\n\nend","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"Default output:","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"julia> Example220_PlanarLatticeFlow2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = planar lattice flow problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0002 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((id(u) ⋅ ∇) u, id(v)) [Newton] [∂velocity] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, id(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = true\n  anderson_iterations = 0\n  subiterations = UnitRange{Int64}[1:2]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = true\n  anderson_metric = l2\n  skip_update = [1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0\n  time = 0\n  parallel_storage = false\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 1.0e-10\n  maxiterations = 10\n  AssemblyTriggers = \n         LHS_AT[1] :  A  I \n         LHS_AT[2] :  N  N \n         RHS_AT[1] :  T \n         RHS_AT[2] :  N \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2]; [2, 1] [2]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.60e+01/3.30e-06/1.60e+01\n\t      1   | 4.243971e-17 | 8.045259e-02 | 2.16e-01/1.81e-01/4.69e-01\n\t      2   | 8.791779e-17 | 1.024548e-02 | 1.86e-01/1.55e-01/3.43e-01\n\t      3   | 8.148060e-17 | 4.138344e-03 | 1.88e-01/1.44e-01/3.33e-01\n\t      4   | 8.012903e-17 | 7.867024e-04 | 1.87e-01/1.32e-01/3.20e-01\n\t      5   | 7.971471e-17 | 1.935933e-05 | 1.87e-01/1.43e-01/3.31e-01\n\t      6   | 8.039976e-17 | 6.645766e-08 | 1.86e-01/1.35e-01/3.22e-01\n\t      7   | 7.994787e-17 | 3.700329e-13 | 1.87e-01/1.34e-01/3.21e-01\n\t    total |                             | 1.74e+01/1.02e+00/1.99e+01\n\n|| u - u_h || = 0.3104459896952412\n|| p - p_h || = 0.19225996887573954\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = planar lattice flow problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | 0.0002 (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((R(u) ⋅ ∇) u, R(v)) [Newton] [∂velocity] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | (f, R(v)) (APT = LinearForm, AT = ON_CELLS, regions = [0])\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = true\n  anderson_iterations = 0\n  subiterations = UnitRange{Int64}[1:2]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = true\n  anderson_metric = l2\n  skip_update = [1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0\n  time = 0\n  parallel_storage = false\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 1.0e-10\n  maxiterations = 10\n  AssemblyTriggers = \n         LHS_AT[1] :  A  I \n         LHS_AT[2] :  N  N \n         RHS_AT[1] :  T \n         RHS_AT[2] :  N \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2]; [2, 1] [2]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 1.11e+00/3.60e-06/1.11e+00\n\t      1   | 4.190909e-17 | 9.171721e-02 | 2.10e-01/1.79e-01/3.90e-01\n\t      2   | 1.033837e-16 | 1.199596e-05 | 2.11e-01/1.71e-01/3.83e-01\n\t      3   | 1.042392e-16 | 6.220656e-08 | 2.09e-01/1.67e-01/3.77e-01\n\t      4   | 1.030138e-16 | 2.059120e-14 | 2.10e-01/1.39e-01/3.50e-01\n\t    total |                             | 1.95e+00/6.56e-01/2.61e+00\n\n|| u - u_h || = 0.0062843340681257315\n|| p - p_h || = 0.01672006383926805","category":"page"},{"location":"examples/Example220_PlanarLatticeFlow2D/","page":"220 : Planar Lattice Flow 2D","title":"220 : Planar Lattice Flow 2D","text":"(Image: )","category":"page"},{"location":"timecontrolsolver/#Time-Dependent-Solvers","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"","category":"section"},{"location":"timecontrolsolver/#TimeControlSolver","page":"Time-Dependent Solvers","title":"TimeControlSolver","text":"","category":"section"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"The structure TimeControlSolver can be used to setup a time-dependent solver that can be configured in a similar manner as the time-independent ones (subiterations, nonlinear iterations, linear solvers). The following table lists the available TimeIntegrationRules:","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"Time integration rule order Formula\nBackwardEuler 1 (M^n+1 + A^n+1) u^n+1 = F^n+1 + M^n+1 u^n\nCrankNicolson 2 (M^n+1 + A^n+1) u^n+1 = F^n+1 + F^n - A^n u^n + M^n+1 u^n","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"Note that currently the time-derivative (M terms) is added by the TimeControlSolver in each integration step and is in general not part of the PDEDescription (this might change in future). The default time derivative is a scaled (depends on the integration rule) mass matrix of the used finite element space, but the user can overwrite it via optional constructor arguments (experimental).","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"In case of the Crank-Nicolson scheme the user can mask unknowns of the PDE as an algebraic constraint (see add_unknown! in ProblemDescription). For these variables old iterates are not used on the right-hand side of the iteration formula. The pressure in the Navier-Stokes system is an example for such a constraint.","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"TimeControlSolver\nadvance!","category":"page"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.TimeControlSolver","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.TimeControlSolver","text":"function TimeControlSolver(\n    PDE::PDEDescription,                                        # PDE system description\n    InitialValues::FEVector{T,Tv,Ti},                           # contains initial values and stores solution of advance! methods\n    TIR::Type{<:AbstractTimeIntegrationRule} = BackwardEuler;   # Time integration rule\n    dt_operator = [],                                           # Operator in time derivative (default: Identity) for each subiteration (applied to test and ansatz function)\n    dt_action = [],                                             # Action in time derivative (deulta: NoAction) for each subiteration\n    dt_is_nonlinear = [],                                          # is the time derivative nonlinear?\n    T_time = Float64,                                           # Type for timestep and total time\n    kwargs...) where {T,Tv,Ti}                                  # additional solver arguments\n\nCreates a time-dependent solver that can be advanced in time with advance!. The FEVector Solution stores the initial state but also the solution at the current time. The argument TIR carries the time integration rule to be use (e.g. BackwardEuler or CrankNicolson). T_time determines the NumberType of the timesteps and total time.\n\nKeyword arguments:\n\nsubiterations: an array of equation subsets (each an array) that should be solved together in each fixpoint iteration. Default: ''auto''\nshowiterationdetails: show details (residuals etc.) of each iteration. Default: true\ntimedependent_equations: array of the equations that should get a time derivative (only for TimeControlSolver). Default: Any[]\nshow_statistics: show some statistics like assembly times. Default: false\nskipupdate: matrix update (for the j-th sub-iteration) will be performed each skipupdate[j] iteration; -1 means only in the first iteration. Default: [1]\nlinsolver: String that encodes the linear solver, or type name of self-defined solver (see corressponding example), or type name of ExtendableSparse.AbstractFactorization. Default: ''UMFPACK''\ntime: time at which time-dependent data functions are evaluated or initial time for TimeControlSolver. Default: 0\nparallel_storage: assemble storaged operators in parallel for loop. Default: false\nshowsolverconfig: show the complete solver configuration before starting to solve. Default: false\nchecknonlinearresidual: check the nonlinear residual in last nonlinear iteration (causes one more reassembly of nonlinear terms). Default: ''auto''\nfixed_penalty: penalty that is used for the values of fixed degrees of freedom (e.g. by Dirichlet boundary data or global constraints). Default: 1.0e60\ntarget_residual: stop fixpoint iterations if the (nonlinear) residual is smaller than this number. Default: 1.0e-10\nmaxiterations: maximal number of nonlinear iterations (TimeControlSolver runs that many in each time step). Default: ''auto''\n\nFurther (very experimental) optional arguments for TimeControlSolver are:\n\ndt_operator : (array of) operators applied to testfunctions in time derivative (default: Identity)\ndt_action : (array of) actions that are applied to the ansatz function in the time derivative (to include parameters etc.)\ndtisnonlinear : (array of) booleans to decide which time derivatives should be recomputed in each timestep\n\n\n\n\n\n","category":"type"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance!","text":"function TimeControlSolver(\n    advance!(TCS::TimeControlSolver, timestep::Real = 1e-1)\n\nAdvances a TimeControlSolver one step in time with the given timestep.\n\n\n\n\n\n","category":"function"},{"location":"timecontrolsolver/#Advancing-a-TimeControlSolver","page":"Time-Dependent Solvers","title":"Advancing a TimeControlSolver","text":"","category":"section"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"There are two functions that advance the TimeControlSolver automatically until a given final time (advance_until_time!) is reached or until stationarity is reached (advance_until_stationarity!). As an experimental feature, one can add the module DifferentialEquations.jl as the first argument to these methods to let this module run the time integration (the native TimeIntegrationRule argument in the TimeControlSolver constuctor is ignored in this case).","category":"page"},{"location":"timecontrolsolver/","page":"Time-Dependent Solvers","title":"Time-Dependent Solvers","text":"advance_until_time!\nadvance_until_stationarity!","category":"page"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance_until_time!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance_until_time!","text":"advance_until_time!(TCS::TimeControlSolver, timestep, finaltime; finaltime_tolerance = 1e-15, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until the specified finaltime is reached (up to the specified tolerance). The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\nadvance_until_time!(DiffEQ::Module, TCS::TimeControlSolver, timestep, finaltime; solver = nothing, abstol = 1e-1, reltol = 1e-1, dtmin = 0, adaptive::Bool = true)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until the specified finaltime is reached (up to the specified tolerance) with the given exterior time integration module. The only valid Module here is DifferentialEquations.jl and the optional arguments are passed to it. If solver == nothing the solver Rosenbrock23(autodiff = false) will be chosen. For more choices please consult the documentation of DifferentialEquations.jl.\n\nAlso note that this is a highly experimental feature and will not work for general TimeControlSolvers configuration (e.g. in the case of several subiterations or, it seems, saddle point problems). Also have a look at corressponding the example in the advanced examples section.\n\n\n\n\n\n","category":"function"},{"location":"timecontrolsolver/#GradientRobustMultiPhysics.advance_until_stationarity!","page":"Time-Dependent Solvers","title":"GradientRobustMultiPhysics.advance_until_stationarity!","text":"advance_until_stationarity!(TCS::TimeControlSolver, timestep; stationarity_threshold = 1e-11, maxtimesteps = 100, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until stationarity is detected (change of variables below threshold) or a maximal number of time steps is exceeded. The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\n","category":"function"},{"location":"examples/Example236_NaturalConvectionSquare2D/#:-Natural-Convection-Square-2D","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"","category":"section"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"(source code)","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"This example solves the natural convection (or Boussinesque) problem on a square domain Omega = (01)^2. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a stemperature T such that","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"beginaligned\n- Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = Ra mathbfe_2 T\nmathrmdiv(u)  = 0\n- Delta mathbfT + mathbfu cdot nabla mathbfT  = 0\nendaligned","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"with some parameter Ra. The velocity has zero Dirichlet boundary conditions, while the temperature is fixed at constant values on the left and right boundary, the remaining boundary is do-nothing.","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"Two possible solution strategies are implemented here. The first is Newton's method. For this both nonlinear operators are assigned as auto-differentiated operators. Note, that the nonlinearity in the tmeperature equation involves both unknowns u and T and hence leads to two assigned matrix blocks in the equation for T. However, a direct Newton solve only works smooth for small or moderate Ra (circa up to 1e5).","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"Therefore, for larger Ra, Anderson acceleration can be used which is triggered by setting anderson = true","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"Also, note that a divergence-free reconstruction operator is used for the velocity, which also helps with the convergence and accuracy of the lowest-order method for this test problem.","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"module Example236_NaturalConvectionSquare2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# boundary data for temperature on bottom\nT_left = DataFunction([1])\nT_right = DataFunction([0])\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing, Ra = 1e5, μ = 1, nrefinements = 5, reconstruct = true, anderson = false)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # load mesh and refine\n    xgrid = grid_unitsquare(Triangle2D)\n    xgrid = uniform_refine(xgrid, nrefinements)\n\n    # types for discretisation by Bernardi--Raugel pressure-robust (BDM1 reconstruction) + P1-FEM for temperature\n    FETypes = [H1BR{2}, H1P0{1}, H1P1{1}];\n    RIdentity = reconstruct ? ReconstructionIdentity{HDIVBDM1{2}} : Identity\n\n    # load Stokes prototype and add a unknown for the temperature\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = μ, nonlinear = false, store = true)\n    add_unknown!(Problem; unknown_name = \"T\", equation_name = \"temperature equation\")\n    Problem.name = \"natural convection problem\"\n\n    # add convection term for velocity\n    add_operator!(Problem, [1,1], ConvectionOperator(1, RIdentity, 2, 2; test_operator = RIdentity, newton = !anderson))\n\n    # add boundary data for velocity (unknown 1) and temperature (unknown 3)\n    add_boundarydata!(Problem, 1, [1,2,3,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 3, [4], InterpolateDirichletBoundary; data = T_left)\n    add_boundarydata!(Problem, 3, [2], InterpolateDirichletBoundary; data = T_right)\n\n    # add Laplacian to temperature equation\n    add_operator!(Problem,[3,3], LaplaceOperator(1.0; store = true, name = \"∇(T)⋅∇(V)\"))\n\n    # add coupling terms for velocity and temperature (convection + gravity)\n    if anderson\n        add_operator!(Problem,[3,3], ConvectionOperator(1, RIdentity, 2, 1; name = \"(R(u)⋅∇(T)) V\"))\n    else #if newton\n        function Tconvection_kernel(result, input)\n            # input = [id(u),∇T]\n            result[1] = input[1]*input[3] + input[2]*input[4]\n            return nothing\n        end\n        function Tconvection_jacobian(jac, input)\n            jac[1,1] = input[3]\n            jac[1,3] = input[1]\n            jac[1,2] = input[4]\n            jac[1,4] = input[2]\n            return nothing\n        end\n        add_operator!(Problem,3, NonlinearForm(Identity, [RIdentity,Gradient], [1,3], Tconvection_kernel, [1,4]; name = \"(R(u)⋅∇(T)) V\", jacobian = Tconvection_jacobian, newton = true))\n    end\n    vdotg_action = Action((result, input) -> (result[1] = -input[2]), [1 2]; name = \"v⋅g\")\n    add_operator!(Problem,[1,3], BilinearForm([RIdentity, Identity], vdotg_action; factor = Ra, name = \"-Ra v⋅g T\", store = true))\n\n    # show final problem description\n    @show Problem\n\n    # construct FESpaces and Solution veector\n    FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid), FESpace{FETypes[3]}(xgrid)]\n    Solution = FEVector([\"v_h\", \"p_h\", \"T_h\"],FES)\n\n    # solve (fixedpoint iteration by solving consecutively equations [3] and [1,2] + Anderson acceleration)\n    if anderson\n        solve!(Solution, Problem; subiterations = [[3],[1,2]], maxiterations = 100, target_residual = 1e-8, anderson_iterations = 20, anderson_metric = \"l2\", anderson_unknowns = [1], anderson_damping = 0.90, show_solver_config = true, show_statistics = true)\n    else\n        solve!(Solution, Problem; maxiterations = 100, target_residual = 1e2, damping = 0.55, show_solver_config = true, show_statistics = true)\n        solve!(Solution, Problem; maxiterations = 100, target_residual = 1e-8, damping = 0, show_solver_config = false, show_statistics = true)\n    end\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (1,2), clear = true, resolution = (1000,500))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 0)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.1, clear = false, title = \"u_h (abs + quiver)\")\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[3]),1,:), levels = 11, title = \"T_h\")\nend\n\nend","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"Default output:","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"julia> Example236_NaturalConvectionSquare2D.main()\nExplored path: SparsityDetection.Path(Bool[], 1)\nExplored path: SparsityDetection.Path(Bool[], 1)\nProblem = \nPDE-DESCRIPTION\n===============\n  system name = natural convection problem\n\n     id   | unknown name / equation name\n    [1]   | u / momentum equation \n    [2]   | p / incompressibility constraint \n    [3]   | T / temperature equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | (∇u,∇v) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | ((R(u) ⋅ ∇) u, R(v)) [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [1,2]   | (div(v),q) (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [1,3]   | -Ra v⋅g T (APT = BilinearForm, AT = ON_CELLS, regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | (R(u)⋅∇(T)) V [Newton] [∂u] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n    [3,2]   | none\n    [3,3]   | ∇(T)⋅∇(V) (APT = SymmetricBilinearForm, AT = ON_CELLS, regions = [0])\n            | (R(u)⋅∇(T)) V [Newton] [∂T] (APT = NonlinearForm, AT = ON_CELLS, regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [1, 2, 3, 4]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : InterpolateDirichletBoundary -> [4, 2]\n                         \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSC = \nSOLVER-CONFIGURATION\n======================\n  overall nonlinear = true\n  overall timedependent = false\n  anderson_iterations = 0\n  subiterations = UnitRange{Int64}[1:3]\n  show_iteration_details = true\n  timedependent_equations = Any[]\n  anderson_unknowns = [1]\n  show_statistics = true\n  anderson_metric = l2\n  skip_update = [1]\n  linsolver = GradientRobustMultiPhysics.LinearSystem{Float64, Int64, LUFactorization}\n  damping = 0.55\n  time = 0\n  parallel_storage = false\n  show_solver_config = true\n  anderson_damping = 1\n  check_nonlinear_residual = true\n  fixed_penalty = 1.0e60\n  target_residual = 100.0\n  maxiterations = 100\n  AssemblyTriggers = \n         LHS_AT[1] :  A  I  I \n         LHS_AT[2] :  N  N  N \n         LHS_AT[3] :  A  N  A \n         RHS_AT[1] :  N \n         RHS_AT[2] :  N \n         RHS_AT[3] :  N \n                     (I = Once, T = EachTimeStep/SubIteration, A = Always, N = Never)\n\n  LHS_dependencies = [[1] [1, 2] [1, 3]; [2, 1] [2] [2, 3]; [3, 1] [3, 2] [3, 1]]\n\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 3.86e+00/2.80e-06/3.86e+00\n\t      1   | 1.169434e-11 | 1.710197e+03 | 2.43e-01/2.87e-01/5.32e-01\n\t      2   | 8.901353e-12 | 1.029414e+03 | 2.36e-01/2.61e-01/4.98e-01\n\t      3   | 8.648886e-12 | 6.245192e+02 | 2.36e-01/2.17e-01/4.54e-01\n\t      4   | 8.500381e-12 | 3.852044e+02 | 2.36e-01/2.27e-01/4.64e-01\n\t      5   | 8.186414e-12 | 2.482485e+02 | 2.36e-01/2.15e-01/4.53e-01\n\t      6   | 7.925332e-12 | 1.980286e+02 | 2.36e-01/2.17e-01/4.54e-01\n\t      7   | 7.721770e-12 | 1.111594e+02 | 2.36e-01/2.17e-01/4.54e-01\n\t      8   | 7.370171e-12 | 6.100656e+01 | 2.36e-01/2.15e-01/4.53e-01\n\t    total |                             | 5.76e+00/1.86e+00/7.63e+00\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n\t-----------------------------------------------------------------------\n\t    init  |                             | 4.21e-01/3.00e-06/4.21e-01\n\t      1   | 4.078737e-12 | 3.366297e+00 | 2.36e-01/2.45e-01/4.83e-01\n\t      2   | 4.002522e-12 | 6.899417e-03 | 2.37e-01/2.97e-01/5.35e-01\n\t      3   | 4.006143e-12 | 4.473131e-07 | 2.36e-01/2.12e-01/4.50e-01\n\t      4   | 4.021861e-12 | 4.145286e-12 | 2.37e-01/4.52e-01/6.91e-01\n\t    total |                             | 1.37e+00/1.21e+00/2.58e+00\n","category":"page"},{"location":"examples/Example236_NaturalConvectionSquare2D/","page":"236 : Natural Convection Square 2D","title":"236 : Natural Convection Square 2D","text":"(Image: )","category":"page"},{"location":"examples/Example222_PressureRobustness2D/#:-Pressure-robustness-2D","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"","category":"section"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"(source code)","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"This example studies two benchmarks for pressure-robust discretisations of the stationary     Navier-Stokes equations that seek a velocity mathbfu and pressure mathbfp such that","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"with (possibly time-dependent) exterior force mathbff and some viscosity parameter mu.","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"Pressure-robustness is concerned with gradient forces that may appear in the right-hand side or the material derivative and should be balanced by the pressure (as divergence-free vector fields are orthogonal on gradient fields). Here, two test problems are considered:","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"HydrostaticTestProblem() : Stokes (without convection term) and mathbff = nabla p such that  mathbfu = 0\nPotentialFlowTestProblem() : Navier-Stokes with mathbff = 0 and mathbfu = nabla h for some harmonic function","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"In both test problems the errors of non-pressure-robust discretisations scale with  1mu, while the pressure-robust discretisation solves mathbfu = 0 exactly in test problem 1 and gives much better results in test problem 2.","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"module Example222_PressureRobustness2D\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# problem data\nfunction HydrostaticTestProblem()\n    # Stokes problem with f = grad(p)\n    # u = 0,  p = x^3+y^3 - 1//2\n    function P1_pressure!(result,x)\n        result[1] = x[1]^3 + x[2]^3 - 1//2\n    end\n    function P1_rhs!(result,x)\n        result[1] = 3*x[1]^2\n        result[2] = 3*x[2]^2\n    end\n    u = DataFunction([0,0]; name = \"u\")\n    p = DataFunction(P1_pressure!, [1,2]; name = \"p\", dependencies = \"X\", bonus_quadorder = 3)\n    ∇u = DataFunction([0,0,0,0]; name = \"∇u\")\n    f = DataFunction(P1_rhs!, [2,2]; name = \"f\", dependencies = \"X\", bonus_quadorder = 2)\n    return p,u,∇u,f,false\nend\n\nfunction PotentialFlowTestProblem()\n    # NavierStokes with f = 0\n    # u = grad(h) with h = x^3 - 3xy^2\n    # p = - |grad(h)|^2 + 14//5\n    function P2_pressure!(result,x)\n        result[1] = - 1//2 * (9*(x[1]^4 + x[2]^4) + 18*x[1]^2*x[2]^2) + 14//5\n    end\n    function P2_velo!(result,x)\n        result[1] = 3*x[1]^2 - 3*x[2]^2;\n        result[2] = -6*x[1]*x[2];\n    end\n    u = DataFunction(P2_velo!, [2,2]; name = \"u\", dependencies = \"X\", bonus_quadorder = 2)\n    p = DataFunction(P2_pressure!, [1,2]; name = \"p\", dependencies = \"X\", bonus_quadorder = 4)\n    f = DataFunction([0,0]; name = \"f\")\n\n    return p,u,∇(u),f,true\nend\n\n\nfunction solve(Problem, xgrid, FETypes, viscosity = 1e-2; nlevels = 4, target_residual = 1e-10, maxiterations = 20, Plotter = nothing)\n\n    # load problem data and set solver parameters\n    ReconstructionOperator = FETypes[3]\n    p,u,∇u,f,nonlinear = Problem()\n\n    # setup classical (Problem) and pressure-robust scheme (Problem2)\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = u)\n    Problem2 = deepcopy(Problem)\n    Problem.name = \"Stokes problem (classical)\"\n    Problem2.name = \"Stokes problem (p-robust)\"\n\n    # assign right-hand side\n    add_rhsdata!(Problem, 1, LinearForm(Identity, f))\n    add_rhsdata!(Problem2, 1, LinearForm(ReconstructionOperator, f))\n\n    # assign convection term\n    if nonlinear\n        add_operator!(Problem,[1,1], ConvectionOperator(1, Identity, 2, 2))\n        add_operator!(Problem2,[1,1], ConvectionOperator(1, ReconstructionOperator, 2, 2; test_operator = ReconstructionOperator))\n    end\n\n    # define bestapproximation problems\n    BAP_L2_u = L2BestapproximationProblem(u; bestapprox_boundary_regions = [1,2,3,4])\n    BAP_L2_p = L2BestapproximationProblem(p; bestapprox_boundary_regions = [])\n    BAP_H1_u = H1BestapproximationProblem(∇u, u; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation\n    L2Error_u = L2ErrorIntegrator(u, Identity)\n    L2Error_p = L2ErrorIntegrator(p, Identity)\n    H1Error_u = L2ErrorIntegrator(∇u, Gradient)\n    Results = zeros(Float64, nlevels, 9)\n    NDofs = zeros(Int, nlevels)\n\n    # loop over refinement levels\n    Solution, Solution2 = nothing, nothing\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # get FESpaces\n        FES = [FESpace{FETypes[1]}(xgrid), FESpace{FETypes[2]}(xgrid; broken = true)]\n        Solution = FEVector([\"u_c (classic)\", \"p_c (classic)\"],FES)\n        Solution2 = FEVector([\"u_r (p-robust)\", \"p_r (p-robust)\"],FES)\n\n        # solve both problems\n        solve!(Solution, Problem; maxiterations = maxiterations, target_residual = target_residual, anderson_iterations = 5)\n        solve!(Solution2, Problem2; maxiterations = maxiterations, target_residual = target_residual, anderson_iterations = 5)\n\n        # solve bestapproximation problems\n        BA_L2_u = FEVector(\"Πu\",FES[1])\n        BA_L2_p = FEVector(\"πp\",FES[2])\n        BA_H1_u = FEVector(\"Su\",FES[1])\n        solve!(BA_L2_u, BAP_L2_u)\n        solve!(BA_L2_p, BAP_L2_p)\n        solve!(BA_H1_u, BAP_H1_u)\n\n        # compute L2 and H1 errors and save data\n        NDofs[level] = length(Solution.entries)\n        Results[level,1] = sqrt(evaluate(L2Error_u,Solution[1]))\n        Results[level,2] = sqrt(evaluate(L2Error_u,Solution2[1]))\n        Results[level,3] = sqrt(evaluate(L2Error_u,BA_L2_u[1]))\n        Results[level,4] = sqrt(evaluate(L2Error_p,Solution[2]))\n        Results[level,5] = sqrt(evaluate(L2Error_p,Solution2[2]))\n        Results[level,6] = sqrt(evaluate(L2Error_p,BA_L2_p[1]))\n        Results[level,7] = sqrt(evaluate(H1Error_u,Solution[1]))\n        Results[level,8] = sqrt(evaluate(H1Error_u,Solution2[1]))\n        Results[level,9] = sqrt(evaluate(H1Error_u,BA_H1_u[1]))\n    end\n\n    # print convergence history\n    print_convergencehistory(NDofs, Results[:,1:3]; X_to_h = X -> X.^(-1/2), ylabels = [\"||u-u_c||\", \"||u-u_r||\", \"||u-Πu||\"])\n    print_convergencehistory(NDofs, Results[:,4:6]; X_to_h = X -> X.^(-1/2), ylabels = [\"||p-p_c||\", \"||p-p_r||\", \"||p-πp||\"])\n    print_convergencehistory(NDofs, Results[:,7:9]; X_to_h = X -> X.^(-1/2), ylabels = [\"||∇(u-u_c)||\", \"||∇(u-u_r)||\", \"||∇(u-Su)||\"])\n\n    # plot\n    p = GridVisualizer(; Plotter = Plotter, layout = (2,3), clear = true, resolution = (1500,1000))\n    scalarplot!(p[1,1],xgrid,view(nodevalues(Solution[1]; abs = true),1,:), levels = 7)\n    vectorplot!(p[1,1],xgrid,evaluate(PointEvaluator(Solution[1], Identity)), spacing = 0.1, clear = false, title = \"u_c (abs + quiver)\")\n    scalarplot!(p[1,2],xgrid,view(nodevalues(Solution[2]),1,:), levels = 11, title = \"p_c\")\n    scalarplot!(p[2,1],xgrid,view(nodevalues(Solution2[1]; abs = true),1,:), levels = 7)\n    vectorplot!(p[2,1],xgrid,evaluate(PointEvaluator(Solution2[1], Identity)), spacing = 0.1, clear = false, title = \"u_r (abs + quiver)\")\n    scalarplot!(p[2,2],xgrid,view(nodevalues(Solution2[2]),1,:), levels = 11, title = \"p_r\")\n    convergencehistory!(p[1,3], NDofs, Results[:,[1,7,4]]; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_c ||\", \"|| ∇(u - u_c) ||\", \"|| p - p_c ||\"])\n    convergencehistory!(p[2,3], NDofs, Results[:,[2,8,5]]; add_h_powers = [1,2], X_to_h = X -> X.^(-1/2), ylabels = [\"|| u - u_r ||\", \"|| ∇(u - u_r) ||\", \"|| p - p_r ||\"])\n\n    # return last L2 error of p-robust method for testing\n    return Results[end,2]\nend\n\n\n# everything is wrapped in a main function\nfunction main(; problem = 2, verbosity = 0, nlevels = 4, viscosity = 1e-2, Plotter = nothing)\n\n    # set log level\n    set_verbosity(verbosity)\n\n    # set problem to solve\n    if problem == 1\n        Problem = HydrostaticTestProblem\n    elseif problem == 2\n        Problem = PotentialFlowTestProblem\n    else\n        @error \"No problem defined for this number!\"\n    end\n\n    # set grid and problem parameters\n    xgrid = grid_unitsquare(Triangle2D) # initial grid\n\n    # choose finite element discretisation\n    #FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Bernardi--Raugel with RT0 reconstruction\n    FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}] # Bernardi--Raugel with BDM1 reconstruction\n    #FETypes = [H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Crouzeix--Raviart with RT0 reconstruction\n\n    # run\n    solve(Problem, xgrid, FETypes, viscosity; nlevels = nlevels, Plotter = Plotter)\n\n    return nothing\nend\n\n\n# test function that is called by test unit\n# tests if hydrostatic problem is solved exactly by pressure-robust methods\nfunction test(; Plotter = nothing)\n    xgrid = uniform_refine(grid_unitsquare_mixedgeometries())\n    testspaces = [[H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}]\n                  ]\n    error = []\n    for FETypes in testspaces\n        push!(error, solve(HydrostaticTestProblem, xgrid, FETypes, 1; nlevels = 1))\n        println(\"FETypes = $FETypes   error = $(error[end])\")\n    end\n\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D))\n    testspaces = [\n                  [H1P2B{2,2}, H1P1{1}, ReconstructionIdentity{HDIVRT1{2}}]\n                  ]\n    error = []\n    for FETypes in testspaces\n        push!(error, solve(HydrostaticTestProblem, xgrid, FETypes, 1; nlevels = 1, Plotter = Plotter))\n        println(\"FETypes = $FETypes   error = $(error[end])\")\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"Default output:","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"julia> Example222_PressureRobustness2D.main()\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.073839e-16 | 3.907408e+00\n\t      2   | 9.365451e-16 | 1.274009e+00\n\t      3   | 1.227619e-15 | 1.579942e+00\n\t      4   | 1.926318e-15 | 6.859809e-01\n\t      5   | 1.564224e-15 | 4.477920e-01\n\t      6   | 1.557917e-15 | 3.162627e-01\n\t      7   | 2.279701e-15 | 3.153493e-01\n\t      8   | 1.924214e-15 | 3.439853e-01\n\t      9   | 1.588870e-15 | 2.469638e-01\n\t     10   | 1.340339e-15 | 1.880776e-01\n\t     11   | 1.152441e-15 | 2.331640e-01\n\t     12   | 1.151125e-15 | 1.719761e-01\n\t     13   | 1.280815e-15 | 1.236650e-01\n\t     14   | 1.347830e-15 | 1.532406e-01\n\t     15   | 8.923445e-16 | 6.657050e-02\n\t     16   | 1.258836e-15 | 4.815822e-02\n\t     17   | 1.306803e-15 | 3.579211e-02\n\t     18   | 1.624905e-15 | 1.615671e-02\n\t     19   | 1.362649e-15 | 1.255390e-02\n\t     20   | 1.369281e-15 | 5.543517e-03\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.073839e-16 | 4.356218e+00\n\t      2   | 1.190780e-15 | 3.427807e-01\n\t      3   | 1.559922e-15 | 2.616497e-01\n\t      4   | 1.580530e-15 | 2.423814e-01\n\t      5   | 9.386890e-16 | 1.985077e-01\n\t      6   | 1.575335e-15 | 1.334100e-01\n\t      7   | 1.294389e-15 | 5.475030e-02\n\t      8   | 1.210082e-15 | 2.884838e-02\n\t      9   | 1.553945e-15 | 4.588907e-03\n\t     10   | 1.463892e-15 | 2.626320e-03\n\t     11   | 1.304180e-15 | 1.422550e-03\n\t     12   | 1.078402e-15 | 7.924977e-04\n\t     13   | 1.561634e-15 | 6.584443e-04\n\t     14   | 1.160399e-15 | 6.852785e-04\n\t     15   | 9.790790e-16 | 2.363456e-04\n\t     16   | 1.438407e-15 | 1.426986e-05\n\t     17   | 1.345589e-15 | 5.132736e-06\n\t     18   | 1.674126e-15 | 1.535328e-06\n\t     19   | 1.774182e-15 | 2.103704e-07\n\t     20   | 1.008804e-15 | 6.903052e-08\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.818659e-16 | 2.498491e+00\n\t      2   | 1.105962e-15 | 4.264672e-01\n\t      3   | 1.341438e-15 | 1.466834e-01\n\t      4   | 1.193780e-15 | 1.233691e-01\n\t      5   | 1.395225e-15 | 2.575874e-02\n\t      6   | 1.175318e-15 | 1.584287e-02\n\t      7   | 1.263633e-15 | 1.023577e-02\n\t      8   | 1.374335e-15 | 1.453320e-03\n\t      9   | 1.332183e-15 | 5.978589e-04\n\t     10   | 1.275086e-15 | 4.218207e-04\n\t     11   | 1.258755e-15 | 1.503106e-04\n\t     12   | 1.726919e-15 | 4.639181e-05\n\t     13   | 1.294742e-15 | 7.099509e-06\n\t     14   | 1.272071e-15 | 2.661706e-06\n\t     15   | 1.279415e-15 | 9.314383e-07\n\t     16   | 1.313789e-15 | 3.788933e-07\n\t     17   | 1.132668e-15 | 2.119052e-07\n\t     18   | 1.228578e-15 | 4.316282e-08\n\t     19   | 1.265395e-15 | 1.071468e-08\n\t     20   | 1.474348e-15 | 5.244141e-09\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.818659e-16 | 2.776075e+00\n\t      2   | 1.323474e-15 | 4.423908e-02\n\t      3   | 1.167837e-15 | 3.071828e-02\n\t      4   | 1.622886e-15 | 3.349017e-02\n\t      5   | 1.301383e-15 | 4.497733e-03\n\t      6   | 1.242958e-15 | 1.488965e-03\n\t      7   | 1.591397e-15 | 9.470225e-04\n\t      8   | 1.146739e-15 | 3.312038e-04\n\t      9   | 1.422441e-15 | 5.202048e-05\n\t     10   | 1.464572e-15 | 1.296677e-05\n\t     11   | 1.052149e-15 | 1.988109e-06\n\t     12   | 1.246950e-15 | 5.441005e-07\n\t     13   | 1.103213e-15 | 1.996136e-07\n\t     14   | 1.157203e-15 | 4.121641e-08\n\t     15   | 1.157523e-15 | 9.881626e-09\n\t     16   | 1.273332e-15 | 3.023855e-09\n\t     17   | 1.118204e-15 | 1.504867e-09\n\t     18   | 1.307915e-15 | 4.526085e-10\n\t     19   | 1.244003e-15 | 3.113867e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.917451e-16 | 1.399826e+00\n\t      2   | 1.363823e-15 | 1.018196e-01\n\t      3   | 1.288199e-15 | 1.753466e-02\n\t      4   | 1.235518e-15 | 3.761296e-03\n\t      5   | 1.274165e-15 | 6.421894e-04\n\t      6   | 1.217251e-15 | 2.238335e-04\n\t      7   | 1.235684e-15 | 1.034672e-04\n\t      8   | 1.338055e-15 | 2.554042e-05\n\t      9   | 1.160353e-15 | 1.210502e-05\n\t     10   | 1.101683e-15 | 2.795871e-06\n\t     11   | 1.335930e-15 | 3.545141e-07\n\t     12   | 1.321511e-15 | 9.131551e-08\n\t     13   | 1.250026e-15 | 2.694435e-08\n\t     14   | 1.227872e-15 | 3.825650e-09\n\t     15   | 1.174824e-15 | 1.085089e-09\n\t     16   | 1.259185e-15 | 3.259655e-10\n\t     17   | 1.190041e-15 | 7.760310e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 1.917451e-16 | 1.552312e+00\n\t      2   | 1.367542e-15 | 1.953562e-03\n\t      3   | 1.467167e-15 | 6.017487e-04\n\t      4   | 1.380712e-15 | 2.624481e-04\n\t      5   | 1.288248e-15 | 1.586135e-04\n\t      6   | 1.327906e-15 | 4.238678e-05\n\t      7   | 1.355955e-15 | 1.525526e-05\n\t      8   | 1.389689e-15 | 6.411477e-06\n\t      9   | 1.440486e-15 | 1.331816e-06\n\t     10   | 1.303589e-15 | 1.827395e-07\n\t     11   | 1.348940e-15 | 6.848769e-08\n\t     12   | 1.433470e-15 | 2.056931e-08\n\t     13   | 1.337123e-15 | 6.517357e-09\n\t     14   | 1.435200e-15 | 1.560778e-09\n\t     15   | 1.181871e-15 | 2.615672e-10\n\t     16   | 1.249834e-15 | 5.853274e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 3.199316e-16 | 7.397901e-01\n\t      2   | 1.281108e-15 | 1.830527e-02\n\t      3   | 1.328861e-15 | 3.051583e-03\n\t      4   | 1.289070e-15 | 5.731529e-04\n\t      5   | 1.365491e-15 | 1.643458e-04\n\t      6   | 1.311115e-15 | 3.841392e-05\n\t      7   | 1.335662e-15 | 9.291532e-06\n\t      8   | 1.327034e-15 | 1.794343e-06\n\t      9   | 1.354929e-15 | 3.231484e-07\n\t     10   | 1.273020e-15 | 9.050398e-08\n\t     11   | 1.306473e-15 | 1.687268e-08\n\t     12   | 1.337780e-15 | 3.822641e-09\n\t     13   | 1.426969e-15 | 1.045798e-09\n\t     14   | 1.366702e-15 | 1.989625e-10\n\t     15   | 1.315430e-15 | 4.038358e-11\n\n\n\tITERATION |  LSRESIDUAL  |  NLRESIDUAL\n\t--------------------------------------\n\t      1   | 3.199316e-16 | 8.193835e-01\n\t      2   | 1.435754e-15 | 1.666758e-04\n\t      3   | 1.455407e-15 | 4.118692e-05\n\t      4   | 1.408016e-15 | 1.348679e-05\n\t      5   | 1.401391e-15 | 3.927236e-06\n\t      6   | 1.403474e-15 | 1.255630e-06\n\t      7   | 1.432018e-15 | 3.987222e-07\n\t      8   | 1.359266e-15 | 7.610895e-08\n\t      9   | 1.454443e-15 | 1.321940e-08\n\t     10   | 1.399057e-15 | 3.357081e-09\n\t     11   | 1.374772e-15 | 8.720960e-10\n\t     12   | 1.422339e-15 | 1.426550e-10\n\t     13   | 1.313909e-15 | 2.991981e-11\n\n\n    ndofs   |     ||u-u_c||      order |     ||u-u_r||      order |     ||u-Πu||       order |\n============|==========================|==========================|==========================|\n        70  |     1.131e+00      0.00  |     6.883e-01      0.00  |     5.401e-02      0.00  |\n       250  |     6.404e-01      0.89  |     1.009e-01      3.02  |     1.276e-02      2.27  |\n       946  |     2.184e-01      1.62  |     6.151e-03      4.20  |     3.026e-03      2.16  |\n      3682  |     7.007e-02      1.67  |     9.825e-04      2.70  |     7.311e-04      2.09  |\n\n    ndofs   |     ||p-p_c||      order |     ||p-p_r||      order |     ||p-πp||       order |\n============|==========================|==========================|==========================|\n        70  |     1.595e+00      0.00  |     1.313e+00      0.00  |     1.153e+00      0.00  |\n       250  |     1.039e+00      0.67  |     5.913e-01      1.25  |     5.796e-01      1.08  |\n       946  |     4.477e-01      1.26  |     2.901e-01      1.07  |     2.900e-01      1.04  |\n      3682  |     1.939e-01      1.23  |     1.450e-01      1.02  |     1.450e-01      1.02  |\n\n    ndofs   |   ||∇(u-u_c)||     order |   ||∇(u-u_r)||     order |    ||∇(u-Su)||     order |\n============|==========================|==========================|==========================|\n        70  |     1.761e+01      0.00  |     9.635e+00      0.00  |     1.139e+00      0.00  |\n       250  |     1.462e+01      0.29  |     1.954e+00      2.51  |     5.666e-01      1.10  |\n       946  |     8.873e+00      0.75  |     3.876e-01      2.43  |     2.817e-01      1.05  |\n      3682  |     5.237e+00      0.78  |     1.511e-01      1.39  |     1.403e-01      1.03  |","category":"page"},{"location":"examples/Example222_PressureRobustness2D/","page":"222 : Pressure-robustness 2D","title":"222 : Pressure-robustness 2D","text":"(Image: )","category":"page"}]
}
